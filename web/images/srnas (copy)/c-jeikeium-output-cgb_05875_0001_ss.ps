%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu May 14 16:15:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
CACACCGAGUUCGAGGGCUCCGUCUACGUUCUGUCCAAGGACGAGGGCGGCCGCCACACCCCGUUCUUCGACAACUACCGUCCGCAGUUCUACUUCCGC\
) } def
/len { sequence length } bind def

/coor [
[54.49438477 427.06170654]
[39.89468002 422.46743774]
[29.11057472 411.60644531]
[24.62017250 396.97445679]
[27.45533752 381.93383789]
[36.96456909 369.94076538]
[50.96271133 363.75122070]
[51.90457153 348.78082275]
[52.84642792 333.81042480]
[53.78828430 318.84002686]
[51.57622910 315.87585449]
[50.79509354 311.63516235]
[52.05524063 306.85449219]
[55.58937454 302.52593994]
[57.93589401 287.71063232]
[60.28240967 272.89529419]
[62.62892532 258.07998657]
[64.97544098 243.26464844]
[67.32196045 228.44932556]
[61.67090225 214.66836548]
[71.47177124 202.24847412]
[73.81828308 187.43315125]
[66.97156525 179.55374146]
[65.66266632 168.97404480]
[70.58303070 159.26771545]
[80.27737427 153.85287476]
[83.54952240 139.21412659]
[86.82167053 124.57537842]
[74.83048248 112.00469208]
[72.60813904 94.77472687]
[81.01719666 79.57279968]
[96.79389954 72.29912567]
[99.14041901 57.48380280]
[101.48693085 42.66847610]
[103.83345032 27.85315132]
[98.35022736 13.01250172]
[107.98325348 1.65230370]
[110.32977295 -13.16302109]
[112.67629242 -27.97834587]
[115.02280426 -42.79367065]
[117.36932373 -57.60899734]
[119.71584320 -72.42432404]
[122.06235504 -87.23964691]
[120.29741669 -96.39075470]
[124.72231293 -102.48049164]
[127.53302765 -117.21479797]
[130.34375000 -131.94911194]
[125.32939148 -146.95466614]
[135.31449890 -158.00668335]
[125.29153442 -170.00976562]
[125.38063812 -185.64709473]
[135.53973389 -197.53520203]
[150.97200012 -200.06086731]
[164.39080811 -192.03155518]
[169.46018982 -177.23847961]
[163.78656006 -162.66645813]
[150.04881287 -155.19595337]
[155.26420593 -141.24429321]
[145.07806396 -129.13838196]
[142.26733398 -114.40407562]
[139.45661926 -99.66976929]
[136.87768555 -84.89312744]
[134.53117371 -70.07780457]
[132.18464661 -55.26247787]
[129.83813477 -40.44715500]
[127.49161530 -25.63183022]
[125.14509583 -10.81650448]
[122.79858398 3.99882078]
[128.44964600 17.77977943]
[118.64877319 30.19966888]
[116.30226135 45.01499176]
[113.95574188 59.83031845]
[111.60922241 74.64564514]
[121.36218262 82.07586670]
[126.98542023 92.97116852]
[127.39186096 105.22527313]
[122.50292206 116.46923828]
[113.26374054 124.52938080]
[101.46041870 127.84752655]
[98.18827057 142.48628235]
[94.91612244 157.12503052]
[101.93385315 175.89314270]
[88.63360596 189.77967834]
[86.28709412 204.59500122]
[91.77030945 219.43563843]
[82.13728333 230.79583740]
[79.79077148 245.61117554]
[77.44425201 260.42648315]
[75.09773254 275.24182129]
[72.75122070 290.05712891]
[70.40470123 304.87246704]
[68.75868988 319.78189087]
[67.81682587 334.75228882]
[66.87496948 349.72268677]
[65.93311310 364.69308472]
[79.04512024 372.58825684]
[86.97624207 385.67855835]
[87.90396118 400.95593262]
[81.61508942 414.90972900]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 95]
[8 94]
[9 93]
[10 92]
[14 91]
[15 90]
[16 89]
[17 88]
[18 87]
[19 86]
[21 84]
[22 83]
[26 81]
[27 80]
[28 79]
[32 73]
[33 72]
[34 71]
[35 70]
[37 68]
[38 67]
[39 66]
[40 65]
[41 64]
[42 63]
[43 62]
[45 61]
[46 60]
[47 59]
[49 57]
] def

init

% Start Annotations
7 95 0.0 1 colorpair
8 94 0.0 1 colorpair
9 93 0.0 1 colorpair
10 92 0.0 1 colorpair
14 91 0.0 1 colorpair
15 90 0.0 1 colorpair
16 89 0.0 1 colorpair
17 88 0.0 1 colorpair
18 87 0.0 1 colorpair
19 86 0.0 1 colorpair
21 84 0.0 0.6 colorpair
22 83 0.0 1 colorpair
26 81 0.0 1 colorpair
27 80 0.0 1 colorpair
28 79 0.0 1 colorpair
32 73 0.0 1 colorpair
33 72 0.0 1 colorpair
34 71 0.0 1 colorpair
35 70 0.0 1 colorpair
37 68 0.0 1 colorpair
38 67 0.0 1 colorpair
39 66 0.0 1 colorpair
40 65 0.0 1 colorpair
41 64 0.0 1 colorpair
42 63 0.16 1 colorpair
43 62 0.0 1 colorpair
45 61 0.0 0.6 colorpair
46 60 0.0 1 colorpair
47 59 0.0 1 colorpair
49 57 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
21 84 1 gmark
42 cmark
63 cmark
45 61 1 gmark

% End Annotations
showpage
end
%%EOF
