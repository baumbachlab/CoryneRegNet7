%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu May 14 18:35:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUAAAAGACGAGGUAAGCCCUGCCGAAUCCAUAGGAAAAUUACCUGCAUAUGAAAUUCCGGACCGCGCCCGAUUCGAUACAGUUU\
) } def
/len { sequence length } bind def

/coor [
[122.10680389 331.41799927]
[119.94770813 316.57418823]
[117.78862000 301.73040771]
[115.62953186 286.88659668]
[104.22325897 280.60980225]
[98.49496460 268.70053101]
[100.77790833 255.48498535]
[110.44808197 245.91177368]
[108.82630157 230.99969482]
[106.66721344 216.15589905]
[103.97363281 201.39973450]
[99.57353210 195.24377441]
[101.45927429 186.06283569]
[99.30018616 171.21903992]
[97.14109802 156.37524414]
[93.72721100 152.73608398]
[92.71948242 146.84249878]
[95.40221405 140.38645935]
[94.31984711 125.42555237]
[82.46156311 119.26463318]
[75.21774292 108.03507996]
[74.49427032 94.69145203]
[80.48149872 82.74453735]
[91.60415649 75.33762360]
[91.06262207 60.34740448]
[90.52108002 45.35718155]
[89.70899963 30.37918091]
[88.62663269 15.41828156]
[87.54426575 0.45738330]
[76.84232330 -14.39419174]
[84.82865906 -29.90830231]
[83.20687866 -44.82036972]
[81.58509064 -59.73244095]
[79.96330261 -74.64450836]
[78.07255554 -89.52487183]
[68.42944336 -102.06763458]
[74.25421906 -115.77606964]
[60.45640564 -122.87536621]
[53.49668121 -136.74411011]
[56.05119705 -152.04946899]
[67.13768768 -162.90623474]
[82.49317932 -165.13973999]
[96.21316528 -157.89118958]
[103.02202606 -143.94776917]
[100.30162811 -128.67102051]
[89.09801483 -117.93515778]
[98.58670044 -106.45412445]
[92.91635895 -91.68395996]
[97.09133911 -85.37316132]
[94.87537384 -76.26629639]
[96.49716187 -61.35422516]
[98.11894226 -46.44215775]
[99.74073029 -31.53008652]
[109.05307007 -23.58458138]
[110.40448761 -11.01170540]
[102.50516510 -0.62498301]
[103.58753204 14.33591557]
[104.66989899 29.29681396]
[108.37862396 35.89241791]
[105.51130676 44.81564713]
[106.05284119 59.80586624]
[106.59437561 74.79608917]
[120.18317413 83.52691650]
[126.01410675 98.58955383]
[121.84591675 114.19432831]
[109.28073883 124.34318542]
[110.36310577 139.30409241]
[111.98489380 154.21615601]
[114.14398193 169.05995178]
[116.30307007 183.90374756]
[118.72980499 198.70614624]
[121.42338562 213.46232605]
[125.63544464 219.04229736]
[126.13365936 225.00062561]
[123.73837280 229.37791443]
[125.36015320 244.28997803]
[139.14410400 254.87867737]
[141.08297729 271.81494141]
[130.47332764 284.72750854]
[132.63241577 299.57131958]
[134.79150391 314.41510010]
[136.95059204 329.25891113]
[148.89794922 339.96594238]
[147.83209229 355.97354126]
[134.57066345 365.00207520]
[119.28669739 360.12557983]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 82]
[2 81]
[3 80]
[4 79]
[8 76]
[9 75]
[10 72]
[11 71]
[13 70]
[14 69]
[15 68]
[18 67]
[19 66]
[24 62]
[25 61]
[26 60]
[27 58]
[28 57]
[29 56]
[31 53]
[32 52]
[33 51]
[34 50]
[35 48]
[37 46]
] def

init

% Start Annotations
1 82 0.0 1 colorpair
2 81 0.0 1 colorpair
3 80 0.0 1 colorpair
4 79 0.0 1 colorpair
8 76 0.0 1 colorpair
9 75 0.0 1 colorpair
10 72 0.0 1 colorpair
11 71 0.0 1 colorpair
13 70 0.0 1 colorpair
14 69 0.0 1 colorpair
15 68 0.0 1 colorpair
18 67 0.0 1 colorpair
19 66 0.0 1 colorpair
24 62 0.0 1 colorpair
25 61 0.0 1 colorpair
26 60 0.0 1 colorpair
27 58 0.0 1 colorpair
28 57 0.0 1 colorpair
29 56 0.0 1 colorpair
31 53 0.0 1 colorpair
32 52 0.0 1 colorpair
33 51 0.0 1 colorpair
34 50 0.0 1 colorpair
35 48 0.0 1 colorpair
37 46 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
