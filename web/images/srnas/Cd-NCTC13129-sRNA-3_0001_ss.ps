%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu May 14 16:15:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
___GCCACCCCCCCCGGAUCAUUUUUUAACAGGGACAGGAAUAAGCCAUACCGAAGCCAGCGACUAGUUCCACUGUCCUUUCGGACGGCGGGAAC\
) } def
/len { sequence length } bind def

/coor [
[152.45880127 190.59246826]
[134.15037537 198.95794678]
[114.57933044 203.66467285]
[94.46924591 204.53866577]
[74.56365204 201.54759216]
[55.59849930 194.80204773]
[38.27498627 184.55143738]
[23.23360252 171.17472839]
[11.03046799 155.16651917]
[2.11676526 137.11866760]
[-3.17794442 117.69843292]
[-18.10571480 119.16868591]
[-33.03348541 120.63894653]
[-48.64869308 133.17922974]
[-66.00542450 124.92479706]
[-80.80507660 127.36822510]
[-95.60472870 129.81166077]
[-110.40438080 132.25509644]
[-119.40513611 145.24592590]
[-134.97024536 147.98509216]
[-147.86518860 138.84748840]
[-150.43963623 123.25428772]
[-141.16621399 110.45666504]
[-125.54666901 108.04722595]
[-112.84780884 117.45543671]
[-98.04815674 115.01200867]
[-83.24851227 112.56857300]
[-68.44886017 110.12514496]
[-63.11849213 101.12993622]
[-53.47041321 96.55461884]
[-42.69313049 98.18563080]
[-34.50374222 105.71117401]
[-19.57597160 104.24091339]
[-4.64820147 102.77066040]
[-4.30506468 91.09067535]
[-2.66236687 79.52169037]
[0.25942564 68.20785522]
[4.42390919 57.29012299]
[9.77919769 46.90452576]
[16.25856972 37.18045425]
[23.78129387 28.23906708]
[32.25364685 20.19176674]
[41.57006454 13.13881588]
[51.61447525 7.16808844]
[62.26173401 2.35397577]
[73.37918091 -1.24354196]
[84.82830811 -3.57964277]
[96.46646118 -4.62522030]
[108.14863586 -4.36724758]
[119.72928619 -2.80893922]
[131.06411743 0.03029004]
[142.01193237 4.11506557]
[152.43629456 9.39449406]
[162.20735168 15.80279732]
[171.20333862 23.26013374]
[179.31219482 31.67358971]
[186.43287659 40.93833923]
[192.47668457 50.93895340]
[197.36828613 61.55083084]
[201.04676819 72.64175415]
[203.46627808 84.07354736]
[204.59667969 95.70376587]
[204.42388916 107.38751221]
[202.95004272 118.97920990]
[200.19352722 130.33445740]
[196.18867493 141.31173706]
[190.98539734 151.77432251]
[203.45744324 160.10787964]
[215.92948914 168.44143677]
[228.40151978 176.77497864]
[240.87356567 185.10853577]
[259.18377686 185.79939270]
[266.49200439 201.66201782]
[279.23004150 209.58303833]
[291.96807861 217.50404358]
[304.70611572 225.42506409]
[317.44412231 233.34608459]
[330.18215942 241.26710510]
[346.58132935 241.26257324]
[354.54940796 255.59582520]
[345.88952637 269.52200317]
[329.51025391 268.71508789]
[322.26113892 254.00514221]
[309.52310181 246.08412170]
[296.78509521 238.16310120]
[284.04705811 230.24208069]
[271.30902100 222.32106018]
[258.57098389 214.40003967]
[246.59698486 216.83125305]
[235.87515259 210.17158508]
[232.54002380 197.58058167]
[220.06797791 189.24702454]
[207.59593201 180.91346741]
[195.12388611 172.57992554]
[182.65184021 164.24636841]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 34]
[12 33]
[13 32]
[15 28]
[16 27]
[17 26]
[18 25]
[67 95]
[68 94]
[69 93]
[70 92]
[71 91]
[73 88]
[74 87]
[75 86]
[76 85]
[77 84]
[78 83]
] def

init

% Start Annotations
11 34 0.0 1 colorpair
12 33 0.0 1 colorpair
13 32 0.0 1 colorpair
15 28 0.16 0.6 colorpair
16 27 0.0 0.6 colorpair
17 26 0.32 1 colorpair
18 25 0.16 0.6 colorpair
67 95 0.0 1 colorpair
68 94 0.0 1 colorpair
69 93 0.0 1 colorpair
70 92 0.0 1 colorpair
71 91 0.16 1 colorpair
73 88 0.0 1 colorpair
74 87 0.0 1 colorpair
75 86 0.0 1 colorpair
76 85 0.0 1 colorpair
77 84 0.0 1 colorpair
78 83 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
15 28 1 gmark
15 cmark
28 cmark
16 27 1 gmark
17 cmark
26 cmark
18 25 1 gmark
18 cmark
71 cmark

% End Annotations
showpage
end
%%EOF
