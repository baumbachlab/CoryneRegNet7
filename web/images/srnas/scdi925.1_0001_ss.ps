%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu May 14 18:19:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGAGAUGCCCGGGUGCCAUGUGCUUGCUGUACGUGGCUGAGACGGCUGUUUGGCCGAACCGUAGAACCUGAUCUGGGUAAUACCAGCGAUAGGAAGACUUCAUACUGUGACU\
) } def
/len { sequence length } bind def

/coor [
[209.95161438 262.61614990]
[197.22630310 259.10437012]
[186.45045471 251.42338562]
[178.94349670 240.48654175]
[175.63385010 227.60748291]
[176.94419861 214.34237671]
[182.73760986 202.30180359]
[172.57838440 191.26594543]
[162.41915894 180.23008728]
[152.25993347 169.19422913]
[142.10072327 158.15837097]
[131.94149780 147.12251282]
[121.78227234 136.08665466]
[111.62304688 125.05079651]
[101.46382141 114.01493835]
[87.48995972 108.56231689]
[72.54119110 109.80100250]
[57.59242249 111.03969574]
[42.64365387 112.27838898]
[27.69488716 113.51707458]
[12.74611950 114.75576782]
[-2.20264769 115.99445343]
[-17.15141487 117.23314667]
[-32.10018158 118.47183990]
[-43.52428436 129.73547363]
[-59.43556976 127.68352509]
[-67.62826538 113.89007568]
[-61.81763458 98.93627167]
[-46.46109772 94.29340363]
[-33.33887100 103.52307129]
[-18.39010620 102.28437805]
[-3.44133806 101.04569244]
[11.50742912 99.80699921]
[26.45619774 98.56830597]
[41.40496445 97.32962036]
[56.35373306 96.09092712]
[71.30249786 94.85224152]
[86.25126648 93.61354828]
[90.26647949 87.27887726]
[75.73572540 83.55635071]
[74.78598785 68.58644867]
[88.72979736 63.05741882]
[98.29689789 74.60952759]
[102.31211090 68.27485657]
[97.05254364 54.22718430]
[91.79298401 40.17951584]
[86.53341675 26.13184929]
[81.27385712 12.08417988]
[68.27799225 2.08220172]
[70.70994568 -14.13561630]
[86.06793213 -19.88577271]
[98.55297089 -9.25300026]
[95.32152557 6.82461691]
[100.58108521 20.87228584]
[105.84065247 34.91995239]
[111.10021210 48.96762466]
[116.35977936 63.01529312]
[118.47888947 48.16573334]
[129.80680847 38.33323669]
[143.86401367 33.09918213]
[158.86398315 33.12875366]
[172.90042114 38.41818619]
[184.18949890 48.29526901]
[191.29650879 61.50474930]
[193.31825256 76.36788177]
[189.99777222 90.99574280]
[181.75708008 103.52933502]
[169.64344788 112.37580109]
[155.19636536 116.41086578]
[140.25186157 115.12172699]
[126.70610809 108.66999817]
[112.49967957 103.85571289]
[122.65890503 114.89157104]
[132.81813049 125.92742920]
[142.97735596 136.96328735]
[153.13658142 147.99914551]
[163.29580688 159.03500366]
[173.45501709 170.07086182]
[183.61424255 181.10671997]
[193.77346802 192.14257812]
[209.97857666 186.83691406]
[226.82775879 189.07205200]
[240.99748230 198.35922241]
[249.71347046 212.82334900]
[251.29393005 229.58149719]
[245.47373962 245.31739807]
[256.22549438 255.77684021]
[271.80224609 255.73091125]
[282.55703735 266.49145508]
[282.50482178 281.34179688]
[293.25656128 291.80123901]
[304.00830078 302.26071167]
[314.76004028 312.72015381]
[329.07806396 307.43267822]
[344.27148438 308.88973999]
[357.32360840 316.80200195]
[365.64300537 329.59854126]
[367.57778931 344.73852539]
[362.74380493 359.21594238]
[352.10089111 370.15628052]
[337.76217651 375.38732910]
[322.57461548 373.87045288]
[309.55371094 365.90682983]
[301.28479004 353.07763672]
[299.40966797 337.93014526]
[304.30059814 323.47189331]
[293.54885864 313.01245117]
[282.79711914 302.55297852]
[272.04537964 292.09353638]
[257.20211792 292.55490112]
[246.14932251 282.10070801]
[245.76603699 266.52859497]
[235.01429749 256.06912231]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 80]
[8 79]
[9 78]
[10 77]
[11 76]
[12 75]
[13 74]
[14 73]
[15 72]
[16 38]
[17 37]
[18 36]
[19 35]
[20 34]
[21 33]
[22 32]
[23 31]
[24 30]
[44 57]
[45 56]
[46 55]
[47 54]
[48 53]
[86 113]
[87 112]
[90 109]
[91 108]
[92 107]
[93 106]
] def

init

% Start Annotations
7 80 0.0 1 colorpair
8 79 0.0 1 colorpair
9 78 0.0 1 colorpair
10 77 0.0 1 colorpair
11 76 0.0 1 colorpair
12 75 0.0 1 colorpair
13 74 0.0 1 colorpair
14 73 0.0 1 colorpair
15 72 0.0 1 colorpair
16 38 0.0 1 colorpair
17 37 0.0 1 colorpair
18 36 0.0 1 colorpair
19 35 0.0 1 colorpair
20 34 0.0 1 colorpair
21 33 0.0 1 colorpair
22 32 0.0 1 colorpair
23 31 0.0 1 colorpair
24 30 0.0 1 colorpair
44 57 0.0 1 colorpair
45 56 0.0 1 colorpair
46 55 0.0 1 colorpair
47 54 0.0 1 colorpair
48 53 0.0 1 colorpair
86 113 0.0 1 colorpair
87 112 0.0 1 colorpair
90 109 0.0 1 colorpair
91 108 0.0 1 colorpair
92 107 0.0 1 colorpair
93 106 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
