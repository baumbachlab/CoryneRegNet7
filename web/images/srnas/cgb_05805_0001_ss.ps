%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu May 14 18:35:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCCCACUCUUGUAGUUGGGAAUUGACGGCACCUCGCACUCAAGCGCGGUAUCGCCCCUGGUUUUCCGGGACGCGGUGGCGCAUGUUUGCAUUUGAUGAGGUUGUCCGUGACAUGUUUGGUCGGGCCCCAAAAAGAGCCCCCUUUUUUGCG\
) } def
/len { sequence length } bind def

/coor [
[83.36435699 153.16589355]
[83.56433105 138.16723633]
[76.16529083 139.39369202]
[68.79904938 152.46038818]
[61.43281174 165.52708435]
[54.06657410 178.59378052]
[46.70033264 191.66047668]
[39.46863174 204.80210876]
[32.37222672 218.01728821]
[35.60433960 233.73139954]
[25.22346878 245.96319580]
[9.19293594 245.32951355]
[-0.19000892 232.31645203]
[4.27242708 216.90650940]
[19.15704536 210.92088318]
[26.25344849 197.70570374]
[26.64952087 190.27903748]
[33.63364029 184.29423523]
[40.99987793 171.22753906]
[48.36611938 158.16084290]
[55.73235703 145.09414673]
[63.09859848 132.02746582]
[60.87674332 112.71378326]
[66.71199799 97.11669922]
[77.29844666 87.97846985]
[88.66018677 86.06813812]
[97.14498138 90.16713715]
[92.30516052 75.96938324]
[87.46534729 61.77162933]
[82.62552643 47.57387543]
[77.64020538 33.42655945]
[72.50990295 19.33117104]
[67.23516083 5.28919506]
[61.81653976 -8.69788837]
[56.39791489 -22.68497276]
[50.97929001 -36.67205429]
[45.56066513 -50.65913773]
[39.99872589 -64.58985138]
[34.29406357 -78.46273804]
[16.57536125 -85.03049469]
[9.34780693 -102.14609528]
[16.73922729 -118.84471893]
[10.46982193 -132.47169495]
[4.20041704 -146.09867859]
[-2.06898808 -159.72564697]
[-8.33839321 -173.35263062]
[-14.88626385 -186.84802246]
[-21.70983887 -200.20611572]
[-28.53341484 -213.56420898]
[-41.70155716 -222.33407593]
[-40.60088348 -237.18795776]
[-47.42445755 -250.54606628]
[-54.24803162 -263.90417480]
[-61.07160950 -277.26226807]
[-67.89518738 -290.62036133]
[-74.71875763 -303.97845459]
[-90.39017487 -313.59289551]
[-88.87865448 -331.05026245]
[-95.97505951 -344.26547241]
[-103.07146454 -357.48065186]
[-110.16786194 -370.69583130]
[-117.26426697 -383.91101074]
[-131.48435974 -392.07931519]
[-131.24986267 -408.47677612]
[-116.80201721 -416.23510742]
[-103.00351715 -407.37319946]
[-104.04908752 -391.00741577]
[-96.95268250 -377.79223633]
[-89.85627747 -364.57705688]
[-82.75987244 -351.36184692]
[-75.66347504 -338.14666748]
[-64.14212799 -334.33605957]
[-58.13525391 -323.33203125]
[-61.36066055 -310.80203247]
[-54.53708267 -297.44393921]
[-47.71350861 -284.08584595]
[-40.88993454 -270.72775269]
[-34.06635666 -257.36962891]
[-27.24278259 -244.01153564]
[-14.56270790 -236.19712830]
[-15.17531490 -220.38778687]
[-8.35173988 -207.02969360]
[-1.52816451 -193.67158508]
[2.71568847 -191.36097717]
[5.52120304 -186.32937622]
[5.28858566 -179.62203979]
[11.55799103 -165.99505615]
[17.82739639 -152.36807251]
[24.09680176 -138.74110413]
[30.36620712 -125.11412048]
[41.74019241 -123.55094147]
[51.02617264 -116.59698486]
[55.82527161 -105.90303802]
[54.82750320 -94.10346222]
[48.16694260 -84.16739655]
[53.87160873 -70.29451752]
[59.35800934 -65.27340698]
[59.54774857 -56.07776260]
[64.96636963 -42.09067917]
[70.38499451 -28.10359764]
[75.80361938 -14.11651325]
[81.22224426 -0.12943009]
[86.60440063 5.00327206]
[86.60529327 14.20086956]
[91.73559570 28.29625893]
[97.01123047 33.53838348]
[96.82328033 42.73406219]
[101.66310120 56.93181229]
[106.50291443 71.12956238]
[111.34273529 85.32731628]
[123.12487030 94.61070251]
[138.06088257 95.99472809]
[152.99688721 97.37875366]
[163.98292542 86.25036621]
[179.55665588 84.83868408]
[192.36465454 93.81027222]
[196.35935974 108.92900848]
[189.65461731 123.05629730]
[175.41616821 129.52166748]
[160.36700439 125.27235413]
[151.61286926 112.31476593]
[136.67684937 110.93074036]
[121.74084473 109.54671478]
[115.75254822 123.29954529]
[126.94084167 133.29064941]
[138.12913513 143.28173828]
[149.31744385 153.27284241]
[164.76440430 156.69361877]
[169.10389709 170.94204712]
[184.86686707 169.79998779]
[196.76571655 180.20158386]
[197.74105835 195.97575378]
[187.21423340 207.76396179]
[171.43064880 208.57246399]
[159.75439453 197.92161560]
[159.11279297 182.13035583]
[144.46609497 179.42420959]
[139.32633972 164.46113586]
[128.13804626 154.47003174]
[116.94974518 144.47894287]
[105.76145172 134.48783875]
[98.36241150 135.71430969]
[103.39107513 149.84626770]
[108.41974640 163.97824097]
[113.44841003 178.11021423]
[122.35958099 190.17631531]
[121.68840790 205.16130066]
[111.73420715 216.38243103]
[96.93615723 218.83554077]
[83.89360809 211.42662048]
[78.42302704 197.45977783]
[82.96440125 183.16323853]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 22]
[4 21]
[5 20]
[6 19]
[7 18]
[8 16]
[9 15]
[27 110]
[28 109]
[29 108]
[30 107]
[31 105]
[32 104]
[33 102]
[34 101]
[35 100]
[36 99]
[37 98]
[38 96]
[39 95]
[42 90]
[43 89]
[44 88]
[45 87]
[46 86]
[47 83]
[48 82]
[49 81]
[51 79]
[52 78]
[53 77]
[54 76]
[55 75]
[56 74]
[58 71]
[59 70]
[60 69]
[61 68]
[62 67]
[111 123]
[112 122]
[113 121]
[124 141]
[125 140]
[126 139]
[127 138]
[129 136]
] def

init

% Start Annotations
3 22 0.0 1 colorpair
4 21 0.0 1 colorpair
5 20 0.0 1 colorpair
6 19 0.0 1 colorpair
7 18 0.0 1 colorpair
8 16 0.0 1 colorpair
9 15 0.0 1 colorpair
27 110 0.0 1 colorpair
28 109 0.0 1 colorpair
29 108 0.0 1 colorpair
30 107 0.0 1 colorpair
31 105 0.0 1 colorpair
32 104 0.0 1 colorpair
33 102 0.0 1 colorpair
34 101 0.0 1 colorpair
35 100 0.0 1 colorpair
36 99 0.0 1 colorpair
37 98 0.0 1 colorpair
38 96 0.0 1 colorpair
39 95 0.0 1 colorpair
42 90 0.0 1 colorpair
43 89 0.0 1 colorpair
44 88 0.0 1 colorpair
45 87 0.0 1 colorpair
46 86 0.0 1 colorpair
47 83 0.0 1 colorpair
48 82 0.0 1 colorpair
49 81 0.0 1 colorpair
51 79 0.0 1 colorpair
52 78 0.0 1 colorpair
53 77 0.0 1 colorpair
54 76 0.0 1 colorpair
55 75 0.0 1 colorpair
56 74 0.0 1 colorpair
58 71 0.0 1 colorpair
59 70 0.0 1 colorpair
60 69 0.0 1 colorpair
61 68 0.0 1 colorpair
62 67 0.0 1 colorpair
111 123 0.0 1 colorpair
112 122 0.0 1 colorpair
113 121 0.0 1 colorpair
124 141 0.0 1 colorpair
125 140 0.0 1 colorpair
126 139 0.0 1 colorpair
127 138 0.0 1 colorpair
129 136 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
