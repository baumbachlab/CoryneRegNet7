%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu May 14 18:36:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAUGGUUCAGCCCGACGACGACAUUUGGUUCUACCGCAUGCCCGCCGCCGAACGGCCGAUCCCUUACAAAAUUCAUGUCAUUCACGAAGACGAUGACAUCCUCGUCAUU\
) } def
/len { sequence length } bind def

/coor [
[78.51668549 226.12812805]
[75.03809357 231.27468872]
[70.33567047 235.28321838]
[64.76282501 237.87551880]
[58.73228836 238.87892151]
[52.68556213 238.23774719]
[44.70507812 250.93861389]
[36.72459793 263.63946533]
[33.41725540 280.26770020]
[16.52330399 281.69274902]
[10.47722626 265.85351562]
[24.02373505 255.65899658]
[32.00421524 242.95812988]
[39.98469925 230.25727844]
[36.89591980 206.08462524]
[57.96438217 192.58985901]
[62.91856766 178.43161011]
[67.87274933 164.27336121]
[72.82693481 150.11511230]
[77.78112793 135.95686340]
[74.68156433 121.38832855]
[86.54258728 110.91804504]
[74.95504761 115.26138306]
[62.14635849 116.58536530]
[47.73260117 112.43283081]
[33.31884003 108.28030396]
[17.91605568 111.89482880]
[7.82815886 100.93656158]
[-6.58560085 96.78402710]
[-20.99936104 92.63150024]
[-35.41312027 88.47896576]
[-52.30706024 89.90415955]
[-58.35326767 74.06497955]
[-44.80684280 63.87033844]
[-31.26058769 74.06520081]
[-16.84682846 78.21773529]
[-2.43306828 82.37026978]
[11.98069191 86.52280426]
[26.35250664 82.61125946]
[37.47137070 93.86653900]
[51.88513184 98.01907349]
[66.29888916 102.17160797]
[71.74884796 97.01912689]
[68.27413940 82.42713165]
[82.64875031 86.71417236]
[88.09870148 81.56169891]
[84.76088715 66.93778229]
[81.42307281 52.31386185]
[78.08525848 37.68994141]
[65.32087708 27.97139359]
[65.10475159 11.92979717]
[77.60266876 1.87089109]
[93.22730255 5.51100826]
[99.99276733 20.05776215]
[92.70917511 34.35212708]
[96.04698944 48.97604752]
[99.38480377 63.59996414]
[102.72261810 78.22388458]
[106.80448914 63.78995514]
[104.09002686 49.03761292]
[106.16551971 34.18189621]
[112.81925201 20.73838615]
[123.37239075 10.07859135]
[136.74830627 3.29002094]
[151.58241272 1.06524599]
[166.36129761 3.63123727]
[179.57725525 10.72621250]
[189.88195801 21.62634277]
[196.22416687 35.21959686]
[197.95680237 50.11919403]
[194.90313721 64.80507660]
[187.37467957 77.77898407]
[176.13949585 87.71733093]
[162.34381104 93.60620117]
[147.39503479 94.84481812]
[132.82014465 91.30760956]
[118.18005371 94.57373810]
[132.59381104 98.72627258]
[147.00756836 102.87880707]
[161.42132568 107.03134155]
[175.83508301 111.18387604]
[190.24885559 115.33640289]
[204.66261292 119.48893738]
[219.07637024 123.64147186]
[230.61592102 113.40222168]
[245.86286926 111.04975891]
[259.95196533 117.33473206]
[268.38742065 130.25164795]
[268.47753906 145.67874146]
[260.19354248 158.69329834]
[246.17881775 165.14242554]
[230.90542603 162.96821594]
[219.24705505 152.86445618]
[214.92384338 138.05523682]
[200.51007080 133.90269470]
[186.09631348 129.75016785]
[171.68255615 125.59763336]
[157.26879883 121.44509888]
[142.85504150 117.29256439]
[128.44128418 113.14003754]
[114.02751923 108.98750305]
[100.70083618 115.87223053]
[103.44603729 131.45344543]
[91.93937683 140.91104126]
[86.98519135 155.06929016]
[82.03100586 169.22753906]
[77.07682037 183.38578796]
[72.12262726 197.54403687]
[76.50679016 202.17356873]
[79.47902679 207.77728271]
[80.83866119 213.93943787]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 14]
[7 13]
[8 12]
[16 108]
[17 107]
[18 106]
[19 105]
[20 104]
[22 102]
[24 42]
[25 41]
[26 40]
[28 38]
[29 37]
[30 36]
[31 35]
[46 58]
[47 57]
[48 56]
[49 55]
[77 101]
[78 100]
[79 99]
[80 98]
[81 97]
[82 96]
[83 95]
[84 94]
] def

init

% Start Annotations
6 14 0.0 1 colorpair
7 13 0.0 1 colorpair
8 12 0.0 1 colorpair
16 108 0.0 1 colorpair
17 107 0.0 1 colorpair
18 106 0.0 1 colorpair
19 105 0.0 1 colorpair
20 104 0.0 1 colorpair
22 102 0.0 1 colorpair
24 42 0.0 1 colorpair
25 41 0.0 1 colorpair
26 40 0.0 1 colorpair
28 38 0.0 1 colorpair
29 37 0.0 1 colorpair
30 36 0.0 1 colorpair
31 35 0.0 1 colorpair
46 58 0.0 1 colorpair
47 57 0.0 1 colorpair
48 56 0.0 1 colorpair
49 55 0.0 1 colorpair
77 101 0.0 1 colorpair
78 100 0.0 1 colorpair
79 99 0.0 1 colorpair
80 98 0.0 1 colorpair
81 97 0.0 1 colorpair
82 96 0.0 1 colorpair
83 95 0.0 1 colorpair
84 94 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
