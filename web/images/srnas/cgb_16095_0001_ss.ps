%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu May 14 18:36:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGUGGUCGCGGAGACUAAUGACAGUGCGAUAAUUUCAGGACUGUUAGUCGAGAGCUGUAAAGUCAAGGCUAUAUACUUCUCAAGUCGCGC\
) } def
/len { sequence length } bind def

/coor [
[101.19734192 216.50564575]
[88.95455933 225.89276123]
[73.57834625 227.14797974]
[59.97518921 219.87077332]
[52.48580933 206.38327026]
[53.50004196 190.98928833]
[62.69424438 178.60098267]
[77.13458252 173.17141724]
[80.18642426 158.48515320]
[83.23826599 143.79888916]
[86.29010773 129.11262512]
[89.34194183 114.42636871]
[80.00903320 97.76824188]
[91.03311920 79.58888245]
[78.77857208 70.93868256]
[66.52402496 62.28847504]
[54.26947403 53.63827133]
[42.01492691 44.98806381]
[36.38543320 44.50045776]
[32.04421616 42.02973557]
[29.55354500 38.46097183]
[29.01148415 34.77293015]
[17.70578957 24.91487312]
[6.40009403 15.05681801]
[-4.90560150 5.19876289]
[-16.21129608 -4.65929222]
[-31.69764900 -7.89711189]
[-36.20537567 -22.09322548]
[-47.67773056 -31.75682259]
[-59.31340027 -41.22314072]
[-75.35516357 -41.01944733]
[-85.40437317 -53.52515793]
[-81.75215149 -69.14696503]
[-67.20015717 -75.90115356]
[-52.91144180 -68.60648346]
[-49.84708023 -52.85881042]
[-38.21141052 -43.39249039]
[-30.88283920 -41.57576752]
[-26.34732246 -33.39892197]
[-11.66962910 -30.86621475]
[-6.35324144 -15.96498775]
[4.95245409 -6.10693216]
[16.25815010 3.75112295]
[27.56384468 13.60917759]
[38.86954117 23.46723366]
[50.66513062 32.73351669]
[62.91968155 41.38372040]
[75.17423248 50.03392792]
[87.42877960 58.68413162]
[99.68332672 67.33433533]
[114.31534576 70.63646698]
[129.09722900 68.08781433]
[143.87913513 65.53916168]
[158.66102600 62.99050140]
[173.44291687 60.44184875]
[185.72778320 50.47225952]
[199.58464050 55.93455887]
[214.36653137 53.38590240]
[229.14842224 50.83724594]
[243.93031311 48.28859329]
[256.21517944 38.31900406]
[270.07202148 43.78130341]
[284.85394287 41.23264694]
[299.63583374 38.68399048]
[311.88510132 27.78046417]
[327.36529541 33.19305038]
[330.15167236 49.35374832]
[317.37786865 59.63781357]
[302.18447876 53.46588516]
[287.40258789 56.01454163]
[272.62069702 58.56319427]
[261.39312744 68.35048676]
[246.47897339 63.07048416]
[231.69708252 65.61914062]
[216.91519165 68.16779327]
[202.13328552 70.71645355]
[190.90573120 80.50374603]
[175.99156189 75.22373962]
[161.20967102 77.77239227]
[146.42778015 80.32105255]
[131.64588928 82.86970520]
[116.86399841 85.41836548]
[120.78757477 95.81562805]
[119.12124634 106.24479675]
[112.84038544 114.03939819]
[104.02820587 117.47821045]
[100.97636414 132.16447449]
[97.92452240 146.85073853]
[94.87268829 161.53700256]
[91.82084656 176.22325134]
[102.90254211 186.95635986]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 90]
[9 89]
[10 88]
[11 87]
[12 86]
[14 50]
[15 49]
[16 48]
[17 47]
[18 46]
[22 45]
[23 44]
[24 43]
[25 42]
[26 41]
[28 39]
[29 37]
[30 36]
[51 82]
[52 81]
[53 80]
[54 79]
[55 78]
[57 76]
[58 75]
[59 74]
[60 73]
[62 71]
[63 70]
[64 69]
] def

init

% Start Annotations
8 90 0.0 1 colorpair
9 89 0.0 1 colorpair
10 88 0.0 1 colorpair
11 87 0.0 1 colorpair
12 86 0.0 1 colorpair
14 50 0.0 1 colorpair
15 49 0.0 1 colorpair
16 48 0.0 1 colorpair
17 47 0.0 1 colorpair
18 46 0.0 1 colorpair
22 45 0.0 1 colorpair
23 44 0.0 1 colorpair
24 43 0.0 1 colorpair
25 42 0.0 1 colorpair
26 41 0.0 1 colorpair
28 39 0.0 1 colorpair
29 37 0.0 1 colorpair
30 36 0.0 1 colorpair
51 82 0.0 1 colorpair
52 81 0.0 1 colorpair
53 80 0.0 1 colorpair
54 79 0.0 1 colorpair
55 78 0.0 1 colorpair
57 76 0.0 1 colorpair
58 75 0.0 1 colorpair
59 74 0.0 1 colorpair
60 73 0.0 1 colorpair
62 71 0.0 1 colorpair
63 70 0.0 1 colorpair
64 69 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
