%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu May 14 18:36:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCAGUAGCUGCGCUCCGAUAGGAUUCUUAGUUUUCAGUUCAGUAUCUUUGAGCCACGGCUAGAAUGUGAAUCCUAUGUCUA\
) } def
/len { sequence length } bind def

/coor [
[139.82534790 153.66479492]
[125.02413940 156.09872437]
[110.70220947 151.63977051]
[99.89845276 141.23403931]
[94.90528107 127.08950043]
[96.78208923 112.20756531]
[90.81680298 126.86109924]
[76.04209900 128.74716187]
[64.31462097 138.09950256]
[52.58715057 147.45185852]
[43.97344971 162.05461121]
[27.55686569 157.81997681]
[27.08143997 140.87269592]
[43.23480225 135.72438049]
[54.96227646 126.37203217]
[66.68975067 117.01968384]
[71.81620026 103.03509521]
[87.42974091 100.48009491]
[90.46860504 91.89669037]
[98.46817017 87.65320587]
[105.96817017 74.66282654]
[113.46817017 61.67244339]
[120.96817017 48.68206024]
[128.46817017 35.69168091]
[135.96817017 22.70129776]
[143.46817017 9.71091747]
[150.96817017 -3.27946353]
[158.46817017 -16.26984406]
[164.72257996 -29.90371132]
[169.67677307 -44.06196213]
[174.63095093 -58.22021103]
[179.58514404 -72.37846375]
[184.53932190 -86.53671265]
[189.49351501 -100.69496155]
[180.75495911 -111.53311920]
[178.59387207 -125.17617035]
[183.47740173 -137.98059082]
[194.00590515 -146.58148193]
[207.31202698 -148.77668762]
[212.79214478 -162.73979187]
[218.27224731 -176.70289612]
[223.75236511 -190.66600037]
[229.23248291 -204.62910461]
[234.71260071 -218.59220886]
[229.64082336 -233.81248474]
[238.49880981 -247.18843079]
[254.49145508 -248.45915222]
[265.35058594 -236.64988708]
[262.74600220 -220.81967163]
[248.67570496 -213.11210632]
[243.19558716 -199.14898682]
[237.71546936 -185.18588257]
[232.23536682 -171.22277832]
[226.75524902 -157.25967407]
[221.27513123 -143.29656982]
[230.53016663 -129.87634277]
[230.04614258 -113.41673279]
[219.81597900 -100.30393219]
[203.65176392 -95.74077606]
[198.69757080 -81.58252716]
[193.74339294 -67.42427826]
[188.78919983 -53.26602554]
[183.83502197 -39.10777664]
[178.88082886 -24.94952583]
[180.15789795 -22.71512413]
[180.63647461 -19.83890152]
[180.07398987 -16.61563492]
[178.33560181 -13.41972351]
[175.41769409 -10.66695404]
[171.45855713 -8.76984501]
[163.95855713 4.22053623]
[156.45855713 17.21091843]
[148.95855713 30.20129776]
[141.45855713 43.19168091]
[133.95855713 56.18206024]
[126.45854950 69.17243958]
[118.95854950 82.16282654]
[111.45854950 95.15320587]
[125.89473724 91.07931519]
[140.62547302 93.90867615]
[152.52513123 103.04093933]
[159.06878662 116.53836823]
[158.86795044 131.53701782]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 18]
[8 16]
[9 15]
[10 14]
[20 78]
[21 77]
[22 76]
[23 75]
[24 74]
[25 73]
[26 72]
[27 71]
[28 70]
[29 64]
[30 63]
[31 62]
[32 61]
[33 60]
[34 59]
[39 55]
[40 54]
[41 53]
[42 52]
[43 51]
[44 50]
] def

init

% Start Annotations
6 18 0.0 1 colorpair
8 16 0.0 1 colorpair
9 15 0.0 1 colorpair
10 14 0.0 1 colorpair
20 78 0.0 1 colorpair
21 77 0.0 1 colorpair
22 76 0.0 1 colorpair
23 75 0.0 1 colorpair
24 74 0.0 1 colorpair
25 73 0.0 1 colorpair
26 72 0.0 1 colorpair
27 71 0.0 1 colorpair
28 70 0.0 1 colorpair
29 64 0.0 1 colorpair
30 63 0.0 1 colorpair
31 62 0.0 1 colorpair
32 61 0.0 1 colorpair
33 60 0.0 1 colorpair
34 59 0.0 1 colorpair
39 55 0.0 1 colorpair
40 54 0.0 1 colorpair
41 53 0.0 1 colorpair
42 52 0.0 1 colorpair
43 51 0.0 1 colorpair
44 50 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
