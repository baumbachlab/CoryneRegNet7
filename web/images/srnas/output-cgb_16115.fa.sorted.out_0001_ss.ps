%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu May 14 18:36:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGGUUUGCUGAAAAAUGGAUGACCUCGCAGUUUAACUGCGUUGUGUCAUCUACGGCAUGGAAAGGCUCCCACAGCAUCUGUUUUGGAGAGGGCGGAUGGUGUGGGAGCUUUUUGUAGCAUCUCACCCCAUGAAGGGG\
) } def
/len { sequence length } bind def

/coor [
[94.15426636 148.96415710]
[80.40834045 154.96829224]
[65.86333466 151.30181885]
[56.60611343 139.49911499]
[56.51066208 124.49942017]
[65.61692810 112.57985687]
[80.11534882 108.72866058]
[65.19286346 110.25162506]
[50.27037811 111.77458954]
[35.34789276 113.29755402]
[20.42540550 114.82052612]
[29.85486794 126.48608398]
[26.83987617 141.17994690]
[13.57849693 148.18965149]
[-0.26113299 142.40478516]
[-4.58930254 128.04278564]
[3.74825597 115.57489014]
[-11.25078678 115.40538025]
[-26.24982834 115.23587799]
[-41.24887085 115.06636810]
[-56.24791336 114.89686584]
[-71.24695587 114.72735596]
[-86.24599457 114.55784607]
[-101.24504089 114.38834381]
[-116.24504089 114.38834381]
[-131.81275940 124.15000153]
[-146.78070068 115.05790710]
[-161.77207947 115.56633759]
[-176.76345825 116.07477570]
[-191.75483704 116.58320618]
[-206.74621582 117.09164429]
[-221.73759460 117.60007477]
[-237.36268616 124.17981720]
[-248.01074219 110.98681641]
[-238.28100586 97.10270691]
[-222.24603271 102.60869598]
[-207.25465393 102.10025787]
[-192.26327515 101.59182739]
[-177.27189636 101.08339691]
[-162.28050232 100.57495880]
[-147.28912354 100.06652832]
[-138.75650024 91.41785431]
[-126.21514893 90.91973114]
[-116.41454315 99.38929749]
[-109.70519257 96.14097595]
[-101.07553101 99.38929749]
[-86.07649231 99.55880737]
[-71.07744598 99.72831726]
[-56.07840729 99.89781952]
[-41.07936478 100.06732941]
[-26.08032227 100.23683167]
[-11.08127975 100.40634155]
[3.91776276 100.57584381]
[18.90244102 99.89803314]
[33.82492447 98.37506866]
[48.74741364 96.85210419]
[63.66989899 95.32913971]
[78.59238434 93.80617523]
[86.46063232 83.93948364]
[97.80115509 80.39643860]
[108.46979523 83.61246490]
[119.37178040 73.30970764]
[130.27375793 63.00695419]
[141.17575073 52.70420074]
[152.07772827 42.40144730]
[162.97972107 32.09869003]
[173.88169861 21.79593849]
[184.78367615 11.49318314]
[195.68566895 1.19042945]
[206.58764648 -9.11232471]
[217.48963928 -19.41507912]
[228.39161682 -29.71783257]
[239.29360962 -40.02058792]
[250.19558716 -50.32334137]
[254.91117859 -65.42545319]
[269.47570801 -68.54372406]
[280.37768555 -78.84647369]
[291.27966309 -89.14923096]
[302.18167114 -99.45198822]
[313.08364868 -109.75473785]
[323.98562622 -120.05749512]
[334.88760376 -130.36024475]
[345.78958130 -140.66300964]
[356.69158936 -150.96575928]
[367.59356689 -161.26850891]
[371.76269531 -177.12884521]
[387.65185547 -181.18682861]
[398.91561890 -169.26794434]
[393.96679688 -153.63333130]
[377.89633179 -150.36653137]
[366.99432373 -140.06376648]
[356.09234619 -129.76101685]
[345.19036865 -119.45826721]
[334.28839111 -109.15550995]
[323.38638306 -98.85275269]
[312.48440552 -88.55000305]
[301.58242798 -78.24724579]
[290.68045044 -67.94449615]
[279.77847290 -57.64173889]
[275.84265137 -43.27654648]
[260.49835205 -39.42135620]
[249.59635925 -29.11860275]
[238.69438171 -18.81584930]
[227.79238892 -8.51309490]
[216.89041138 1.78965950]
[205.98841858 12.09241390]
[195.08644104 22.39516830]
[184.18444824 32.69792175]
[173.28247070 43.00067520]
[162.38047791 53.30342865]
[151.47850037 63.60618591]
[140.57652283 73.90893555]
[129.67453003 84.21169281]
[118.77255249 94.51445007]
[129.87956238 84.43306732]
[144.32719421 80.39997864]
[159.04988098 83.27094269]
[170.92369080 92.43678284]
[177.42918396 105.95265198]
[177.18598938 120.95067596]
[170.24569702 134.24851990]
[158.08094788 143.02455139]
[143.27291870 145.41665649]
[128.96363831 140.91726685]
[118.18933105 130.48106384]
[113.23615265 116.32266235]
[117.90364075 130.57800293]
[122.57112122 144.83332825]
[127.23860931 159.08866882]
[140.84202576 167.59318542]
[142.53129578 183.54704285]
[131.01057434 194.71182251]
[115.11756134 192.52285767]
[107.04401398 178.65933228]
[112.98327637 163.75614929]
[108.31578827 149.50082397]
[103.64830780 135.24548340]
[98.98081970 120.99015045]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 58]
[8 57]
[9 56]
[10 55]
[11 54]
[17 53]
[18 52]
[19 51]
[20 50]
[21 49]
[22 48]
[23 47]
[24 46]
[25 44]
[27 41]
[28 40]
[29 39]
[30 38]
[31 37]
[32 36]
[61 114]
[62 113]
[63 112]
[64 111]
[65 110]
[66 109]
[67 108]
[68 107]
[69 106]
[70 105]
[71 104]
[72 103]
[73 102]
[74 101]
[76 99]
[77 98]
[78 97]
[79 96]
[80 95]
[81 94]
[82 93]
[83 92]
[84 91]
[85 90]
[126 138]
[127 137]
[128 136]
[129 135]
] def

init

% Start Annotations
7 58 0.0 1 colorpair
8 57 0.0 1 colorpair
9 56 0.0 1 colorpair
10 55 0.0 1 colorpair
11 54 0.0 1 colorpair
17 53 0.0 1 colorpair
18 52 0.0 1 colorpair
19 51 0.0 1 colorpair
20 50 0.0 1 colorpair
21 49 0.0 1 colorpair
22 48 0.0 1 colorpair
23 47 0.0 1 colorpair
24 46 0.0 1 colorpair
25 44 0.0 1 colorpair
27 41 0.0 1 colorpair
28 40 0.0 1 colorpair
29 39 0.0 1 colorpair
30 38 0.0 1 colorpair
31 37 0.0 1 colorpair
32 36 0.0 1 colorpair
61 114 0.0 1 colorpair
62 113 0.0 1 colorpair
63 112 0.0 1 colorpair
64 111 0.0 1 colorpair
65 110 0.0 1 colorpair
66 109 0.0 1 colorpair
67 108 0.0 1 colorpair
68 107 0.0 1 colorpair
69 106 0.0 1 colorpair
70 105 0.0 1 colorpair
71 104 0.0 1 colorpair
72 103 0.0 1 colorpair
73 102 0.0 1 colorpair
74 101 0.0 1 colorpair
76 99 0.0 1 colorpair
77 98 0.0 1 colorpair
78 97 0.0 1 colorpair
79 96 0.0 1 colorpair
80 95 0.0 1 colorpair
81 94 0.0 1 colorpair
82 93 0.0 1 colorpair
83 92 0.0 1 colorpair
84 91 0.0 1 colorpair
85 90 0.0 1 colorpair
126 138 0.0 1 colorpair
127 137 0.0 1 colorpair
128 136 0.0 1 colorpair
129 135 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
