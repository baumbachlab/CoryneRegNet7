%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu May 14 18:19:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCAGGACUUCGCAUGGCGUUUAUCCCGUGAACUCCCCCAGGGCAGGAAUGCAGCAAGGGUCAGCGGGCUCUGGCGGGUGUGCGGAGUCCCCUUUU_\
) } def
/len { sequence length } bind def

/coor [
[125.22911072 395.51257324]
[122.83510590 380.70486450]
[119.40126801 377.14181519]
[118.29353333 371.32449341]
[120.79399109 364.87435913]
[119.35364532 349.94366455]
[117.91329956 335.01296997]
[116.47295380 320.08227539]
[115.03260803 305.15161133]
[113.59226227 290.22091675]
[112.15191650 275.29022217]
[110.71157837 260.35955811]
[109.27123260 245.42886353]
[107.83088684 230.49816895]
[106.39054108 215.56748962]
[104.95019531 200.63679504]
[93.98366547 187.03977966]
[101.50569916 170.32791138]
[99.58753967 155.45106506]
[97.66938019 140.57421875]
[95.75122070 125.69736481]
[81.40292358 118.23610687]
[74.22429657 103.74433136]
[76.98290253 87.80901337]
[88.61522675 76.57365417]
[86.22122955 61.76592636]
[83.82722473 46.95819855]
[81.43322754 32.15047455]
[79.03923035 17.34274673]
[67.04310608 13.13099670]
[58.08169174 4.21525240]
[53.85770798 -7.62188339]
[55.13549042 -20.05168915]
[61.60350037 -30.65740776]
[71.94719696 -37.40414429]
[70.50685120 -52.33483124]
[69.06651306 -67.26551819]
[54.80791473 -72.59973907]
[44.32202530 -83.55113220]
[39.64996338 -97.91052246]
[41.66747665 -112.81322479]
[49.92131805 -125.31056976]
[62.72969055 -132.95327759]
[61.28934479 -147.88397217]
[59.84899902 -162.81465149]
[49.88832474 -175.84220886]
[56.43912125 -190.87612915]
[72.76248932 -192.45083618]
[82.06634521 -178.94638062]
[74.77968597 -164.25500488]
[76.22003174 -149.32431030]
[77.66037750 -134.39363098]
[91.69351959 -129.34028625]
[102.18412781 -118.65119934]
[107.01321411 -104.40897369]
[105.17223358 -89.42127991]
[96.97316742 -76.66736603]
[83.99719238 -68.70586395]
[85.43753815 -53.77517700]
[86.87788391 -38.84449005]
[102.40480042 -30.75168419]
[110.16087341 -14.88137341]
[106.95037079 2.64600372]
[93.84695435 14.94874763]
[96.24095917 29.75647545]
[98.63495636 44.56420135]
[101.02895355 59.37192917]
[103.42295074 74.17965698]
[115.75651550 79.26020813]
[123.95755005 89.78028107]
[125.87512207 102.98072815]
[121.00630951 115.39940643]
[110.62807465 123.77921295]
[112.54623413 138.65606689]
[114.46438599 153.53291321]
[116.38254547 168.40975952]
[126.17417908 176.99212646]
[127.37491608 189.55198669]
[119.88088226 199.19645691]
[121.32122803 214.12713623]
[122.76157379 229.05783081]
[124.20191956 243.98851013]
[125.64225769 258.91918945]
[127.08260345 273.84988403]
[128.52294922 288.78057861]
[129.96330261 303.71124268]
[131.40364075 318.64193726]
[132.84399414 333.57263184]
[134.28433228 348.50332642]
[135.72468567 363.43399048]
[137.64283752 378.31085205]
[140.03683472 393.11859131]
[152.99754333 402.16265869]
[155.68472290 417.73684692]
[146.50410461 430.60119629]
[130.90238953 433.12356567]
[118.13581085 423.80746460]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 92]
[2 91]
[5 90]
[6 89]
[7 88]
[8 87]
[9 86]
[10 85]
[11 84]
[12 83]
[13 82]
[14 81]
[15 80]
[16 79]
[18 76]
[19 75]
[20 74]
[21 73]
[25 68]
[26 67]
[27 66]
[28 65]
[29 64]
[35 60]
[36 59]
[37 58]
[43 52]
[44 51]
[45 50]
] def

init

% Start Annotations
1 92 0.0 1 colorpair
2 91 0.0 1 colorpair
5 90 0.0 1 colorpair
6 89 0.0 1 colorpair
7 88 0.0 1 colorpair
8 87 0.0 1 colorpair
9 86 0.0 1 colorpair
10 85 0.0 1 colorpair
11 84 0.0 1 colorpair
12 83 0.0 1 colorpair
13 82 0.0 1 colorpair
14 81 0.0 1 colorpair
15 80 0.0 1 colorpair
16 79 0.0 1 colorpair
18 76 0.0 1 colorpair
19 75 0.0 1 colorpair
20 74 0.16 1 colorpair
21 73 0.0 0.6 colorpair
25 68 0.0 1 colorpair
26 67 0.0 1 colorpair
27 66 0.0 1 colorpair
28 65 0.16 1 colorpair
29 64 0.0 1 colorpair
35 60 0.0 1 colorpair
36 59 0.0 1 colorpair
37 58 0.0 1 colorpair
43 52 0.0 1 colorpair
44 51 0.0 1 colorpair
45 50 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
20 cmark
21 73 1 gmark
28 cmark
65 cmark

% End Annotations
showpage
end
%%EOF
