%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu May 14 18:36:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCUCACAGUUUGAAGGCGCGCUCAAUGACCUAACAUCCAUGCUGCAAUCACAGUCUUCCACCAUUGCUUCUGGUGUGUUCUCUGGACUGUCAACGGCAUCAUCCAUC\
) } def
/len { sequence length } bind def

/coor [
[106.65122223 289.77914429]
[106.17933655 274.70504761]
[109.47184753 259.98736572]
[116.32178497 246.55126953]
[126.29856873 235.24133301]
[138.77503967 226.76852417]
[133.68991089 212.65678406]
[128.60476685 198.54502869]
[123.51963043 184.43328857]
[118.43449402 170.32153320]
[113.34935760 156.20979309]
[108.26422119 142.09805298]
[102.97625732 128.06105042]
[97.48656464 114.10169983]
[86.66980743 105.24227142]
[88.55409241 91.38799286]
[83.06439972 77.42864990]
[77.57469940 63.46930695]
[72.08500671 49.50996780]
[66.59531403 35.55062485]
[61.10561371 21.59128189]
[55.61591721 7.63193941]
[50.12622452 -6.32740307]
[43.64580154 -19.85530663]
[36.20829010 -32.88156509]
[28.77077866 -45.90782166]
[21.33326530 -58.93408203]
[13.89575386 -71.96034241]
[2.34674954 -68.75000000]
[-9.61484337 -68.10464478]
[-21.42659950 -70.05120850]
[-32.53387833 -74.49482727]
[-42.41585541 -81.22347260]
[-50.60996628 -89.91804504]
[-56.73353195 -100.16752625]
[-60.50165558 -111.48841095]
[-61.74044800 -123.34749603]
[-60.39508057 -135.18699646]
[-56.53217697 -146.45080566]
[-50.33652878 -156.61058044]
[-42.10227585 -165.19055176]
[-32.21891403 -171.78977966]
[-37.30405045 -185.90153503]
[-42.38918686 -200.01327515]
[-47.47432327 -214.12501526]
[-61.88125992 -220.62237549]
[-67.39595795 -235.43331909]
[-60.74663925 -249.77075195]
[-45.87823105 -255.12855530]
[-31.61189461 -248.32801819]
[-26.41159439 -233.40379333]
[-33.36257553 -219.21015930]
[-28.27743912 -205.09840393]
[-23.19230270 -190.98666382]
[-18.10716629 -176.87492371]
[0.26101702 -177.67497253]
[17.88146782 -172.35163879]
[32.76874161 -161.48995972]
[43.24047852 -146.29985046]
[48.10751724 -128.48135376]
[46.80891800 -110.03433990]
[39.47658920 -93.03409576]
[26.92201233 -79.39785004]
[34.35952377 -66.37159729]
[41.79703522 -53.34533691]
[49.23455048 -40.31907654]
[56.67206192 -27.29281807]
[63.86317062 -40.45670700]
[78.58505249 -43.33181000]
[90.20054626 -33.84074783]
[90.31699371 -18.84119987]
[78.85024261 -9.17094898]
[64.08556366 -11.81709862]
[69.57526398 2.14224339]
[75.06495667 16.10158539]
[80.55465698 30.06092834]
[86.04434967 44.02027130]
[91.53404236 57.97961426]
[97.02374268 71.93895721]
[102.51343536 85.89830017]
[113.33019257 94.75772858]
[111.44590759 108.61200714]
[116.93560028 122.57135010]
[123.07992554 129.54002380]
[122.37596893 137.01290894]
[127.46110535 151.12466431]
[132.54624939 165.23640442]
[137.63137817 179.34814453]
[142.71652222 193.45989990]
[147.80165100 207.57164001]
[152.88679504 221.68339539]
[167.90002441 220.25033569]
[182.79783630 222.59677124]
[196.64376831 228.57518005]
[208.56741333 237.80975342]
[217.81927490 249.72000122]
[223.81774902 263.55722046]
[226.18577576 278.45162964]
[224.77450562 293.46691895]
[219.67263794 307.65924072]
[211.20088196 320.13644409]
[199.89179993 330.11416626]
[186.45626831 336.96527100]
[171.73887634 340.25903320]
[156.66473389 339.78842163]
[142.18145752 335.58300781]
[129.19946289 327.90719604]
[118.53479004 317.24343872]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 91]
[7 90]
[8 89]
[9 88]
[10 87]
[11 86]
[12 85]
[13 83]
[14 82]
[16 80]
[17 79]
[18 78]
[19 77]
[20 76]
[21 75]
[22 74]
[23 73]
[24 67]
[25 66]
[26 65]
[27 64]
[28 63]
[42 55]
[43 54]
[44 53]
[45 52]
] def

init

% Start Annotations
6 91 0.0 1 colorpair
7 90 0.0 1 colorpair
8 89 0.0 1 colorpair
9 88 0.0 1 colorpair
10 87 0.0 1 colorpair
11 86 0.0 1 colorpair
12 85 0.0 1 colorpair
13 83 0.0 1 colorpair
14 82 0.0 1 colorpair
16 80 0.0 1 colorpair
17 79 0.0 1 colorpair
18 78 0.0 1 colorpair
19 77 0.0 1 colorpair
20 76 0.0 1 colorpair
21 75 0.0 1 colorpair
22 74 0.0 1 colorpair
23 73 0.0 1 colorpair
24 67 0.0 1 colorpair
25 66 0.0 1 colorpair
26 65 0.0 1 colorpair
27 64 0.0 1 colorpair
28 63 0.0 1 colorpair
42 55 0.0 1 colorpair
43 54 0.0 1 colorpair
44 53 0.0 1 colorpair
45 52 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
