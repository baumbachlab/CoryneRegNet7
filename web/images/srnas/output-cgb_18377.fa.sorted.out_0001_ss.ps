%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu May 14 18:36:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCCUGCGUUAACGAACAGCAGGUUAGGGUCGUCGAGAAUCAGUGACGCGCUAGGUACCGCCUGGUGACCGGCAUUGACGAAGUGAUUGGUAAAACGCUCCCUGAUCUCAUGGGUCUGCACAGCGGUAUCCUGCCUUAGAACUUCUCG\
) } def
/len { sequence length } bind def

/coor [
[70.09948730 234.66831970]
[68.96192169 219.71028137]
[61.14468002 232.51225281]
[53.32743454 245.31423950]
[45.51018906 258.11621094]
[37.69294739 270.91818237]
[29.87570190 283.72018433]
[22.19385147 296.60385132]
[14.64824963 309.56781006]
[7.10264635 322.53173828]
[7.58613157 338.92376709]
[-6.50827026 347.30706787]
[-20.68144798 339.05764771]
[-20.35324860 322.66177368]
[-5.86129904 314.98614502]
[1.68430400 302.02218628]
[9.22990704 289.05825806]
[9.88079929 281.64498901]
[17.07372284 275.90292358]
[24.89096642 263.10095215]
[32.70820999 250.29898071]
[40.52545547 237.49699402]
[48.34269714 224.69500732]
[56.15994263 211.89303589]
[62.29949188 198.20706177]
[66.66321564 183.85581970]
[71.02694702 169.50459290]
[75.39067078 155.15335083]
[79.75440216 140.80212402]
[84.11812592 126.45088959]
[74.19438171 116.91015625]
[69.40815735 104.00286102]
[70.71233368 90.29864502]
[77.84726715 78.52583313]
[89.39248657 71.02821350]
[87.81407166 56.11149597]
[86.23566437 41.19477081]
[84.65724945 26.27804947]
[80.61814880 18.00791740]
[83.20621490 11.03067589]
[81.94264984 -3.91600895]
[80.67907715 -18.86269379]
[79.41550446 -33.80937958]
[70.54320526 -46.90872574]
[77.18087769 -60.24253464]
[75.91731262 -75.18921661]
[74.49623871 -90.12174988]
[72.91783142 -105.03847504]
[67.06818390 -118.85085297]
[57.45331573 -130.36407471]
[47.83844757 -141.87730408]
[38.22357941 -153.39051819]
[28.60871124 -164.90374756]
[18.99384308 -176.41696167]
[9.37897491 -187.93019104]
[-0.23589315 -199.44340515]
[-15.02949524 -207.72506714]
[-11.16677475 -224.23310852]
[5.76544237 -225.09123230]
[11.27733040 -209.05827332]
[20.89219856 -197.54505920]
[30.50706673 -186.03182983]
[40.12193298 -174.51861572]
[49.73680496 -163.00538635]
[59.35167313 -151.49217224]
[68.96653748 -139.97894287]
[78.58140564 -128.46571350]
[93.14261627 -132.06726074]
[96.28191376 -146.73507690]
[99.42121124 -161.40289307]
[102.56050873 -176.07070923]
[105.69980621 -190.73852539]
[108.68429565 -205.43861389]
[111.51365662 -220.16935730]
[114.34300995 -234.90010071]
[117.17237091 -249.63084412]
[109.39810944 -263.66439819]
[115.65573120 -278.43670654]
[131.14492798 -282.61575317]
[143.98370361 -272.99572754]
[144.32325745 -256.95626831]
[131.90310669 -246.80148315]
[129.07374573 -232.07073975]
[126.24439240 -217.34001160]
[123.41503906 -202.60926819]
[125.25454712 -195.39842224]
[120.36762238 -187.59922791]
[117.22832489 -172.93141174]
[114.08902740 -158.26359558]
[110.94972992 -143.59577942]
[107.81043243 -128.92796326]
[106.16300964 -121.59282684]
[102.84272003 -115.43726349]
[98.32617188 -110.79867554]
[93.14450073 -107.85424042]
[87.83454895 -106.61688995]
[89.41296387 -91.70016479]
[93.27065277 -85.33634186]
[90.86399078 -76.45278931]
[92.12756348 -61.50610733]
[100.90948486 -49.47584915]
[94.36219025 -35.07294846]
[95.62576294 -20.12626457]
[96.88932800 -5.17958069]
[98.15290070 9.76710415]
[99.57397461 24.69963837]
[101.15238190 39.61635971]
[102.73079681 54.53308487]
[104.30920410 69.44980621]
[119.21260071 75.85958862]
[128.80369568 88.94421387]
[130.43055725 105.08576965]
[144.18049622 111.08069611]
[157.93043518 117.07563019]
[171.68037415 123.07055664]
[185.49273682 128.92019653]
[199.36601257 134.62390137]
[213.23928833 140.32762146]
[227.11256409 146.03132629]
[244.06105042 146.46194458]
[248.33906555 162.86726379]
[233.75912476 171.51954651]
[221.40885925 159.90460205]
[207.53558350 154.20088196]
[193.66230774 148.49717712]
[179.78903198 142.79347229]
[172.35636902 143.16148376]
[165.68544006 136.82049561]
[151.93550110 130.82556152]
[138.18556213 124.83063507]
[124.43562317 118.83570862]
[112.92413330 128.01518250]
[98.46936035 130.81462097]
[94.10562897 145.16584778]
[89.74190521 159.51708984]
[85.37818146 173.86831665]
[81.01445007 188.21954346]
[76.65072632 202.57078552]
[88.57807922 193.47473145]
[103.24583435 190.33515930]
[117.85150909 193.75193787]
[129.60446167 203.07225037]
[136.25912476 216.51528931]
[136.54402161 231.51258850]
[130.40472412 245.19866943]
[119.01423645 254.95863342]
[104.54887390 258.92767334]
[89.77246094 256.34744263]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 24]
[3 23]
[4 22]
[5 21]
[6 20]
[7 19]
[8 17]
[9 16]
[10 15]
[25 138]
[26 137]
[27 136]
[28 135]
[29 134]
[30 133]
[35 109]
[36 108]
[37 107]
[38 106]
[40 105]
[41 104]
[42 103]
[43 102]
[45 100]
[46 99]
[47 97]
[48 96]
[49 67]
[50 66]
[51 65]
[52 64]
[53 63]
[54 62]
[55 61]
[56 60]
[68 91]
[69 90]
[70 89]
[71 88]
[72 87]
[73 85]
[74 84]
[75 83]
[76 82]
[112 131]
[113 130]
[114 129]
[115 128]
[116 126]
[117 125]
[118 124]
[119 123]
] def

init

% Start Annotations
2 24 0.0 1 colorpair
3 23 0.0 1 colorpair
4 22 0.0 1 colorpair
5 21 0.0 1 colorpair
6 20 0.0 1 colorpair
7 19 0.0 1 colorpair
8 17 0.0 1 colorpair
9 16 0.0 1 colorpair
10 15 0.0 1 colorpair
25 138 0.0 1 colorpair
26 137 0.0 1 colorpair
27 136 0.0 1 colorpair
28 135 0.0 1 colorpair
29 134 0.0 1 colorpair
30 133 0.0 1 colorpair
35 109 0.0 1 colorpair
36 108 0.0 1 colorpair
37 107 0.0 1 colorpair
38 106 0.0 1 colorpair
40 105 0.0 1 colorpair
41 104 0.0 1 colorpair
42 103 0.0 1 colorpair
43 102 0.0 1 colorpair
45 100 0.0 1 colorpair
46 99 0.0 1 colorpair
47 97 0.0 1 colorpair
48 96 0.0 1 colorpair
49 67 0.0 1 colorpair
50 66 0.0 1 colorpair
51 65 0.0 1 colorpair
52 64 0.0 1 colorpair
53 63 0.0 1 colorpair
54 62 0.0 1 colorpair
55 61 0.0 1 colorpair
56 60 0.0 1 colorpair
68 91 0.0 1 colorpair
69 90 0.0 1 colorpair
70 89 0.0 1 colorpair
71 88 0.0 1 colorpair
72 87 0.0 1 colorpair
73 85 0.0 1 colorpair
74 84 0.0 1 colorpair
75 83 0.0 1 colorpair
76 82 0.0 1 colorpair
112 131 0.0 1 colorpair
113 130 0.0 1 colorpair
114 129 0.0 1 colorpair
115 128 0.0 1 colorpair
116 126 0.0 1 colorpair
117 125 0.0 1 colorpair
118 124 0.0 1 colorpair
119 123 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
