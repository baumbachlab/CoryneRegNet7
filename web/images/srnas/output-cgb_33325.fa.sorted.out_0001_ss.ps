%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu May 14 18:36:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACUAACUUUAACGAUCUAGAACUUGCCCGAAAUAUUGCUCAAAGCAUCUCUCAAAGCACUGCCUAAAGCACUGCCCAGAGCCUUGCCCGGAGCUUUGCUCAAAGCAUCUCAAGCAUCAGGCAAGACCUCCCCAUAA\
) } def
/len { sequence length } bind def

/coor [
[80.73640442 426.44549561]
[66.96444702 432.47732544]
[52.38747787 436.15997314]
[37.40316772 437.39294434]
[22.42029190 436.14260864]
[7.84760046 432.44308472]
[-5.91735411 426.39526367]
[-18.49905396 418.16418457]
[-29.55426025 407.97436523]
[-38.78137970 396.10382080]
[-45.92869186 382.87634277]
[-50.80120850 368.65283203]
[-53.26601028 353.82128906]
[-53.25584793 338.78634644]
[-50.77099991 323.95816040]
[-45.87926102 309.74124146]
[-38.71407700 296.52343750]
[-29.47091675 284.66537476]
[-18.40194511 274.49050903]
[-5.80913115 266.27645874]
[7.96398640 260.24725342]
[22.54166603 256.56744385]
[37.52621460 255.33735657]
[52.50885010 256.59057617]
[56.19977951 242.05175781]
[59.89070892 227.51295471]
[63.58163834 212.97413635]
[67.27256775 198.43533325]
[70.96350098 183.89651489]
[66.59578705 169.65670776]
[77.49089813 158.18467712]
[81.18182373 143.64587402]
[67.29227448 134.48609924]
[57.41062546 121.10049438]
[52.74774170 105.12931061]
[53.87500000 88.52960205]
[60.65427017 73.33543396]
[72.25483704 61.40865707]
[87.25521088 54.21074295]
[85.56371307 39.30641937]
[83.87221527 24.40209770]
[82.18071747 9.49777508]
[68.84171295 1.79211223]
[62.66990280 -12.12773514]
[65.84053802 -26.83865166]
[76.93280792 -36.74317169]
[75.24131012 -51.64749527]
[73.54981232 -66.55181885]
[60.21081161 -74.25747681]
[54.03900146 -88.17733002]
[57.20963669 -102.88824463]
[68.30191040 -112.79276276]
[66.61040497 -127.69709015]
[64.91890717 -142.60140991]
[51.57991028 -150.30706787]
[45.40810013 -164.22691345]
[48.57873154 -178.93783569]
[59.67100525 -188.84236145]
[57.97950745 -203.74667358]
[56.28800583 -218.65100098]
[47.04386139 -231.49064636]
[53.29660034 -245.00924683]
[51.60509872 -259.91357422]
[49.91360092 -274.81787109]
[38.30867004 -285.89511108]
[39.87710190 -301.86132812]
[53.41573334 -310.46859741]
[68.53888702 -305.11416626]
[73.64536285 -289.90548706]
[64.81792450 -276.50939941]
[66.50942230 -261.60507202]
[68.20092010 -246.70074463]
[77.32408142 -234.92715454]
[71.19232941 -220.34249878]
[72.88382721 -205.43817139]
[74.57532501 -190.53385925]
[87.60504150 -183.36694336]
[93.99167633 -169.74069214]
[91.09619141 -154.79179382]
[79.82323456 -144.29290771]
[81.51473236 -129.38858032]
[83.20623016 -114.48426056]
[96.23594666 -107.31735992]
[102.62258148 -93.69110107]
[99.72709656 -78.74220276]
[88.45413208 -68.24331665]
[90.14563751 -53.33899307]
[91.83713531 -38.43466949]
[104.86684418 -31.26776505]
[111.25347900 -17.64150620]
[108.35799408 -2.69260859]
[97.08503723 7.80627680]
[98.77653503 22.71059990]
[100.46803284 37.61492157]
[102.15953064 52.51924515]
[122.04290771 57.89066696]
[137.78717041 71.16918945]
[146.43592834 89.86142731]
[161.41198730 89.01432037]
[176.38804626 88.16722107]
[191.36410522 87.32012177]
[206.83650208 80.38893890]
[217.77999878 93.33792877]
[208.36651611 107.43838501]
[192.21121216 102.29618073]
[177.23515320 103.14328766]
[162.25907898 103.99038696]
[147.28302002 104.83748627]
[145.95846558 112.12041473]
[143.51916504 119.10935211]
[140.02429199 125.63478851]
[135.55859375 131.53843689]
[130.23039246 136.67709351]
[124.16894531 140.92613220]
[117.52126312 144.18247986]
[110.44859314 146.36715698]
[103.12248230 147.42716980]
[95.72064209 147.33680725]
[92.02970886 161.87561035]
[96.13342285 177.15533447]
[85.50231171 187.58744812]
[81.81137848 202.12625122]
[78.12045288 216.66506958]
[74.42951965 231.20388794]
[70.73859406 245.74269104]
[67.04766083 260.28149414]
[80.81378174 266.32666016]
[93.39706421 274.55529785]
[104.45423889 284.74298096]
[113.68363953 296.61175537]
[120.83350372 309.83786011]
[125.70876312 324.06042480]
[128.17642212 338.89151001]
[128.16914368 353.92645264]
[125.68716431 368.75512695]
[120.79815674 382.97299194]
[113.63552094 396.19216919]
[104.39464569 408.05200195]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[24 126]
[25 125]
[26 124]
[27 123]
[28 122]
[29 121]
[31 119]
[32 118]
[39 95]
[40 94]
[41 93]
[42 92]
[46 88]
[47 87]
[48 86]
[52 82]
[53 81]
[54 80]
[58 76]
[59 75]
[60 74]
[62 72]
[63 71]
[64 70]
[98 108]
[99 107]
[100 106]
[101 105]
] def

init

% Start Annotations
24 126 0.0 1 colorpair
25 125 0.0 1 colorpair
26 124 0.0 1 colorpair
27 123 0.0 1 colorpair
28 122 0.0 1 colorpair
29 121 0.0 1 colorpair
31 119 0.0 1 colorpair
32 118 0.0 1 colorpair
39 95 0.0 1 colorpair
40 94 0.0 1 colorpair
41 93 0.0 1 colorpair
42 92 0.0 1 colorpair
46 88 0.0 1 colorpair
47 87 0.0 1 colorpair
48 86 0.0 1 colorpair
52 82 0.0 1 colorpair
53 81 0.0 1 colorpair
54 80 0.0 1 colorpair
58 76 0.0 1 colorpair
59 75 0.0 1 colorpair
60 74 0.0 1 colorpair
62 72 0.0 1 colorpair
63 71 0.0 1 colorpair
64 70 0.0 1 colorpair
98 108 0.0 1 colorpair
99 107 0.0 1 colorpair
100 106 0.0 1 colorpair
101 105 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
