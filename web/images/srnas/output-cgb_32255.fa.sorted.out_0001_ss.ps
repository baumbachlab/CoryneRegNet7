%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu May 14 18:36:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGGAUUCGACUGUUUUCCACACCCCAUUGACAAUUAAAGGUGACACGCCUUACAUUCUUGUGGUCUGACCAUGAGGUUGGGCCAAUCGGUUUCAGCC\
) } def
/len { sequence length } bind def

/coor [
[89.52698517 281.33450317]
[97.74905396 267.14544678]
[97.27789307 252.15284729]
[96.80673218 237.16024780]
[96.33557129 222.16764832]
[95.86441040 207.17504883]
[87.73115540 194.69709778]
[95.03115845 180.66069031]
[94.55999756 165.66810608]
[94.08883667 150.67550659]
[93.61767578 135.68290710]
[76.02798462 127.19091797]
[65.39838409 110.80425262]
[50.46495438 112.21587372]
[35.53152466 113.62749481]
[20.59809685 115.03912354]
[16.16186714 129.57832336]
[6.49555635 141.30993652]
[-6.92679405 148.44499207]
[-22.05837250 149.89543152]
[-36.59172440 145.44007874]
[-48.31061554 135.75834656]
[-55.42800522 122.32662201]
[-56.85853958 107.19314575]
[-52.38407135 92.66567230]
[-42.68693161 80.95952606]
[-29.24585533 73.85980988]
[-14.11051273 72.44918823]
[0.41106609 76.94275665]
[12.10444641 86.65528870]
[19.18647194 100.10569763]
[34.11990356 98.69406891]
[49.05332947 97.28244781]
[63.98675919 95.87081909]
[64.34973907 85.57514191]
[67.74453735 75.23358917]
[74.20056152 65.75516510]
[83.47267151 58.05414200]
[95.04277802 52.96725845]
[91.31243134 38.43851471]
[87.58208466 23.90976524]
[83.85173035 9.38101768]
[80.12138367 -5.14772940]
[76.39103699 -19.67647743]
[66.59561920 -33.51433182]
[77.18104553 -46.75763702]
[92.83713531 -40.25200653]
[90.91978455 -23.40682602]
[94.65013123 -8.87807751]
[98.38047791 5.65066957]
[102.11083221 20.17941666]
[105.84117889 34.70816422]
[109.57152557 49.23691177]
[124.42188263 51.35042953]
[132.05749512 38.43930054]
[139.69311523 25.52816963]
[139.32369995 9.13318348]
[153.47608948 0.84814399]
[167.59152222 9.19598961]
[167.14926147 25.58917236]
[152.60424805 33.16379166]
[144.96862793 46.07492065]
[137.33300781 58.98605347]
[144.96862793 71.89717865]
[159.96122742 71.42601776]
[174.95382690 70.95485687]
[189.94642639 70.48369598]
[204.93902588 70.01253510]
[219.93162537 69.54137421]
[234.92422485 69.07021332]
[249.91682434 68.59905243]
[264.90942383 68.12789154]
[278.55422974 59.03110504]
[293.13275146 66.54101562]
[293.64785767 82.93207550]
[279.56964111 91.34255981]
[265.38058472 83.12049103]
[250.38798523 83.59165192]
[235.39538574 84.06281281]
[220.40278625 84.53397369]
[205.41018677 85.00513458]
[190.41758728 85.47629547]
[175.42498779 85.94745636]
[160.43238831 86.41861725]
[145.43978882 86.88977814]
[142.18621826 111.05988312]
[128.00018311 128.46818542]
[108.61027527 135.21174622]
[109.08143616 150.20434570]
[109.55259705 165.19692993]
[110.02375793 180.18952942]
[118.19071960 193.73986816]
[110.85700989 206.70388794]
[111.32817078 221.69648743]
[111.79933167 236.68908691]
[112.27049255 251.68168640]
[112.74165344 266.67428589]
[121.83843994 280.31909180]
[114.32852936 294.89761353]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 97]
[3 96]
[4 95]
[5 94]
[6 93]
[8 91]
[9 90]
[10 89]
[11 88]
[13 34]
[14 33]
[15 32]
[16 31]
[39 53]
[40 52]
[41 51]
[42 50]
[43 49]
[44 48]
[54 63]
[55 62]
[56 61]
[64 85]
[65 84]
[66 83]
[67 82]
[68 81]
[69 80]
[70 79]
[71 78]
[72 77]
] def

init

% Start Annotations
2 97 0.0 1 colorpair
3 96 0.0 1 colorpair
4 95 0.0 1 colorpair
5 94 0.0 1 colorpair
6 93 0.0 1 colorpair
8 91 0.0 1 colorpair
9 90 0.0 1 colorpair
10 89 0.0 1 colorpair
11 88 0.0 1 colorpair
13 34 0.0 1 colorpair
14 33 0.0 1 colorpair
15 32 0.0 1 colorpair
16 31 0.0 1 colorpair
39 53 0.0 1 colorpair
40 52 0.0 1 colorpair
41 51 0.0 1 colorpair
42 50 0.0 1 colorpair
43 49 0.0 1 colorpair
44 48 0.0 1 colorpair
54 63 0.0 1 colorpair
55 62 0.0 1 colorpair
56 61 0.0 1 colorpair
64 85 0.0 1 colorpair
65 84 0.0 1 colorpair
66 83 0.0 1 colorpair
67 82 0.0 1 colorpair
68 81 0.0 1 colorpair
69 80 0.0 1 colorpair
70 79 0.0 1 colorpair
71 78 0.0 1 colorpair
72 77 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
