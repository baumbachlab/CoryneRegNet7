%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu May 14 18:36:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUACGCCUUUUUUACCUAGGCGGACUAGCUGGUGAUUCAGUAGGAUUUCAUUUCGAAUAGAUGUGGCUGAAGACAAGAAUGAAUAGCAUUCAUCUCGUCGAAUUUCAUGUAGA\
) } def
/len { sequence length } bind def

/coor [
[96.63436890 167.14112854]
[86.58888245 165.87411499]
[76.84761810 163.11279297]
[67.63155365 158.91978455]
[59.14974976 153.39021301]
[48.76267242 164.21188354]
[38.37559509 175.03355408]
[27.98851967 185.85523987]
[17.60144424 196.67691040]
[21.28884888 211.65711975]
[16.27036476 226.24540710]
[4.14737511 235.78672791]
[-11.21172047 237.23645020]
[-24.90588951 230.13200378]
[-32.56537247 216.74037170]
[-31.74605751 201.33477783]
[-22.70938301 188.83110046]
[-8.33891964 183.21920776]
[6.77976942 186.28984070]
[17.16684532 175.46815491]
[27.55392075 164.64648438]
[37.94099808 153.82481384]
[48.32807159 143.00312805]
[37.49708939 124.75164032]
[32.89567184 104.03318787]
[34.98243332 82.91275787]
[20.99100304 77.50537109]
[5.32948589 79.74757385]
[-3.75279427 67.94242859]
[-17.74422646 62.53504562]
[-31.73566055 57.12766266]
[-45.72709274 51.72027588]
[-59.71852493 46.31289291]
[-75.82932281 49.37464142]
[-86.32986450 36.77819061]
[-80.41809845 21.48168564]
[-64.17553711 19.22086143]
[-54.31113815 32.32146072]
[-40.31970596 37.72884369]
[-26.32827377 43.13623047]
[-12.33684254 48.54361343]
[1.65459061 53.95100021]
[16.31534576 51.32202148]
[26.39838791 63.51393890]
[40.38982010 68.92132568]
[50.48778915 54.52694321]
[63.97294235 43.24342346]
[79.92274475 35.84268188]
[97.24605560 32.83100891]
[114.75776672 34.41443634]
[131.25987244 40.48464203]
[145.62347412 50.62635803]
[156.86592102 64.14577484]
[170.36772156 57.61116028]
[183.86953735 51.07654572]
[197.37133789 44.54193115]
[210.87313843 38.00731659]
[216.14819336 23.35086250]
[229.93402100 16.91617203]
[243.87420654 22.03543854]
[257.37600708 15.50082493]
[270.87783813 8.96621037]
[284.37963867 2.43159556]
[297.88143921 -4.10301924]
[303.26699829 -20.67820358]
[318.64208984 -28.14487076]
[334.36819458 -22.36019135]
[347.68646240 -29.26116562]
[361.00473022 -36.16213989]
[374.32302856 -43.06311798]
[372.99203491 -58.20566940]
[377.56195068 -72.70340729]
[387.33584595 -84.34552765]
[400.82333374 -91.35669708]
[415.96762085 -92.66775513]
[430.45935059 -88.07878113]
[442.08859253 -78.28956604]
[449.08200073 -64.79287720]
[450.37313843 -49.64687347]
[445.76510620 -35.16120911]
[435.96060181 -23.54484177]
[422.45474243 -16.56918335]
[407.30703735 -15.29797077]
[392.82745361 -19.92505455]
[381.22399902 -29.74483871]
[367.90570068 -22.84386444]
[354.58743286 -15.94288826]
[341.26916504 -9.04191208]
[339.09622192 3.73856258]
[329.79025269 13.04265785]
[316.62402344 15.27859688]
[304.41604614 9.39878845]
[290.91424561 15.93340302]
[277.41244507 22.46801758]
[263.91064453 29.00263214]
[250.40882874 35.53724670]
[245.77468872 49.64612579]
[232.17503357 56.46549225]
[217.40776062 51.50912476]
[203.90596008 58.04373932]
[190.40414429 64.57835388]
[176.90234375 71.11296844]
[163.40052795 77.64758301]
[166.03845215 87.42298889]
[167.17831421 97.48369598]
[166.79428101 107.60148621]
[164.89503479 117.54684448]
[161.52369690 127.09415436]
[156.75671387 136.02685547]
[150.70222473 144.14228821]
[143.49758911 151.25639343]
[135.30622864 157.20776367]
[126.31396484 161.86140442]
[116.72478485 165.11174011]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 23]
[6 22]
[7 21]
[8 20]
[9 19]
[26 45]
[27 44]
[29 42]
[30 41]
[31 40]
[32 39]
[33 38]
[53 103]
[54 102]
[55 101]
[56 100]
[57 99]
[60 96]
[61 95]
[62 94]
[63 93]
[64 92]
[67 88]
[68 87]
[69 86]
[70 85]
] def

init

% Start Annotations
5 23 0.0 1 colorpair
6 22 0.0 1 colorpair
7 21 0.0 1 colorpair
8 20 0.0 1 colorpair
9 19 0.0 1 colorpair
26 45 0.0 1 colorpair
27 44 0.0 1 colorpair
29 42 0.0 1 colorpair
30 41 0.0 1 colorpair
31 40 0.0 1 colorpair
32 39 0.0 1 colorpair
33 38 0.0 1 colorpair
53 103 0.0 1 colorpair
54 102 0.0 1 colorpair
55 101 0.0 1 colorpair
56 100 0.0 1 colorpair
57 99 0.0 1 colorpair
60 96 0.0 1 colorpair
61 95 0.0 1 colorpair
62 94 0.0 1 colorpair
63 93 0.0 1 colorpair
64 92 0.0 1 colorpair
67 88 0.0 1 colorpair
68 87 0.0 1 colorpair
69 86 0.0 1 colorpair
70 85 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
