%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu May 14 18:36:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGUGUUAUCGCCGGUGGCGCAGCACGUCCAGUUCUUGAGUGCGCAGGUAUCCAAGACAUCCUGUCCAAGUCCCUUGGUU\
) } def
/len { sequence length } bind def

/coor [
[87.15356445 127.68981934]
[81.39459229 124.19908142]
[76.54119873 119.53052521]
[63.00868607 126.00131226]
[49.47617340 132.47210693]
[35.94366074 138.94290161]
[22.41114998 145.41368103]
[17.29018784 157.43676758]
[5.67535305 162.48347473]
[-5.84748507 158.29774475]
[-19.62072563 164.23895264]
[-33.39396667 170.18014526]
[-47.16720963 176.12133789]
[-59.31612396 187.94674683]
[-74.04254150 179.54621887]
[-70.04698181 163.06980896]
[-53.10840607 162.34809875]
[-39.33516312 156.40690613]
[-25.56192398 150.46569824]
[-11.78868103 144.52450562]
[-2.24723315 129.93055725]
[15.94036007 131.88117981]
[29.47287178 125.41038513]
[43.00538254 118.93959045]
[56.53789520 112.46880341]
[70.07040405 105.99800873]
[70.91500092 90.73611450]
[79.05268860 77.79714203]
[92.44293213 70.42556000]
[107.72811127 70.46979523]
[114.97480011 57.33642197]
[122.22148895 44.20304871]
[120.08948517 23.06474495]
[137.55081177 12.35346889]
[143.22381592 -1.53239083]
[148.89680481 -15.41825008]
[154.56980896 -29.30410957]
[160.24281311 -43.18996811]
[158.29942322 -58.89136505]
[170.27548218 -67.74706268]
[175.94848633 -81.63291931]
[181.62147522 -95.51877594]
[187.29447937 -109.40464020]
[184.54025269 -125.57084656]
[197.33450317 -135.82946777]
[212.51557922 -129.62731934]
[214.46650696 -113.34462738]
[201.18032837 -103.73164368]
[195.50733948 -89.84577942]
[189.83433533 -75.95992279]
[184.16134644 -62.07406235]
[186.51049805 -47.36587524]
[174.12866211 -37.51697159]
[168.45567322 -23.63111115]
[162.78266907 -9.74525261]
[157.10966492 4.14060688]
[151.43667603 18.02646637]
[156.37669373 25.94577217]
[156.97070312 35.40110016]
[152.94329834 44.13106537]
[145.14035034 49.98441696]
[135.35485840 51.44973755]
[128.10816956 64.58310699]
[120.86148834 77.71648407]
[130.38131714 97.04487610]
[124.76475525 117.84555054]
[134.40657043 129.33622742]
[144.04838562 140.82688904]
[153.69020081 152.31755066]
[163.33201599 163.80822754]
[178.14497375 172.05519104]
[174.32093811 188.57223511]
[157.39077759 189.47003174]
[151.84133911 173.45002747]
[142.19952393 161.95936584]
[132.55770874 150.46870422]
[122.91590118 138.97802734]
[113.27408600 127.48736572]
[106.92382812 129.72906494]
[100.23657227 130.52377319]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 26]
[4 25]
[5 24]
[6 23]
[7 22]
[10 20]
[11 19]
[12 18]
[13 17]
[30 64]
[31 63]
[32 62]
[34 57]
[35 56]
[36 55]
[37 54]
[38 53]
[40 51]
[41 50]
[42 49]
[43 48]
[66 78]
[67 77]
[68 76]
[69 75]
[70 74]
] def

init

% Start Annotations
3 26 0.0 1 colorpair
4 25 0.0 1 colorpair
5 24 0.0 1 colorpair
6 23 0.0 1 colorpair
7 22 0.0 1 colorpair
10 20 0.0 1 colorpair
11 19 0.0 1 colorpair
12 18 0.0 1 colorpair
13 17 0.0 1 colorpair
30 64 0.0 1 colorpair
31 63 0.0 1 colorpair
32 62 0.0 1 colorpair
34 57 0.0 1 colorpair
35 56 0.0 1 colorpair
36 55 0.0 1 colorpair
37 54 0.0 1 colorpair
38 53 0.0 1 colorpair
40 51 0.0 1 colorpair
41 50 0.0 1 colorpair
42 49 0.0 1 colorpair
43 48 0.0 1 colorpair
66 78 0.0 1 colorpair
67 77 0.0 1 colorpair
68 76 0.0 1 colorpair
69 75 0.0 1 colorpair
70 74 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
