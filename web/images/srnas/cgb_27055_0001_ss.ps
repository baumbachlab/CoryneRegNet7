%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu May 14 18:36:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCCCAUAACGAAGGCUUCUUCCCAGCGCCACCAAGUACUUCAUAGCGGAUUGCAGUCCGACUAUGAACUGGUUAGCCU_\
) } def
/len { sequence length } bind def

/coor [
[41.02799988 285.61456299]
[35.59350204 299.78604126]
[25.40375519 311.03475952]
[11.83684254 317.83941650]
[-3.27242327 319.27972412]
[-17.88063812 315.16091919]
[-30.01215935 306.04003906]
[-38.02630234 293.15060425]
[-40.83921432 278.23577881]
[-38.07047653 263.31268311]
[-30.09453964 250.39955139]
[-17.99007797 241.24278259]
[-3.39412332 237.08074951]
[11.71934128 238.47631836]
[18.37513924 225.03384399]
[25.03093529 211.59135437]
[31.68673325 198.14888000]
[38.34253311 184.70639038]
[32.34322739 175.84251404]
[30.68896294 165.18467712]
[33.76560974 154.76164246]
[41.05168915 146.58781433]
[51.20530319 142.27400208]
[62.31091309 142.71025085]
[70.46442413 130.11976624]
[78.61794281 117.52928162]
[86.77145386 104.93879700]
[72.19910431 108.49501038]
[57.40493011 106.01864624]
[44.78500366 97.91078186]
[36.38325882 85.48457336]
[33.56044769 70.75257111]
[36.77375412 56.10079193]
[45.50274658 43.90224075]
[58.33367538 36.13260269]
[73.18843079 34.05025864]
[87.66113281 37.99245834]
[99.40776825 47.32072830]
[106.52584076 60.52425003]
[107.86251068 75.46457672]
[103.20121765 89.72206879]
[116.37890625 82.55627441]
[129.55657959 75.39048004]
[142.73426819 68.22467804]
[155.91195679 61.05888367]
[169.08963013 53.89308548]
[182.26731873 46.72728729]
[195.30532837 39.31039047]
[208.19886780 31.64510918]
[221.09242249 23.97982788]
[233.98596191 16.31454849]
[246.87950134 8.64926815]
[254.42066956 -5.91311073]
[270.81280518 -6.39306259]
[279.19305420 7.70314598]
[270.94058228 21.87454414]
[254.54478455 21.54281235]
[241.65124512 29.20809174]
[228.75769043 36.87337112]
[215.86415100 44.53865433]
[202.97061157 52.20393372]
[198.72315979 58.48846817]
[189.43312073 59.90497208]
[176.25543213 67.07077026]
[163.07774353 74.23656464]
[149.90007019 81.40236664]
[136.72238159 88.56816101]
[123.54470062 95.73395538]
[110.36701965 102.89975739]
[99.36193848 113.09231567]
[91.20841980 125.68279266]
[83.05490875 138.27326965]
[74.90139771 150.86375427]
[80.33928680 169.94450378]
[70.49565887 186.83087158]
[51.78501511 191.36218262]
[45.12921524 204.80467224]
[38.47341919 218.24716187]
[31.81762123 231.68963623]
[25.16182518 245.13212585]
[35.43388367 256.30572510]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 80]
[15 79]
[16 78]
[17 77]
[18 76]
[24 73]
[25 72]
[26 71]
[27 70]
[41 69]
[42 68]
[43 67]
[44 66]
[45 65]
[46 64]
[47 63]
[48 61]
[49 60]
[50 59]
[51 58]
[52 57]
] def

init

% Start Annotations
14 80 0.0 1 colorpair
15 79 0.0 1 colorpair
16 78 0.0 1 colorpair
17 77 0.0 1 colorpair
18 76 0.0 1 colorpair
24 73 0.0 1 colorpair
25 72 0.0 1 colorpair
26 71 0.0 1 colorpair
27 70 0.0 1 colorpair
41 69 0.0 1 colorpair
42 68 0.0 0.6 colorpair
43 67 0.0 1 colorpair
44 66 0.0 1 colorpair
45 65 0.16 1 colorpair
46 64 0.0 1 colorpair
47 63 0.0 1 colorpair
48 61 0.16 0.6 colorpair
49 60 0.0 1 colorpair
50 59 0.0 1 colorpair
51 58 0.0 1 colorpair
52 57 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
42 68 1 gmark
65 cmark
48 61 1 gmark
48 cmark
57 cmark

% End Annotations
showpage
end
%%EOF
