%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu May 14 18:19:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_CGGUGAGCACCAGGUACAGACUGACUGAAAAAAAUAAAGAGGCUGAGAAAACACCCGUUGAACCUGCUCUAGCUCGUACUAGCGAAGGGAUGGCCUUAACGUGGCU_\
) } def
/len { sequence length } bind def

/coor [
[-104.02918243 242.81022644]
[-106.13311768 257.68704224]
[-110.28710175 272.12625122]
[-116.41027832 285.84677124]
[-124.38346100 298.58154297]
[-134.05143738 310.08267212]
[-145.22604370 320.12631226]
[-157.68972778 328.51693726]
[-171.19990540 335.09121704]
[-185.49359131 339.72119141]
[-200.29255676 342.31674194]
[-215.30873108 342.82733154]
[-230.24981689 341.24301147]
[-244.82499695 337.59466553]
[-258.75054932 331.95327759]
[-271.75540161 324.42864990]
[-283.58639526 315.16726685]
[-294.01330566 304.34939575]
[-302.83309937 292.18563843]
[-309.87411499 278.91271973]
[-314.99932861 264.78903198]
[-318.10891724 250.08949280]
[-319.14242554 235.10023499]
[-318.07965088 220.11302185]
[-314.94137573 205.41957092]
[-309.78860474 191.30592346]
[-302.72167969 178.04678345]
[-293.87814331 165.90025330]
[-283.43014526 155.10276794]
[-271.58108521 145.86451721]
[-258.56155396 138.36529541]
[-244.62503052 132.75109863]
[-230.04277039 129.13119507]
[-215.09861755 127.57606506]
[-200.08346558 128.11596680]
[-185.28959656 130.74040222]
[-171.00497437 135.39826965]
[-157.50765991 141.99891663]
[-145.06037903 150.41386414]
[-133.90541077 160.47927856]
[-124.25989532 171.99928284]
[-116.31159210 184.74960327]
[-102.60255432 178.66171265]
[-88.89351654 172.57383728]
[-75.18447876 166.48594666]
[-61.47544479 160.39807129]
[-52.98378372 148.16119385]
[-37.23106384 149.63166809]
[-38.11206818 135.54837036]
[-34.10056305 121.98846436]
[-25.66351700 110.60299683]
[-13.80804920 102.78559113]
[0.03876817 99.50191498]
[14.20167542 101.17038727]
[26.95990562 107.60900879]
[36.75625610 118.05498505]
[50.63503647 112.36470032]
[64.51382446 106.67440796]
[78.39260864 100.98412323]
[92.27138519 95.29383850]
[94.30218506 91.81468964]
[97.91651154 89.30337524]
[102.61870575 88.47157288]
[107.60293579 89.76914978]
[121.92127991 85.29866028]
[136.23960876 80.82817841]
[147.10668945 69.32959747]
[161.56153870 72.92214966]
[172.42860413 61.42356873]
[186.88346863 65.01612091]
[201.20179749 60.54563522]
[215.52014160 56.07515335]
[229.83848572 51.60466766]
[236.95242310 37.49200439]
[251.98786926 32.62258530]
[266.02453613 39.88534546]
[270.73471069 54.97142029]
[263.32394409 68.93051147]
[248.18891907 73.48093414]
[234.30895996 65.92300415]
[219.99063110 70.39348602]
[205.67228699 74.86397552]
[191.35394287 79.33445740]
[181.51101685 90.51327515]
[166.03202820 87.24048615]
[156.18910217 98.41931152]
[140.71009827 95.14651489]
[126.39176178 99.61700439]
[112.07342529 104.08748627]
[97.96167755 109.17262268]
[84.08289337 114.86290741]
[70.20410919 120.55319214]
[56.32532501 126.24348450]
[42.44654083 131.93376160]
[42.50859833 147.94035339]
[36.46699524 162.72171021]
[25.26486397 174.04772949]
[10.62149906 180.22175598]
[-5.23148680 180.33465576]
[-19.89024162 174.39857483]
[-31.14318085 163.34071350]
[-40.61540222 176.01303101]
[-55.38756180 174.10710144]
[-69.09659576 180.19499207]
[-82.80563354 186.28286743]
[-96.51467133 192.37075806]
[-110.22370911 198.45863342]
[-106.09458160 212.90496826]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[42 107]
[43 106]
[44 105]
[45 104]
[46 103]
[48 101]
[56 94]
[57 93]
[58 92]
[59 91]
[60 90]
[64 89]
[65 88]
[66 87]
[68 85]
[70 83]
[71 82]
[72 81]
[73 80]
] def

init

% Start Annotations
42 107 0.0 1 colorpair
43 106 0.0 1 colorpair
44 105 0.0 1 colorpair
45 104 0.0 1 colorpair
46 103 0.0 1 colorpair
48 101 0.0 1 colorpair
56 94 0.0 1 colorpair
57 93 0.0 1 colorpair
58 92 0.0 1 colorpair
59 91 0.0 1 colorpair
60 90 0.0 1 colorpair
64 89 0.0 1 colorpair
65 88 0.0 1 colorpair
66 87 0.0 1 colorpair
68 85 0.0 1 colorpair
70 83 0.0 1 colorpair
71 82 0.0 1 colorpair
72 81 0.0 1 colorpair
73 80 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
