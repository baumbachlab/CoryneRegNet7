%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu May 14 18:36:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGCAUCGAUUCCGGUGUCAUAGGUAGCCGGGCGCCCGUCGUGGUCGUGUGGUUGUUCUUGUUGGAUCAAGUCGGGGACUUUGGCGAGUCCGUCUUGACCCCAGUUUUGUUGCCUGGCGAUCUCAACCGGAUCGCCAGGCAA\
) } def
/len { sequence length } bind def

/coor [
[101.02584076 130.89617920]
[86.46426392 127.64003754]
[79.78686523 141.07180786]
[73.10946655 154.50357056]
[66.43206787 167.93533325]
[59.75467300 181.36711121]
[53.07727432 194.79887390]
[46.39987564 208.23063660]
[47.95948029 224.55545044]
[34.44643021 233.84683228]
[19.76179695 226.54658508]
[19.01186943 210.16459656]
[32.96810913 201.55323792]
[39.64550781 188.12147522]
[46.32290649 174.68971252]
[53.00030136 161.25793457]
[59.67770004 147.82617188]
[66.35509491 134.39440918]
[73.03249359 120.96263885]
[66.65177155 107.38742828]
[52.04909134 103.95788574]
[37.44641113 100.52834320]
[22.84373093 97.09880829]
[8.24105167 93.66926575]
[-6.43344164 90.56133270]
[-21.17266846 87.77651978]
[-35.91189194 84.99169922]
[-50.65111923 82.20687866]
[-65.39034271 79.42205811]
[-80.12957001 76.63723755]
[-95.12629700 81.67796326]
[-106.19583893 71.71229553]
[-120.93506622 68.92747498]
[-135.67428589 66.14265442]
[-150.67100525 71.18338013]
[-161.74055481 61.21771622]
[-176.47978210 58.43289566]
[-190.48976135 66.24953461]
[-205.28094482 60.03659439]
[-209.50679016 44.56010056]
[-199.92558289 31.69230270]
[-183.88723755 31.30426979]
[-173.69496155 43.69366837]
[-158.95573425 46.47848892]
[-145.01325989 41.23857880]
[-132.88946533 51.40343094]
[-118.15024567 54.18825150]
[-103.41101837 56.97306824]
[-89.46854401 51.73315811]
[-77.34474945 61.89801407]
[-62.60552597 64.68283081]
[-47.86629868 67.46765137]
[-33.12707520 70.25247192]
[-18.38784790 73.03729248]
[-3.64862251 75.82211304]
[0.78834188 73.87231445]
[6.50299454 74.74430847]
[11.67059231 79.06658936]
[26.27327156 82.49612427]
[40.87595367 85.92566681]
[55.47863007 89.35520935]
[70.08131409 92.78475189]
[91.03036499 70.34523010]
[121.18300629 77.11122131]
[128.15385437 63.82938004]
[127.71607208 48.01423264]
[140.48176575 40.34049606]
[147.45262146 27.05865669]
[154.42346191 13.77681541]
[161.39431763 0.49497521]
[168.36515808 -12.78686523]
[162.65086365 -23.31691360]
[162.76486206 -35.17661285]
[168.56172180 -45.38550186]
[178.48245239 -51.43465042]
[189.97206116 -51.90295410]
[197.51957703 -64.86578369]
[205.06709290 -77.82862091]
[212.61460876 -90.79145050]
[220.16212463 -103.75428772]
[227.70964050 -116.71711731]
[227.22857666 -133.10920715]
[241.32420349 -141.49043274]
[255.49617004 -133.23892212]
[255.16555786 -116.84310150]
[240.67247009 -109.16960144]
[233.12495422 -96.20677185]
[225.57743835 -83.24393463]
[218.02992249 -70.28110504]
[210.48242188 -57.31827164]
[202.93490601 -44.35544205]
[208.69705200 -27.03914642]
[199.89065552 -10.69336128]
[181.64700317 -5.81601763]
[174.67614746 7.46582270]
[167.70530701 20.74766350]
[160.73445129 34.02950287]
[153.76361084 47.31134415]
[154.69999695 62.17648697]
[141.43569946 70.80023193]
[134.46484375 84.08206940]
[143.21827698 71.90103912]
[157.30360413 66.74317169]
[171.85331726 70.39087677]
[181.83944702 81.58361053]
[183.81105042 96.45346832]
[177.08680725 109.86184692]
[163.99043274 117.17517090]
[149.04765320 115.86615753]
[137.42210388 106.38687897]
[147.61318970 117.39332581]
[157.80426025 128.39976501]
[167.99534607 139.40621948]
[178.18643188 150.41265869]
[188.37751770 161.41911316]
[198.56860352 172.42555237]
[208.75967407 183.43200684]
[218.95075989 194.43844604]
[229.14184570 205.44488525]
[239.33293152 216.45133972]
[249.52400208 227.45777893]
[259.71508789 238.46423340]
[269.90615845 249.47067261]
[285.81759644 251.52163696]
[294.01113892 265.31457520]
[288.20141602 280.26873779]
[272.84518433 284.91256714]
[259.72238159 275.68371582]
[258.89971924 259.66174316]
[248.70864868 248.65530396]
[238.51756287 237.64886475]
[228.32647705 226.64242554]
[218.13539124 215.63597107]
[207.94432068 204.62953186]
[197.75323486 193.62307739]
[187.56214905 182.61663818]
[177.37106323 171.61018372]
[167.17999268 160.60374451]
[156.98890686 149.59730530]
[146.79782104 138.59085083]
[136.60673523 127.58441162]
[126.41565704 116.57796478]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 19]
[3 18]
[4 17]
[5 16]
[6 15]
[7 14]
[8 13]
[20 62]
[21 61]
[22 60]
[23 59]
[24 58]
[25 55]
[26 54]
[27 53]
[28 52]
[29 51]
[30 50]
[32 48]
[33 47]
[34 46]
[36 44]
[37 43]
[64 101]
[65 100]
[67 98]
[68 97]
[69 96]
[70 95]
[71 94]
[76 91]
[77 90]
[78 89]
[79 88]
[80 87]
[81 86]
[110 142]
[111 141]
[112 140]
[113 139]
[114 138]
[115 137]
[116 136]
[117 135]
[118 134]
[119 133]
[120 132]
[121 131]
[122 130]
[123 129]
] def

init

% Start Annotations
2 19 0.0 1 colorpair
3 18 0.0 1 colorpair
4 17 0.0 1 colorpair
5 16 0.0 1 colorpair
6 15 0.0 1 colorpair
7 14 0.0 1 colorpair
8 13 0.0 1 colorpair
20 62 0.0 1 colorpair
21 61 0.0 1 colorpair
22 60 0.0 1 colorpair
23 59 0.0 1 colorpair
24 58 0.0 1 colorpair
25 55 0.0 1 colorpair
26 54 0.0 1 colorpair
27 53 0.0 1 colorpair
28 52 0.0 1 colorpair
29 51 0.0 1 colorpair
30 50 0.0 1 colorpair
32 48 0.0 1 colorpair
33 47 0.0 1 colorpair
34 46 0.0 1 colorpair
36 44 0.0 1 colorpair
37 43 0.0 1 colorpair
64 101 0.0 1 colorpair
65 100 0.0 1 colorpair
67 98 0.0 1 colorpair
68 97 0.0 1 colorpair
69 96 0.0 1 colorpair
70 95 0.0 1 colorpair
71 94 0.0 1 colorpair
76 91 0.0 1 colorpair
77 90 0.0 1 colorpair
78 89 0.0 1 colorpair
79 88 0.0 1 colorpair
80 87 0.0 1 colorpair
81 86 0.0 1 colorpair
110 142 0.0 1 colorpair
111 141 0.0 1 colorpair
112 140 0.0 1 colorpair
113 139 0.0 1 colorpair
114 138 0.0 1 colorpair
115 137 0.0 1 colorpair
116 136 0.0 1 colorpair
117 135 0.0 1 colorpair
118 134 0.0 1 colorpair
119 133 0.0 1 colorpair
120 132 0.0 1 colorpair
121 131 0.0 1 colorpair
122 130 0.0 1 colorpair
123 129 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
