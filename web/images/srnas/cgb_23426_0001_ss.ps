%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu May 14 18:36:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGGGAUACGUGCUCGCGUCGCGGAUAACUCGACGAGCCCACUUCGGGAUUAUGUCAUGUAAUGAUCGCGACAAUGUGUCAUUACCCAAAACCAC\
) } def
/len { sequence length } bind def

/coor [
[89.54743195 267.15432739]
[90.58985138 252.08483887]
[95.83691406 237.91990662]
[104.86325073 225.80786133]
[116.93715668 216.73054504]
[111.65340424 202.69195557]
[106.36965179 188.65336609]
[101.08590698 174.61477661]
[95.80215454 160.57618713]
[90.51840210 146.53759766]
[85.23464966 132.49900818]
[73.18653870 123.56352234]
[58.21865463 122.58247375]
[43.25077057 121.60143280]
[28.28288651 120.62038422]
[13.31500244 119.63933563]
[6.93362188 122.34149933]
[1.07651258 121.40654755]
[-2.58961391 118.07286835]
[-17.46128654 116.11497498]
[-32.33295822 114.15708160]
[-47.02499008 120.02690125]
[-58.63345718 110.69455719]
[-72.18536377 119.28090668]
[-87.30023193 113.90312958]
[-92.38321686 98.68659973]
[-83.53510284 85.30413055]
[-67.54338837 84.02161407]
[-56.67556381 95.82288361]
[-43.04725647 89.81301880]
[-30.37506676 99.28540802]
[-15.50339413 101.24330139]
[-0.63172108 103.20119476]
[14.29605007 104.67145538]
[29.26393318 105.65249634]
[44.23181915 106.63354492]
[59.19970322 107.61459351]
[74.16758728 108.59564209]
[73.61883545 98.92952728]
[76.46182251 89.98345947]
[82.12422943 82.86961365]
[89.69821930 78.39364624]
[98.08060455 76.96530914]
[106.13155365 78.56739044]
[114.86872101 66.37469482]
[123.60588837 54.18199158]
[125.35494232 38.45776367]
[139.05752563 32.61924744]
[147.79469299 20.42654800]
[156.53186035 8.23384762]
[165.26902771 -3.95885301]
[174.00619507 -16.15155411]
[182.74336243 -28.34425354]
[177.72421265 -43.02716446]
[182.32621765 -57.84611511]
[194.77976990 -67.10291290]
[210.29626465 -67.23814392]
[222.90925598 -58.19979095]
[227.76882935 -43.46329498]
[223.00634766 -28.69514084]
[210.45309448 -19.57398033]
[194.93606567 -19.60708809]
[186.19889832 -7.41438770]
[177.46173096 4.77831268]
[168.72456360 16.97101212]
[159.98739624 29.16371346]
[151.25022888 41.35641479]
[150.12611389 56.20853806]
[135.79858398 62.91915894]
[127.06142426 75.11186218]
[118.32425690 87.30455780]
[123.73904419 103.06906128]
[116.63100433 119.43672180]
[99.27323914 127.21526337]
[104.55699158 141.25384521]
[109.84074402 155.29243469]
[115.12448883 169.33102417]
[120.40824127 183.36961365]
[125.69199371 197.40820312]
[130.97573853 211.44679260]
[146.03846741 210.31060791]
[160.81086731 213.46543884]
[174.09539795 220.65557861]
[184.81513977 231.29811096]
[192.10112000 244.53031921]
[195.36265564 259.27954102]
[194.33537292 274.35006714]
[189.10255432 288.52026367]
[180.08837891 300.64138794]
[168.02360535 309.73080444]
[153.88626099 315.05172729]
[138.82240295 316.17279053]
[124.05317688 313.00311279]
[110.77587891 305.79965210]
[100.06682587 295.14633179]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 80]
[6 79]
[7 78]
[8 77]
[9 76]
[10 75]
[11 74]
[12 38]
[13 37]
[14 36]
[15 35]
[16 34]
[19 33]
[20 32]
[21 31]
[23 29]
[44 71]
[45 70]
[46 69]
[48 67]
[49 66]
[50 65]
[51 64]
[52 63]
[53 62]
] def

init

% Start Annotations
5 80 0.0 1 colorpair
6 79 0.0 1 colorpair
7 78 0.0 1 colorpair
8 77 0.0 1 colorpair
9 76 0.0 1 colorpair
10 75 0.0 1 colorpair
11 74 0.0 1 colorpair
12 38 0.0 1 colorpair
13 37 0.0 1 colorpair
14 36 0.0 1 colorpair
15 35 0.0 1 colorpair
16 34 0.0 1 colorpair
19 33 0.0 1 colorpair
20 32 0.0 1 colorpair
21 31 0.0 1 colorpair
23 29 0.0 1 colorpair
44 71 0.0 1 colorpair
45 70 0.0 1 colorpair
46 69 0.0 1 colorpair
48 67 0.0 1 colorpair
49 66 0.0 1 colorpair
50 65 0.0 1 colorpair
51 64 0.0 1 colorpair
52 63 0.0 1 colorpair
53 62 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
