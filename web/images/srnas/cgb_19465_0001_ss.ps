%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu May 14 18:36:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGCAGAAUGUCUCAGAUAUUGACCAUCAACCCUGGUCAUCUUCCGCCUACCUCGCUGCUGCAGCAGCAGUGGAUGCUACAGUCCCU\
) } def
/len { sequence length } bind def

/coor [
[66.61830139 101.08009338]
[51.90010452 98.18620300]
[37.18190384 95.29231262]
[22.46370506 92.39842224]
[5.31360912 98.81159210]
[-7.54726839 87.01319122]
[-22.35842896 84.64052582]
[-37.16959000 82.26786804]
[-51.93656921 84.90155029]
[-65.01429749 92.24818420]
[-78.09202576 99.59482574]
[-91.16974640 106.94145966]
[-104.24747467 114.28809357]
[-115.09545135 127.31720734]
[-130.61839294 120.50000000]
[-128.36479187 103.69650269]
[-111.59411621 101.21037292]
[-98.51638794 93.86373138]
[-85.43865967 86.51709747]
[-72.36093140 79.17046356]
[-59.28320694 71.82382202]
[-58.48935318 56.84484482]
[-70.71729279 48.15706635]
[-82.94522858 39.46928787]
[-95.17317200 30.78150940]
[-107.40110779 22.09373093]
[-119.62905121 13.40595150]
[-134.71458435 17.52430725]
[-148.89628601 10.93544197]
[-155.47801208 -3.24958491]
[-151.35205078 -18.33303642]
[-138.46656799 -27.19296837]
[-122.90569305 -25.64599037]
[-112.01679230 -14.42254066]
[-110.94126892 1.17801273]
[-98.71333313 9.86579132]
[-86.48538971 18.55356979]
[-74.25745392 27.24135017]
[-62.02951431 35.92912674]
[-49.80157471 44.61690521]
[-34.79692841 67.45670319]
[-19.98576736 69.82936859]
[-5.17460680 72.20202637]
[4.94207716 65.31955719]
[17.42094421 67.32925415]
[25.35759735 77.68022156]
[40.07579803 80.57411194]
[54.79399490 83.46800232]
[69.51219177 86.36189270]
[75.71945953 75.89763641]
[85.46288300 68.13423157]
[97.60377502 64.24218750]
[110.62683868 64.92346954]
[122.82908630 70.29516602]
[132.54248047 79.84795380]
[138.36123657 92.48813629]
[153.07943726 89.59424591]
[167.79763794 86.70035553]
[182.51583862 83.80646515]
[197.23403931 80.91257477]
[211.95223999 78.01868439]
[226.67044067 75.12479401]
[241.04550171 66.13626099]
[253.66217041 77.46128082]
[246.27238464 92.71996307]
[229.56433105 89.84299469]
[214.84613037 92.73688507]
[200.12792969 95.63077545]
[185.40972900 98.52466583]
[170.69152832 101.41855621]
[155.97332764 104.31244659]
[141.25512695 107.20633698]
[136.06958008 121.28150177]
[145.39233398 133.03251648]
[154.71508789 144.78352356]
[164.03782654 156.53454590]
[179.76495361 158.09443665]
[189.71792603 170.37100220]
[187.99183655 186.08074951]
[175.61074829 195.90336609]
[159.92012024 194.01129150]
[150.22894287 181.52703857]
[152.28681946 165.85729980]
[142.96406555 154.10627747]
[133.64131165 142.35525513]
[124.31857300 130.60424805]
[104.47081757 137.40087891]
[84.77545929 132.89189148]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 49]
[2 48]
[3 47]
[4 46]
[6 43]
[7 42]
[8 41]
[9 21]
[10 20]
[11 19]
[12 18]
[13 17]
[22 40]
[23 39]
[24 38]
[25 37]
[26 36]
[27 35]
[56 72]
[57 71]
[58 70]
[59 69]
[60 68]
[61 67]
[62 66]
[73 86]
[74 85]
[75 84]
[76 83]
] def

init

% Start Annotations
1 49 0.0 1 colorpair
2 48 0.0 1 colorpair
3 47 0.0 1 colorpair
4 46 0.0 1 colorpair
6 43 0.0 1 colorpair
7 42 0.0 1 colorpair
8 41 0.0 1 colorpair
9 21 0.0 1 colorpair
10 20 0.0 1 colorpair
11 19 0.0 1 colorpair
12 18 0.0 1 colorpair
13 17 0.0 1 colorpair
22 40 0.0 1 colorpair
23 39 0.0 1 colorpair
24 38 0.0 1 colorpair
25 37 0.0 1 colorpair
26 36 0.0 1 colorpair
27 35 0.0 1 colorpair
56 72 0.0 1 colorpair
57 71 0.0 1 colorpair
58 70 0.0 1 colorpair
59 69 0.0 1 colorpair
60 68 0.0 1 colorpair
61 67 0.0 1 colorpair
62 66 0.0 1 colorpair
73 86 0.0 1 colorpair
74 85 0.0 1 colorpair
75 84 0.0 1 colorpair
76 83 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
