%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu May 14 18:36:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUGAAGGCGUUGUGCAGGGUUCUUGUGUGAACAUACAAACGCCAAAAUACGACCCACUUCGAGGGUUAAUCCCCCUAACAAGGGACUAAUCGUUUCGCU\
) } def
/len { sequence length } bind def

/coor [
[185.21482849 149.60409546]
[171.71479797 143.06582642]
[158.21475220 136.52755737]
[144.71472168 129.98930359]
[131.21467590 123.45103455]
[117.71463776 116.91276550]
[104.21459961 110.37449646]
[90.61450958 104.04697418]
[74.85887909 105.48597717]
[66.39167786 93.23217010]
[52.69483185 87.11691284]
[38.99798203 81.00166321]
[25.30113411 74.88640594]
[11.60428619 68.77114868]
[-2.09256291 62.65589905]
[-16.54179955 71.28408051]
[-33.12878799 69.68116760]
[-45.41266251 58.66618729]
[-48.74015808 42.67457581]
[-62.62056732 36.98825073]
[-76.50097656 31.30192375]
[-90.93312836 37.16287613]
[-104.92882538 31.19840050]
[-110.42740631 17.40342903]
[-124.30781555 11.71710300]
[-138.18821716 6.03077745]
[-152.06863403 0.34445119]
[-165.94903564 -5.34187508]
[-179.82943726 -11.02820110]
[-195.99829102 -8.28950500]
[-206.24462891 -21.09359169]
[-200.02789307 -36.26871490]
[-183.74334717 -38.20400620]
[-174.14311218 -24.90860748]
[-160.26271057 -19.22228241]
[-146.38230896 -13.53595543]
[-132.50189209 -7.84962988]
[-118.62149048 -2.16330361]
[-104.74108124 3.52302241]
[-91.14450836 -2.44932103]
[-76.98680115 3.11969042]
[-70.81464386 17.42151833]
[-56.93423843 23.10784340]
[-43.05383301 28.79417038]
[-32.30789948 20.70828629]
[-18.85639763 19.01929283]
[-6.24411154 24.28128433]
[2.15106988 35.20216751]
[4.02269125 48.95904922]
[17.71953964 55.07430267]
[31.41638947 61.18955612]
[45.11323929 67.30480957]
[58.81008530 73.42006683]
[72.50693512 79.53532410]
[87.28287506 77.65891266]
[96.72975922 90.35012817]
[104.94358826 90.51789856]
[110.75286102 96.87445831]
[124.25289917 103.41272736]
[137.75294495 109.95098877]
[151.25297546 116.48925781]
[164.75302124 123.02752686]
[178.25306702 129.56579590]
[191.75309753 136.10404968]
[206.03329468 140.69491577]
[220.81433105 143.24856567]
[235.59535217 145.80221558]
[250.37638855 148.35588074]
[265.15740967 150.90953064]
[280.07336426 145.63456726]
[291.29760742 155.42565918]
[306.07864380 157.97930908]
[320.85968018 160.53295898]
[335.64071655 163.08660889]
[346.67114258 152.17289734]
[362.01492310 149.86032104]
[375.77206421 157.03813171]
[382.65264893 170.94628906]
[380.01095581 186.23684692]
[368.86279297 197.03027344]
[353.49481201 199.17625427]
[339.81637573 191.84963989]
[333.08706665 177.86764526]
[318.30603027 175.31399536]
[303.52499390 172.76034546]
[288.74395752 170.20668030]
[274.88525391 175.66430664]
[262.60375977 165.69056702]
[247.82273865 163.13690186]
[233.04170227 160.58325195]
[218.26068115 158.02960205]
[203.47964478 155.47595215]
[212.22567749 167.66229248]
[213.21470642 182.62963867]
[206.14825439 195.86087036]
[193.15896606 203.36276245]
[178.16702271 202.87124634]
[165.69699097 194.53466797]
[159.51234436 180.86901855]
[161.47961426 165.99858093]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 64]
[2 63]
[3 62]
[4 61]
[5 60]
[6 59]
[7 58]
[8 56]
[10 54]
[11 53]
[12 52]
[13 51]
[14 50]
[15 49]
[19 44]
[20 43]
[21 42]
[24 39]
[25 38]
[26 37]
[27 36]
[28 35]
[29 34]
[65 92]
[66 91]
[67 90]
[68 89]
[69 88]
[71 86]
[72 85]
[73 84]
[74 83]
] def

init

% Start Annotations
1 64 0.0 1 colorpair
2 63 0.0 1 colorpair
3 62 0.0 1 colorpair
4 61 0.0 1 colorpair
5 60 0.0 1 colorpair
6 59 0.0 1 colorpair
7 58 0.0 1 colorpair
8 56 0.0 1 colorpair
10 54 0.0 1 colorpair
11 53 0.0 1 colorpair
12 52 0.0 1 colorpair
13 51 0.0 1 colorpair
14 50 0.0 1 colorpair
15 49 0.0 1 colorpair
19 44 0.0 1 colorpair
20 43 0.0 1 colorpair
21 42 0.0 1 colorpair
24 39 0.0 1 colorpair
25 38 0.0 1 colorpair
26 37 0.0 1 colorpair
27 36 0.0 1 colorpair
28 35 0.0 1 colorpair
29 34 0.0 1 colorpair
65 92 0.0 1 colorpair
66 91 0.0 1 colorpair
67 90 0.0 1 colorpair
68 89 0.0 1 colorpair
69 88 0.0 1 colorpair
71 86 0.0 1 colorpair
72 85 0.0 1 colorpair
73 84 0.0 1 colorpair
74 83 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
