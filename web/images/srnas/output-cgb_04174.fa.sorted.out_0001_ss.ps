%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu May 14 18:35:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGUGUGGUUUUGCGGUAUGAAUUCAAUCUGAGUUCUAUCAACUGGAGUGCGUUUGCAUGGUUCGGGCUUGCUGCAGUUAUUUUGCAGUUUGUUCUCGGACUUUCUCUCCAUCUUUACCGCAAGGGAUUACGUCACCUUUUCGGU\
) } def
/len { sequence length } bind def

/coor [
[156.54963684 377.80645752]
[158.21893311 371.28790283]
[155.01612854 356.63381958]
[151.81330872 341.97976685]
[148.61048889 327.32568359]
[145.40768433 312.67160034]
[142.20486450 298.01751709]
[139.00205994 283.36343384]
[135.79924011 268.70938110]
[132.59642029 254.05528259]
[129.07905579 239.47351074]
[125.24875641 224.97079468]
[121.41845703 210.46807861]
[117.58815765 195.96536255]
[113.75785828 181.46264648]
[109.92755890 166.95993042]
[106.09725952 152.45721436]
[102.26696014 137.95449829]
[82.66545105 133.84074402]
[67.87386322 120.33701324]
[53.86630630 125.70249176]
[39.85874557 131.06796265]
[25.85118866 136.43344116]
[11.84362984 141.79890442]
[-2.16392827 147.16438293]
[-16.17148590 152.52986145]
[-28.79989243 163.84178162]
[-43.16563797 154.83834839]
[-38.49089813 138.54162598]
[-21.53696060 138.52229309]
[-7.52940178 133.15682983]
[6.47815657 127.79135132]
[20.48571587 122.42588043]
[34.49327469 117.06040192]
[48.50083160 111.69493103]
[62.50838852 106.32946014]
[62.02424240 98.12258148]
[63.31550217 90.00347900]
[66.32180023 82.35172272]
[70.90258789 75.52503967]
[76.84371948 69.84259033]
[83.86742401 65.57003021]
[91.64533997 62.90710831]
[99.81385040 61.97832108]
[102.70063019 47.25872421]
[105.58740234 32.53912735]
[108.47417450 17.81952858]
[111.36094666 3.09993148]
[106.60308075 -11.12549210]
[95.44152069 -21.14645004]
[84.27996063 -31.16740799]
[68.13129425 -34.02270126]
[62.78479004 -49.52582932]
[73.74047089 -61.72849655]
[89.72806549 -58.07765198]
[94.30091858 -42.32896805]
[105.46247864 -32.30801010]
[116.62403870 -22.28705215]
[127.04611206 -33.15892410]
[140.46327209 -35.43690872]
[145.52612305 -49.55667114]
[150.58895874 -63.67642975]
[155.65180969 -77.79618835]
[160.71464539 -91.91594696]
[165.77749634 -106.03570557]
[170.84033203 -120.15547180]
[175.90318298 -134.27522278]
[165.25781250 -148.87843323]
[165.45137024 -166.79254150]
[176.22024536 -180.91371155]
[193.14422607 -185.75392151]
[197.59492493 -200.07841492]
[202.04562378 -214.40292358]
[206.49630737 -228.72741699]
[210.94700623 -243.05192566]
[215.39768982 -257.37643433]
[219.84838867 -271.70092773]
[213.68373108 -286.51229858]
[221.54602051 -300.49670410]
[237.40400696 -302.92651367]
[249.09277344 -291.93780518]
[247.64572144 -275.96014404]
[234.17288208 -267.25024414]
[229.72219849 -252.92573547]
[225.27149963 -238.60122681]
[220.82081604 -224.27673340]
[216.37011719 -209.95222473]
[211.91941833 -195.62773132]
[207.46873474 -181.30322266]
[216.14276123 -172.69422913]
[220.33125305 -161.13627625]
[219.17282104 -148.82472229]
[212.82797241 -138.12629700]
[202.46017456 -131.12416077]
[190.02294922 -129.21238708]
[184.96009827 -115.09262848]
[179.89726257 -100.97286224]
[174.83441162 -86.85310364]
[169.77157593 -72.73334503]
[164.70872498 -58.61358643]
[159.64587402 -44.49382782]
[154.58303833 -30.37406731]
[162.03349304 -20.00047684]
[162.15988159 -6.65324450]
[154.25595093 4.80987978]
[140.65623474 9.83981323]
[126.08054352 5.98670530]
[123.19377136 20.70630264]
[120.30699921 35.42589951]
[117.42022705 50.14549637]
[114.53344727 64.86509705]
[128.58377075 74.92709351]
[136.72914124 90.16876221]
[137.28683472 107.44141388]
[130.14164734 123.17678833]
[116.76967621 134.12419128]
[120.59997559 148.62690735]
[124.43027496 163.12962341]
[128.26057434 177.63235474]
[132.09088135 192.13507080]
[135.92117310 206.63778687]
[139.75148010 221.14050293]
[143.58177185 235.64321899]
[148.03933716 240.68385315]
[149.07048035 246.36557007]
[147.25050354 250.85247803]
[150.45332336 265.50656128]
[153.65612793 280.16064453]
[156.85894775 294.81469727]
[160.06175232 309.46878052]
[163.26457214 324.12286377]
[166.46739197 338.77694702]
[169.67019653 353.43103027]
[172.87301636 368.08508301]
[176.39038086 382.66687012]
[180.22068787 397.16958618]
[184.05097961 411.67230225]
[197.13662720 420.95376587]
[197.89494324 436.97888184]
[185.74423218 447.45455933]
[170.00547791 444.34475708]
[162.75209045 430.03503418]
[169.54826355 415.50259399]
[165.71797180 400.99987793]
[161.88766479 386.49716187]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 134]
[3 133]
[4 132]
[5 131]
[6 130]
[7 129]
[8 128]
[9 127]
[10 126]
[11 123]
[12 122]
[13 121]
[14 120]
[15 119]
[16 118]
[17 117]
[18 116]
[20 36]
[21 35]
[22 34]
[23 33]
[24 32]
[25 31]
[26 30]
[44 111]
[45 110]
[46 109]
[47 108]
[48 107]
[49 58]
[50 57]
[51 56]
[60 102]
[61 101]
[62 100]
[63 99]
[64 98]
[65 97]
[66 96]
[67 95]
[71 89]
[72 88]
[73 87]
[74 86]
[75 85]
[76 84]
[77 83]
[135 145]
[136 144]
[137 143]
] def

init

% Start Annotations
2 134 0.0 1 colorpair
3 133 0.0 1 colorpair
4 132 0.0 1 colorpair
5 131 0.0 1 colorpair
6 130 0.0 1 colorpair
7 129 0.0 1 colorpair
8 128 0.0 1 colorpair
9 127 0.0 1 colorpair
10 126 0.0 1 colorpair
11 123 0.0 1 colorpair
12 122 0.0 1 colorpair
13 121 0.0 1 colorpair
14 120 0.0 1 colorpair
15 119 0.0 1 colorpair
16 118 0.0 1 colorpair
17 117 0.0 1 colorpair
18 116 0.0 1 colorpair
20 36 0.0 1 colorpair
21 35 0.0 1 colorpair
22 34 0.0 1 colorpair
23 33 0.0 1 colorpair
24 32 0.0 1 colorpair
25 31 0.0 1 colorpair
26 30 0.0 1 colorpair
44 111 0.0 1 colorpair
45 110 0.0 1 colorpair
46 109 0.0 1 colorpair
47 108 0.0 1 colorpair
48 107 0.0 1 colorpair
49 58 0.0 1 colorpair
50 57 0.0 1 colorpair
51 56 0.0 1 colorpair
60 102 0.0 1 colorpair
61 101 0.0 1 colorpair
62 100 0.0 1 colorpair
63 99 0.0 1 colorpair
64 98 0.0 1 colorpair
65 97 0.0 1 colorpair
66 96 0.0 1 colorpair
67 95 0.0 1 colorpair
71 89 0.0 1 colorpair
72 88 0.0 1 colorpair
73 87 0.0 1 colorpair
74 86 0.0 1 colorpair
75 85 0.0 1 colorpair
76 84 0.0 1 colorpair
77 83 0.0 1 colorpair
135 145 0.0 1 colorpair
136 144 0.0 1 colorpair
137 143 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
