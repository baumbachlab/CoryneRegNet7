%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu May 14 18:36:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGUGAGCUUCUUUGGCUUUGUCUACUUCAGUCGUCCUACUGAUGACGCAUUAGCAGUUAAAGAAACUCACAGCCGGUGGCCAACUGUC\
) } def
/len { sequence length } bind def

/coor [
[147.12724304 191.05432129]
[139.62724304 178.06394958]
[131.90165710 165.20643616]
[123.95287323 152.48571777]
[116.00408936 139.76499939]
[108.05529785 127.04427338]
[100.10650635 114.32354736]
[87.85260773 107.59053802]
[87.17276764 93.62523651]
[79.22398376 80.90451813]
[71.27519226 68.18379974]
[63.32640457 55.46307755]
[55.37761307 42.74235535]
[47.42882538 30.02163315]
[39.48003769 17.30091095]
[31.53124619 4.58019018]
[23.58245850 -8.14053154]
[15.63366890 -20.86125374]
[9.67848778 -24.48182297]
[7.01614857 -29.81645393]
[7.61017656 -34.75835037]
[0.66693455 -41.03393173]
[0.56262243 -48.58995438]
[-6.01294470 -62.07186508]
[-12.58851242 -75.55377197]
[-26.69221115 -75.82571411]
[-39.22147751 -82.16062927]
[-47.72030258 -93.25197601]
[-50.55091095 -106.86736298]
[-47.20912933 -120.29776764]
[-38.41306305 -130.89651489]
[-44.51411438 -144.59970093]
[-50.61516571 -158.30287170]
[-56.71621323 -172.00605774]
[-62.81726456 -185.70924377]
[-68.91831207 -199.41242981]
[-83.32022858 -206.48097229]
[-86.63241577 -222.17839050]
[-76.31404877 -234.46296692]
[-60.28049088 -233.91102600]
[-50.83132172 -220.94596863]
[-55.21512985 -205.51347351]
[-49.11408234 -191.81028748]
[-43.01303101 -178.10710144]
[-36.91198349 -164.40393066]
[-30.81093216 -150.70074463]
[-24.70988274 -136.99755859]
[-8.70106316 -135.74617004]
[4.60438919 -126.59123230]
[11.57433128 -111.91864014]
[10.24953747 -95.63539886]
[0.89339876 -82.12934113]
[7.46896601 -68.64743042]
[14.04453278 -55.16551971]
[20.85439110 -41.80042267]
[28.35439110 -28.81004143]
[36.30318069 -16.08932114]
[44.25196838 -3.36859894]
[52.20075607 9.35212231]
[60.14954758 22.07284355]
[68.09833527 34.79356384]
[76.04712677 47.51428604]
[83.99591064 60.23500824]
[91.94470215 72.95572662]
[99.89349365 85.67645264]
[112.14739227 92.40946198]
[112.82723236 106.37476349]
[120.77601624 119.09548187]
[128.72480774 131.81620789]
[136.67359924 144.53692627]
[144.62239075 157.25764465]
[151.98648071 163.03359985]
[152.61761475 170.56394958]
[160.11761475 183.55432129]
[168.28720093 196.13438416]
[177.10398865 208.26963806]
[185.92076111 220.40489197]
[194.73753357 232.54014587]
[210.29437256 236.45989990]
[216.79785156 251.12565613]
[209.25907898 265.28707886]
[193.46113586 268.08078003]
[181.52287292 257.36361694]
[182.60227966 241.35693359]
[173.78550720 229.22167969]
[164.96871948 217.08641052]
[156.15194702 204.95115662]
[152.51768494 204.08621216]
[149.17575073 201.28120422]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 74]
[2 73]
[3 71]
[4 70]
[5 69]
[6 68]
[7 67]
[9 65]
[10 64]
[11 63]
[12 62]
[13 61]
[14 60]
[15 59]
[16 58]
[17 57]
[18 56]
[21 55]
[23 54]
[24 53]
[25 52]
[31 47]
[32 46]
[33 45]
[34 44]
[35 43]
[36 42]
[75 87]
[76 86]
[77 85]
[78 84]
] def

init

% Start Annotations
1 74 0.0 1 colorpair
2 73 0.0 1 colorpair
3 71 0.0 1 colorpair
4 70 0.0 1 colorpair
5 69 0.0 1 colorpair
6 68 0.0 1 colorpair
7 67 0.0 1 colorpair
9 65 0.0 1 colorpair
10 64 0.0 1 colorpair
11 63 0.0 1 colorpair
12 62 0.0 1 colorpair
13 61 0.0 1 colorpair
14 60 0.0 1 colorpair
15 59 0.0 1 colorpair
16 58 0.0 1 colorpair
17 57 0.0 1 colorpair
18 56 0.0 1 colorpair
21 55 0.0 1 colorpair
23 54 0.0 1 colorpair
24 53 0.0 1 colorpair
25 52 0.0 1 colorpair
31 47 0.0 1 colorpair
32 46 0.0 1 colorpair
33 45 0.0 1 colorpair
34 44 0.0 1 colorpair
35 43 0.0 1 colorpair
36 42 0.0 1 colorpair
75 87 0.0 1 colorpair
76 86 0.0 1 colorpair
77 85 0.0 1 colorpair
78 84 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
