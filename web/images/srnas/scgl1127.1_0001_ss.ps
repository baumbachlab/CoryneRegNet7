%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu May 14 18:19:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_UUCAUAAACACGGGUGCUCGGUGAAAAUCCGGGCUGAGAUCUGGCAAAGCCACGACCGUAGAACCUGAUCCGGAUAAUGCCGGCGAUAGGGAGGAAAAAUAUGGCAAAU\
) } def
/len { sequence length } bind def

/coor [
[180.43275452 204.88464355]
[175.12580872 199.70115662]
[170.46148682 193.93043518]
[166.50427246 187.65168762]
[163.30900574 180.95114136]
[160.91999817 173.92085266]
[159.37054443 166.65748596]
[158.68234253 159.26095581]
[158.86528015 151.83303833]
[159.91720581 144.47601318]
[161.82403564 137.29121399]
[148.24441528 130.91989136]
[134.66477966 124.54856873]
[121.08515930 118.17724609]
[104.16828156 131.25254822]
[80.28395844 129.18415833]
[62.29844666 109.62349701]
[47.37198257 111.10695648]
[32.44551849 112.59041595]
[17.51905441 114.07387543]
[2.59258914 115.55733490]
[-12.33387566 117.04079437]
[-21.00153160 130.05639648]
[-36.02206421 134.40582275]
[-50.30324173 128.03541565]
[-57.10192490 113.95309448]
[-53.20798492 98.80809021]
[-40.46002197 89.75141144]
[-24.87723351 91.05934143]
[-13.81733513 102.11432648]
[1.10912955 100.63086700]
[16.03559494 99.14740753]
[30.96205902 97.66394806]
[45.88852310 96.18048859]
[60.81498718 94.69702911]
[64.56498718 88.20184326]
[50.75457382 82.34757233]
[36.49362946 77.69725037]
[35.45264435 62.73341751]
[48.93232727 56.15327835]
[60.08983612 66.17842865]
[72.06498718 75.21145630]
[75.81498718 68.71627045]
[69.63646698 55.04784012]
[63.45795059 41.37941360]
[57.27943039 27.71098709]
[45.24567795 15.76841259]
[53.39025497 0.89890796]
[69.93329620 4.60890436]
[70.94786072 21.53246880]
[77.12638092 35.20089722]
[83.30489349 48.86932373]
[89.48341370 62.53775024]
[108.20153809 64.80036926]
[122.29411316 75.16384125]
[128.88824463 89.88877106]
[127.45647430 104.59762573]
[141.03610229 110.96894073]
[154.61573792 117.34026337]
[168.19535828 123.71157837]
[187.29681396 104.29779053]
[212.75050354 94.71739197]
[239.83573914 96.71279144]
[263.54367065 109.88269043]
[279.50354004 131.76229858]
[293.84603882 127.36996460]
[308.18853760 122.97762299]
[322.53103638 118.58528137]
[330.38369751 103.03228760]
[346.71273804 97.99901581]
[361.37103271 106.10721588]
[375.58349609 101.31075287]
[389.79592896 96.51429749]
[404.00839233 91.71784210]
[410.79806519 77.44631958]
[425.71829224 72.23464203]
[439.91723633 79.17479706]
[444.97088623 94.14932251]
[437.88098145 108.27408600]
[422.85388184 113.16912842]
[408.80487061 105.93029785]
[394.59240723 110.72675323]
[380.37994385 115.52321625]
[366.16748047 120.31967163]
[362.07382202 132.62680054]
[351.45379639 140.40805054]
[338.09423828 140.60842896]
[326.92337036 132.92778015]
[312.58087158 137.32012939]
[298.23837280 141.71246338]
[283.89587402 146.10481262]
[284.78656006 153.43383789]
[284.81265259 160.81845093]
[283.97344971 168.15695190]
[282.28009033 175.34828186]
[279.75546265 182.29336548]
[276.43402100 188.89643860]
[272.36108398 195.06643677]
[267.59243774 200.71818542]
[262.19338989 205.77365112]
[256.23800659 210.16293335]
[249.80802917 213.82528687]
[242.99180603 216.70994568]
[235.88299561 218.77685547]
[228.57936096 219.99717712]
[221.18138123 220.35369873]
[213.79089355 219.84115601]
[206.50964355 218.46617126]
[199.43795776 216.24731445]
[192.67329407 213.21473694]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 60]
[12 59]
[13 58]
[14 57]
[17 35]
[18 34]
[19 33]
[20 32]
[21 31]
[22 30]
[43 53]
[44 52]
[45 51]
[46 50]
[65 91]
[66 90]
[67 89]
[68 88]
[71 84]
[72 83]
[73 82]
[74 81]
] def

init

% Start Annotations
11 60 0.0 1 colorpair
12 59 0.0 1 colorpair
13 58 0.0 1 colorpair
14 57 0.0 1 colorpair
17 35 0.0 1 colorpair
18 34 0.0 1 colorpair
19 33 0.0 1 colorpair
20 32 0.0 1 colorpair
21 31 0.0 1 colorpair
22 30 0.0 1 colorpair
43 53 0.0 1 colorpair
44 52 0.0 1 colorpair
45 51 0.0 1 colorpair
46 50 0.0 1 colorpair
65 91 0.0 1 colorpair
66 90 0.0 1 colorpair
67 89 0.0 1 colorpair
68 88 0.0 1 colorpair
71 84 0.0 1 colorpair
72 83 0.0 1 colorpair
73 82 0.0 1 colorpair
74 81 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
