%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu May 14 18:36:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCACGCGACAUCAUCAUCGCACCGGUCGUUUCUGAGAAGUCCUACGGCCUCAUGGAGCAGAACGUUUACACGUUCUUCGUCUCCACUGACGCUAACAAGACUC\
) } def
/len { sequence length } bind def

/coor [
[119.37110901 202.68922424]
[107.60903168 193.38043213]
[98.70697021 181.30760193]
[93.29082489 167.31956482]
[91.74144745 152.39805603]
[96.28643799 138.10319519]
[85.44451141 148.46913147]
[74.60259247 158.83506775]
[63.76066589 169.20100403]
[65.97694397 184.55899048]
[58.71298218 198.27082825]
[44.76192856 205.06404114]
[29.48824120 202.32649231]
[18.76497078 191.11082458]
[16.71542931 175.72970581]
[24.12771034 162.09747314]
[38.15163803 155.45600891]
[53.39472580 158.35908508]
[64.23664856 147.99314880]
[75.07857513 137.62721252]
[85.92049408 127.26126862]
[85.58400726 119.76882172]
[72.27008057 112.85945892]
[84.91103363 104.78392029]
[84.57455444 97.29147339]
[72.84707642 87.93912506]
[61.11960602 78.58678436]
[49.39213562 69.23443604]
[37.66466141 59.88208771]
[25.93718910 50.52973938]
[7.35091972 53.45367050]
[-7.32602596 42.19146347]
[-9.24522400 24.10787010]
[-21.51101494 15.47361469]
[-37.88375473 14.54331398]
[-45.02182770 -0.22082977]
[-35.58219910 -13.63073063]
[-19.27554703 -11.89143276]
[-12.87675858 3.20782399]
[-0.61096764 11.84208012]
[10.12582970 7.45092583]
[21.75961685 8.87785721]
[31.31204987 15.87653255]
[36.27968597 26.75915909]
[35.28953552 38.80226898]
[47.01700974 48.15461349]
[58.74448013 57.50696182]
[70.47195435 66.85930634]
[82.19942474 76.21165466]
[93.92689514 85.56400299]
[108.86650848 86.90859222]
[122.07544708 79.80056000]
[135.28437805 72.69253540]
[148.38549805 65.38770294]
[161.37588501 57.88769913]
[174.36625671 50.38769913]
[187.35664368 42.88769913]
[200.34703064 35.38769913]
[213.22375488 27.69421005]
[225.74235535 19.43075562]
[238.00814819 10.79650021]
[250.27394104 2.16224408]
[262.53973389 -6.47201204]
[274.80551147 -15.10626793]
[287.07131958 -23.74052429]
[299.33709717 -32.37477875]
[305.73590088 -47.47403717]
[322.04254150 -49.21333313]
[331.48217773 -35.80343246]
[324.34408569 -21.03928947]
[307.97134399 -20.10898972]
[295.70556641 -11.47473335]
[283.43978882 -2.84047699]
[271.17398071 5.79377890]
[258.90820312 14.42803478]
[246.64241028 23.06229019]
[234.37661743 31.69654655]
[232.67784119 36.32106781]
[227.96197510 39.85289383]
[221.10900879 40.45441055]
[217.00656128 46.75098801]
[207.84703064 48.37808228]
[194.85664368 55.87808228]
[181.86625671 63.37808228]
[168.87588501 70.87808228]
[155.88549805 78.37808228]
[151.59652710 84.54911041]
[142.39241028 85.90146637]
[129.18347168 93.00949860]
[115.97454071 100.11752319]
[130.97424316 100.21234131]
[145.73709106 97.55562592]
[160.67919922 98.87225342]
[174.74998474 104.06966400]
[186.96012878 112.78242493]
[196.45117188 124.39794922]
[202.55577087 138.09954834]
[204.84472656 152.92387390]
[203.15710449 167.82864380]
[197.61155701 181.76588440]
[188.59800720 193.75570679]
[176.75016785 202.95509338]
[162.90106201 208.71725464]
[148.02442932 210.63703918]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 21]
[7 20]
[8 19]
[9 18]
[25 50]
[26 49]
[27 48]
[28 47]
[29 46]
[30 45]
[33 40]
[34 39]
[51 90]
[52 89]
[53 88]
[54 86]
[55 85]
[56 84]
[57 83]
[58 82]
[59 80]
[60 77]
[61 76]
[62 75]
[63 74]
[64 73]
[65 72]
[66 71]
] def

init

% Start Annotations
6 21 0.0 1 colorpair
7 20 0.0 1 colorpair
8 19 0.0 1 colorpair
9 18 0.0 1 colorpair
25 50 0.0 1 colorpair
26 49 0.0 1 colorpair
27 48 0.0 1 colorpair
28 47 0.0 1 colorpair
29 46 0.0 1 colorpair
30 45 0.0 1 colorpair
33 40 0.0 1 colorpair
34 39 0.0 1 colorpair
51 90 0.0 1 colorpair
52 89 0.0 1 colorpair
53 88 0.0 1 colorpair
54 86 0.0 1 colorpair
55 85 0.0 1 colorpair
56 84 0.0 1 colorpair
57 83 0.0 1 colorpair
58 82 0.0 1 colorpair
59 80 0.0 1 colorpair
60 77 0.0 1 colorpair
61 76 0.0 1 colorpair
62 75 0.0 1 colorpair
63 74 0.0 1 colorpair
64 73 0.0 1 colorpair
65 72 0.0 1 colorpair
66 71 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
