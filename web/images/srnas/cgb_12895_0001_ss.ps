%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu May 14 18:35:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAGUGGGCACGGUGUCCUUCGGUGUUGCCAUGGGUGCGGCAAUCCUGGUGACACUCGUGCCCUUAAUCUUUGGGUUCCUAGCGG\
) } def
/len { sequence length } bind def

/coor [
[105.77332306 177.64735413]
[103.07975006 162.89117432]
[100.38616943 148.13499451]
[97.69258881 133.37882996]
[77.72981262 121.50357819]
[71.55998230 100.96721649]
[80.14643097 83.28112793]
[71.95414734 70.71583557]
[63.76185989 58.15055084]
[55.56957626 45.58526230]
[47.37728882 33.01997375]
[39.18500137 20.45468521]
[30.99271774 7.88939857]
[22.57491112 -4.52593660]
[13.93432903 -16.78727150]
[5.29374695 -29.04860687]
[-3.34683537 -41.30994034]
[-11.98741722 -53.57127762]
[-24.67952919 -56.60337067]
[-31.59907913 -67.18747711]
[-29.42752266 -79.23468018]
[-37.61980820 -91.79997253]
[-45.81209183 -104.36525726]
[-54.00437927 -116.93054199]
[-68.02280426 -124.26500702]
[-68.49240875 -139.15220642]
[-76.68469238 -151.71749878]
[-84.87697601 -164.28279114]
[-93.06925964 -176.84806824]
[-101.26155090 -189.41336060]
[-109.45383453 -201.97865295]
[-124.95730591 -202.62825012]
[-137.09710693 -212.29286194]
[-141.20524597 -227.25624084]
[-135.70205688 -241.76466370]
[-122.70362854 -250.23934937]
[-107.20811462 -249.42161560]
[-95.17386627 -239.62586975]
[-91.22828674 -224.61880493]
[-96.88854980 -210.17092896]
[-88.69625854 -197.60565186]
[-80.50397491 -185.04035950]
[-72.31169128 -172.47506714]
[-64.11940765 -159.90979004]
[-55.92712021 -147.34449768]
[-42.49466324 -140.90878296]
[-41.43909073 -125.12283325]
[-33.24680710 -112.55754089]
[-25.05451965 -99.99225616]
[-16.86223412 -87.42696381]
[-0.85449070 -80.48281097]
[0.27391747 -62.21186066]
[8.91449928 -49.95052338]
[17.55508232 -37.68918991]
[26.19566345 -25.42785454]
[34.83624649 -13.16651917]
[41.41448593 -9.42707634]
[43.55800629 -0.30288726]
[51.75028992 12.26240063]
[59.94257736 24.82768822]
[68.13486481 37.39297485]
[76.32714844 49.95826340]
[84.51943207 62.52355194]
[92.71171570 75.08883667]
[106.82447815 73.01847839]
[120.89439392 78.88298798]
[130.53471375 91.93155670]
[132.21009827 109.05429077]
[145.20046997 116.55429077]
[158.19085693 124.05429077]
[174.58106995 123.51319885]
[183.01387024 137.57806396]
[174.81428528 151.78013611]
[158.41737366 151.50955200]
[150.69085693 137.04466248]
[137.70046997 129.54466248]
[124.71009827 122.04467010]
[112.44876099 130.68525696]
[115.14234161 145.44142151]
[117.83592224 160.19760132]
[120.52949524 174.95376587]
[133.67082214 183.73335266]
[136.67304993 199.24987793]
[127.75500488 212.29763794]
[112.20761871 215.13565063]
[99.25486755 206.08015442]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 81]
[2 80]
[3 79]
[4 78]
[7 64]
[8 63]
[9 62]
[10 61]
[11 60]
[12 59]
[13 58]
[14 56]
[15 55]
[16 54]
[17 53]
[18 52]
[21 50]
[22 49]
[23 48]
[24 47]
[26 45]
[27 44]
[28 43]
[29 42]
[30 41]
[31 40]
[68 77]
[69 76]
[70 75]
] def

init

% Start Annotations
1 81 0.0 1 colorpair
2 80 0.0 1 colorpair
3 79 0.0 1 colorpair
4 78 0.0 1 colorpair
7 64 0.0 1 colorpair
8 63 0.0 1 colorpair
9 62 0.0 1 colorpair
10 61 0.0 1 colorpair
11 60 0.0 1 colorpair
12 59 0.0 1 colorpair
13 58 0.0 1 colorpair
14 56 0.0 1 colorpair
15 55 0.0 1 colorpair
16 54 0.0 1 colorpair
17 53 0.0 1 colorpair
18 52 0.0 1 colorpair
21 50 0.0 1 colorpair
22 49 0.0 1 colorpair
23 48 0.0 1 colorpair
24 47 0.0 1 colorpair
26 45 0.0 1 colorpair
27 44 0.0 1 colorpair
28 43 0.0 1 colorpair
29 42 0.0 1 colorpair
30 41 0.0 1 colorpair
31 40 0.0 1 colorpair
68 77 0.0 1 colorpair
69 76 0.0 1 colorpair
70 75 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
