%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu May 14 18:36:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGCGACCUCGCGUUUUAUGAAGGCACCAGGGCGCUACGGCUGGUUCGAACCCAGCUAGGACCACAACUAAACCCCCUGUAAACAGGGGGUU\
) } def
/len { sequence length } bind def

/coor [
[88.26627350 145.31831360]
[70.27225494 136.16201782]
[57.80781937 120.27930450]
[43.42193222 124.52738953]
[29.03604317 128.77546692]
[17.99210739 140.10429382]
[3.59465289 136.28819275]
[-10.79123592 140.53627014]
[-25.17712402 144.78436279]
[-38.14492035 160.03585815]
[-56.74340439 155.21788025]
[-70.80968475 160.42745972]
[-81.06362152 172.47599792]
[-95.68585205 169.64057922]
[-109.75213623 174.85015869]
[-123.81842041 180.05973816]
[-136.57167053 191.23072815]
[-150.83653259 182.06831360]
[-145.98109436 165.82450867]
[-129.02799988 165.99345398]
[-114.96171570 160.78387451]
[-100.89543152 155.57429504]
[-91.64761353 143.89837646]
[-76.01926422 146.36117554]
[-61.95298386 141.15159607]
[-58.42127228 131.29525757]
[-49.80121613 124.96937561]
[-38.89538574 124.53861237]
[-29.42520714 130.39846802]
[-15.03931808 126.15038300]
[-0.65342969 121.90230560]
[9.36153221 110.87734222]
[24.78796196 114.38958740]
[39.17385101 110.14150238]
[53.55973816 105.89341736]
[55.05118561 86.92198944]
[63.97053528 70.11174011]
[78.84384918 58.24060059]
[97.21326447 53.27030563]
[98.73078918 38.34726334]
[100.24831390 23.42422485]
[101.76583862 8.50118542]
[103.28336334 -6.42185450]
[104.80088806 -21.34489441]
[93.77117920 -32.42999649]
[92.49881744 -48.01573181]
[101.58456421 -60.74298859]
[116.73842621 -64.60234833]
[130.80519104 -57.77154160]
[137.14299011 -43.47586060]
[132.75927734 -28.46529388]
[119.72393036 -19.82736969]
[118.20640564 -4.90432978]
[116.68888092 10.01871014]
[115.17135620 24.94174957]
[113.65383148 39.86479187]
[112.13630676 54.78783035]
[118.26963043 56.89952469]
[124.05216217 59.83877945]
[129.37287903 63.54915237]
[134.12960815 67.95940399]
[138.23104858 72.98486328]
[141.59840393 78.52902222]
[144.16705322 84.48544312]
[145.88766479 90.73975372]
[146.72720337 97.17186737]
[146.66955566 103.65827942]
[145.71582031 110.07445526]
[143.88430786 116.29718781]
[141.21017456 122.20700836]
[137.74479675 127.69043732]
[148.26144409 138.38623047]
[158.77809143 149.08203125]
[169.29475403 159.77783203]
[179.81140137 170.47363281]
[190.32804871 181.16941833]
[200.84469604 191.86521912]
[211.36134338 202.56101990]
[221.87800598 213.25682068]
[237.81779480 217.11102295]
[242.18966675 232.91667175]
[230.49620056 244.41427612]
[214.76664734 239.77607727]
[211.18220520 223.77346802]
[200.66555786 213.07766724]
[190.14891052 202.38186646]
[179.63224792 191.68608093]
[169.11560059 180.99028015]
[158.59895325 170.29447937]
[148.08230591 159.59867859]
[137.56565857 148.90289307]
[127.04900360 138.20709229]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 35]
[4 34]
[5 33]
[7 31]
[8 30]
[9 29]
[11 25]
[12 24]
[14 22]
[15 21]
[16 20]
[39 57]
[40 56]
[41 55]
[42 54]
[43 53]
[44 52]
[71 92]
[72 91]
[73 90]
[74 89]
[75 88]
[76 87]
[77 86]
[78 85]
[79 84]
] def

init

% Start Annotations
3 35 0.0 1 colorpair
4 34 0.0 1 colorpair
5 33 0.0 1 colorpair
7 31 0.0 1 colorpair
8 30 0.0 1 colorpair
9 29 0.0 1 colorpair
11 25 0.0 1 colorpair
12 24 0.0 1 colorpair
14 22 0.0 1 colorpair
15 21 0.0 1 colorpair
16 20 0.0 1 colorpair
39 57 0.0 1 colorpair
40 56 0.0 1 colorpair
41 55 0.0 1 colorpair
42 54 0.0 1 colorpair
43 53 0.0 1 colorpair
44 52 0.0 1 colorpair
71 92 0.0 1 colorpair
72 91 0.0 1 colorpair
73 90 0.0 1 colorpair
74 89 0.0 1 colorpair
75 88 0.0 1 colorpair
76 87 0.0 1 colorpair
77 86 0.0 1 colorpair
78 85 0.0 1 colorpair
79 84 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
