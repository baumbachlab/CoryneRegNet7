%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu May 14 18:19:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_______CCACGGGAAGGGGGUCCACCCUGAAAAGGCUGAGAUCACACCCGUUGAACCUGCUCUAGCUCGUACUAGCGAAGGGAUGGCCAUAACAUGGCU_\
) } def
/len { sequence length } bind def

/coor [
[-85.33271790 259.20825195]
[-89.51080322 271.16839600]
[-96.16197968 281.94219971]
[-104.97155762 291.02600098]
[-115.52404022 297.99597168]
[-127.32270813 302.52792358]
[-139.81303406 304.41223145]
[-152.40869141 303.56372070]
[-164.51911926 300.02539062]
[-175.57720947 293.96627808]
[-185.06585693 285.67337036]
[-192.54211426 275.53805542]
[-206.35569763 281.38485718]
[-220.16928101 287.23162842]
[-233.98286438 293.07843018]
[-247.79644775 298.92523193]
[-255.12991333 313.19406128]
[-270.88586426 316.21560669]
[-282.97766113 305.67199707]
[-282.12954712 289.65136719]
[-268.99209595 280.44338989]
[-253.64323425 285.11163330]
[-239.82965088 279.26486206]
[-226.01606750 273.41806030]
[-212.20248413 267.57125854]
[-198.38890076 261.72448730]
[-200.53437805 244.28096008]
[-197.36863708 226.97702026]
[-189.17123413 211.39433289]
[-176.68208313 198.96015930]
[-161.03468323 190.81665039]
[-143.65324402 187.71591187]
[-126.12309265 189.95059204]
[-110.04601288 197.32621765]
[-96.89396667 209.17814636]
[-84.14070892 201.28166199]
[-71.38745117 193.38517761]
[-58.63419342 185.48869324]
[-45.88093567 177.59220886]
[-49.62542343 163.74971008]
[-49.29318237 149.39752197]
[-44.90238190 135.71264648]
[-36.80439758 123.81988525]
[-25.65570259 114.69944000]
[-12.36465168 109.10614014]
[1.98252010 107.50695038]
[16.21047020 110.04198456]
[29.15103340 116.51234436]
[39.73914337 126.39560699]
[52.72952271 118.89560699]
[65.71990204 111.39560699]
[78.71028900 103.89560699]
[91.70066833 96.39560699]
[93.25062561 92.65035248]
[96.52061462 89.66090393]
[101.10658264 88.21266937]
[106.25415802 88.86695099]
[119.88113403 82.59754181]
[133.50811768 76.32814026]
[142.81120300 63.53114700]
[157.60737610 65.24072266]
[166.91047668 52.44372559]
[181.70663452 54.15330124]
[195.33361816 47.88389587]
[208.96060181 41.61449051]
[222.58757019 35.34508514]
[227.83335876 20.43678856]
[242.12037659 13.67979336]
[256.97238159 19.08290482]
[263.57794189 33.44055176]
[258.01809692 48.23460007]
[243.59141541 54.68799591]
[228.85697937 48.97206116]
[215.22999573 55.24146652]
[201.60302734 61.51087189]
[187.97604370 67.78028107]
[179.64764404 80.12884521]
[163.87678528 78.86769867]
[155.54838562 91.21626282]
[139.77752686 89.95511627]
[126.15054321 96.22452545]
[112.52355957 102.49392700]
[99.20066833 109.38598633]
[86.21028900 116.88598633]
[73.21990204 124.38598633]
[60.22952271 131.88598633]
[47.23914337 139.38598633]
[50.59305191 154.76193237]
[49.06065369 170.40522766]
[42.80212021 184.80261230]
[32.43422318 196.56503296]
[18.96956825 204.56163025]
[3.71772385 208.02847290]
[-11.84216785 206.64152527]
[-26.20482445 200.54687500]
[-37.98445129 190.34547424]
[-50.73770905 198.24195862]
[-63.49096680 206.13844299]
[-76.24422455 214.03491211]
[-88.99748230 221.93139648]
[-85.06662750 233.99858093]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 26]
[13 25]
[14 24]
[15 23]
[16 22]
[35 100]
[36 99]
[37 98]
[38 97]
[39 96]
[49 87]
[50 86]
[51 85]
[52 84]
[53 83]
[57 82]
[58 81]
[59 80]
[61 78]
[63 76]
[64 75]
[65 74]
[66 73]
] def

init

% Start Annotations
12 26 0.0 0.6 colorpair
13 25 0.16 0.6 colorpair
14 24 0.16 1 colorpair
15 23 0.16 0.6 colorpair
16 22 0.16 0.6 colorpair
35 100 0.0 0.6 colorpair
36 99 0.0 1 colorpair
37 98 0.0 0.6 colorpair
38 97 0.16 1 colorpair
39 96 0.16 1 colorpair
49 87 0.0 1 colorpair
50 86 0.0 0.6 colorpair
51 85 0.0 0.6 colorpair
52 84 0.0 1 colorpair
53 83 0.16 1 colorpair
57 82 0.0 1 colorpair
58 81 0.0 1 colorpair
59 80 0.0 1 colorpair
61 78 0.0 1 colorpair
63 76 0.0 1 colorpair
64 75 0.0 1 colorpair
65 74 0.0 1 colorpair
66 73 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
12 26 1 gmark
13 25 1 gmark
13 cmark
25 cmark
14 cmark
24 cmark
15 23 1 gmark
15 cmark
23 cmark
16 22 1 gmark
16 cmark
22 cmark
35 100 1 gmark
37 98 1 gmark
97 cmark
96 cmark
50 86 1 gmark
51 85 1 gmark
53 cmark

% End Annotations
showpage
end
%%EOF
