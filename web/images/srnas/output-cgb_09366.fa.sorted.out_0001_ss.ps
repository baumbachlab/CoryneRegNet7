%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu May 14 18:36:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGAUGGUGGGUGGUUUCCCCGUCCCUGUCUGCAAUAUGGCCCACAUGAAUGCGGGAGUUUGUGGUUUAAAGUUCUGUUGCACCAAGGAGGUU\
) } def
/len { sequence length } bind def

/coor [
[68.21044159 188.33555603]
[60.51011276 175.46292114]
[61.59079361 160.50415039]
[49.81880188 169.80039978]
[38.04681396 179.09664917]
[26.27482224 188.39289856]
[14.50283146 197.68914795]
[9.57983494 205.62910461]
[2.17859340 207.09144592]
[-9.89745712 215.98913574]
[-21.97350883 224.88684082]
[-25.78919029 240.46952820]
[-40.41114426 247.07089233]
[-54.62265396 239.62693787]
[-57.52186966 223.84802246]
[-46.88476181 211.83837891]
[-30.87120438 212.81079102]
[-18.79515457 203.91308594]
[-6.71910286 195.01539612]
[5.20658302 185.91714478]
[16.97857285 176.62089539]
[28.75056458 167.32464600]
[40.52255630 158.02841187]
[52.29454422 148.73216248]
[62.72243118 137.94979858]
[71.62013245 125.87374878]
[80.51782227 113.79769897]
[76.12780762 99.77583313]
[80.78036499 85.83887482]
[92.71315002 77.26602936]
[107.40612793 77.30460358]
[116.30381775 65.22855377]
[125.20151520 53.15250397]
[134.09921265 41.07645035]
[142.99690247 29.00040054]
[151.89460754 16.92435074]
[160.79229736 4.84829950]
[162.74922180 -10.85141563]
[176.52784729 -16.50815201]
[185.42553711 -28.58420181]
[194.32324219 -40.66025162]
[201.96748352 -53.56627655]
[208.28150940 -67.17263794]
[214.59553528 -80.77900696]
[220.90954590 -94.38536835]
[227.22357178 -107.99172974]
[216.90745544 -119.15622711]
[211.65374756 -133.42042542]
[212.26364136 -148.60911560]
[218.64408875 -162.40615845]
[229.82215881 -172.70758057]
[244.09324646 -177.94250488]
[259.28112793 -177.31263733]
[273.06976318 -170.91404724]
[283.35647583 -159.72244263]
[288.57263184 -145.44447327]
[287.92279053 -130.25744629]
[281.50604248 -116.47723389]
[270.30090332 -106.20525360]
[256.01611328 -101.00788879]
[240.82994080 -101.67771149]
[234.51591492 -88.07134247]
[228.20188904 -74.46498108]
[221.88787842 -60.85861969]
[215.57385254 -47.25225449]
[230.30622864 -50.07307816]
[242.88821411 -41.90645599]
[246.31033325 -27.30203819]
[238.66613770 -14.39598942]
[224.21420288 -10.37830830]
[211.00576782 -17.48725700]
[206.39929199 -31.76255608]
[197.50158691 -19.68650627]
[188.60389709 -7.61045504]
[187.28340149 7.22550011]
[172.86834717 13.74599552]
[163.97065735 25.82204628]
[155.07295227 37.89809799]
[146.17526245 49.97414780]
[137.27757263 62.05019760]
[128.37986755 74.12625122]
[119.48217773 86.20230103]
[123.87219238 100.22416687]
[119.21963501 114.16112518]
[107.28684998 122.73397064]
[92.59387207 122.69539642]
[83.69618225 134.77145386]
[74.79848480 146.84750366]
[89.71509552 145.26803589]
[102.83716583 152.53517151]
[109.41262054 166.01713562]
[107.06018829 180.83152771]
[96.63179779 191.61338806]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 24]
[4 23]
[5 22]
[6 21]
[7 20]
[9 19]
[10 18]
[11 17]
[25 88]
[26 87]
[27 86]
[31 82]
[32 81]
[33 80]
[34 79]
[35 78]
[36 77]
[37 76]
[39 74]
[40 73]
[41 72]
[42 65]
[43 64]
[44 63]
[45 62]
[46 61]
] def

init

% Start Annotations
3 24 0.0 1 colorpair
4 23 0.0 1 colorpair
5 22 0.0 1 colorpair
6 21 0.0 1 colorpair
7 20 0.0 1 colorpair
9 19 0.0 1 colorpair
10 18 0.0 1 colorpair
11 17 0.0 1 colorpair
25 88 0.0 1 colorpair
26 87 0.0 1 colorpair
27 86 0.0 1 colorpair
31 82 0.0 1 colorpair
32 81 0.0 1 colorpair
33 80 0.0 1 colorpair
34 79 0.0 1 colorpair
35 78 0.0 1 colorpair
36 77 0.0 1 colorpair
37 76 0.0 1 colorpair
39 74 0.0 1 colorpair
40 73 0.0 1 colorpair
41 72 0.0 1 colorpair
42 65 0.0 1 colorpair
43 64 0.0 1 colorpair
44 63 0.0 1 colorpair
45 62 0.0 1 colorpair
46 61 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
