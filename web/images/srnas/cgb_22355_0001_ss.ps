%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu May 14 18:36:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAGGUUUGGGGUGCUCGGCCGGUUCGUUUCCGUUUCAAUUUUCGAGGCUGUCACGUUUGCCCAACGUGAGUUGGGGUUUGCACAGUCAAC\
) } def
/len { sequence length } bind def

/coor [
[101.31274414 114.84546661]
[94.93522644 128.42218018]
[88.55770874 141.99890137]
[82.18019104 155.57562256]
[84.10187531 171.86178589]
[70.79846191 181.45089722]
[55.95535660 174.47851562]
[54.84187317 158.11721802]
[68.60346985 149.19810486]
[74.98098755 135.62138367]
[81.35850525 122.04467010]
[87.73602295 108.46794891]
[84.96513367 93.72609711]
[74.09324646 83.39159393]
[63.22135162 73.05709076]
[50.19772339 72.57013702]
[41.34297562 63.56526947]
[41.09262085 51.34232330]
[30.57597160 40.64653015]
[20.05932236 29.95073128]
[9.54267120 19.25493431]
[-0.97397888 8.55913830]
[-6.41817617 7.07776022]
[-10.24572086 3.87904668]
[-12.06225014 -0.06974140]
[-11.94447327 -3.79162312]
[-21.32509041 -15.49649525]
[-30.70570755 -27.20136642]
[-45.05505371 -22.31546402]
[-60.21004105 -22.63508415]
[-74.34062958 -28.12163353]
[-85.74048615 -38.11258698]
[-93.03302002 -51.40148163]
[-95.33761597 -66.38362885]
[-92.37599182 -81.24984741]
[-84.50577545 -94.20498657]
[-72.67733765 -103.68463135]
[-58.31901169 -108.54408264]
[-43.16463852 -108.19653320]
[-29.04418182 -102.68395233]
[-17.66275978 -92.67201233]
[-10.39472961 -79.36969757]
[-8.11774349 -64.38333130]
[-11.10675812 -49.52259064]
[-19.00083542 -36.58198547]
[-9.62021828 -24.87711143]
[-0.23960122 -13.17224026]
[9.72181797 -1.95751178]
[20.23846817 8.73828506]
[30.75511932 19.43408203]
[41.27177048 30.12987900]
[51.78841782 40.82567596]
[68.86209869 44.47897339]
[73.55585480 62.18519974]
[84.42774963 72.51970673]
[95.29963684 82.85420990]
[120.66058350 87.94591522]
[135.65844727 88.19926453]
[145.55285645 74.60329437]
[161.42118835 69.56066132]
[177.03665161 74.84518433]
[186.39244080 88.21788788]
[201.39030457 87.96454620]
[216.38815308 87.71120453]
[231.38601685 87.45786285]
[246.38388062 87.20452118]
[261.38174438 86.95117950]
[275.15722656 78.05355072]
[289.62512207 85.77442169]
[289.90209961 102.17123413]
[275.70321655 110.37634277]
[261.63507080 101.94904327]
[246.63722229 102.20238495]
[231.63935852 102.45572662]
[216.64149475 102.70906830]
[201.64364624 102.96240997]
[186.64578247 103.21575165]
[179.95243835 114.89852142]
[168.24000549 121.75798035]
[154.55839539 121.88233948]
[142.53323364 115.13029480]
[135.40510559 103.19712067]
[120.40724182 102.94377899]
[135.36489868 104.06997681]
[147.93672180 112.25224304]
[155.02272034 125.47299957]
[154.87567139 140.47227478]
[147.53179932 153.55155945]
[134.80198669 161.48576355]
[119.82511139 162.31848145]
[106.29418945 155.84436035]
[97.54566193 143.65982056]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 12]
[2 11]
[3 10]
[4 9]
[13 56]
[14 55]
[15 54]
[18 52]
[19 51]
[20 50]
[21 49]
[22 48]
[26 47]
[27 46]
[28 45]
[57 83]
[58 82]
[62 77]
[63 76]
[64 75]
[65 74]
[66 73]
[67 72]
] def

init

% Start Annotations
1 12 0.0 1 colorpair
2 11 0.0 1 colorpair
3 10 0.0 1 colorpair
4 9 0.0 1 colorpair
13 56 0.0 1 colorpair
14 55 0.0 1 colorpair
15 54 0.0 1 colorpair
18 52 0.0 1 colorpair
19 51 0.0 1 colorpair
20 50 0.0 1 colorpair
21 49 0.0 1 colorpair
22 48 0.0 1 colorpair
26 47 0.0 1 colorpair
27 46 0.0 1 colorpair
28 45 0.0 1 colorpair
57 83 0.0 1 colorpair
58 82 0.0 1 colorpair
62 77 0.0 1 colorpair
63 76 0.0 1 colorpair
64 75 0.0 1 colorpair
65 74 0.0 1 colorpair
66 73 0.0 1 colorpair
67 72 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
