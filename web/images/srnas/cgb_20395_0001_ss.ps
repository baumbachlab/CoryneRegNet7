%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu May 14 18:36:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUAGCGUCGGAUCGUAGACAGAGUGGGAUUUGCAUCGUAGUGCUCAAAUUGAGAAAUAGCACUCUGGGAAACGCCCAUCCGAUUAGCC\
) } def
/len { sequence length } bind def

/coor [
[102.19987488 329.59698486]
[86.48216248 327.94497681]
[76.60126495 315.61035156]
[78.41934967 299.91098022]
[90.85777283 290.16104126]
[92.42569733 275.24322510]
[93.47204590 260.27975464]
[93.99553680 245.28889465]
[94.51903534 230.29801941]
[95.04252625 215.30715942]
[95.56601715 200.31629944]
[96.08950806 185.32543945]
[96.61299896 170.33457947]
[96.35121918 155.33685303]
[95.30487061 140.37339783]
[94.25852203 125.40993500]
[80.37938690 117.13654327]
[74.04861450 102.27045441]
[77.70173645 86.53088379]
[89.93335724 75.97309113]
[88.36543274 61.05526352]
[86.79750061 46.13743591]
[85.22957611 31.21960831]
[83.66165161 16.30177879]
[82.09372711 1.38395083]
[80.52579498 -13.53387737]
[68.52719879 -23.46722221]
[67.14960480 -38.61835861]
[76.69347382 -49.99597549]
[75.12554932 -64.91380310]
[73.55762482 -79.83162689]
[70.52725983 -83.62959290]
[69.15695953 -87.79250336]
[69.33908844 -91.70248413]
[70.76001740 -94.85359192]
[72.96109772 -96.91390991]
[73.48458862 -111.90477753]
[66.23361969 -125.96656799]
[74.41038513 -138.41606140]
[74.93387604 -153.40692139]
[75.45736694 -168.39778137]
[75.98085785 -183.38864136]
[65.02041626 -194.77478027]
[65.40495300 -210.57440186]
[76.90634155 -221.41384888]
[92.70100403 -220.86228943]
[103.41824341 -209.24694824]
[102.69972229 -193.45899963]
[90.97172546 -182.86515808]
[90.44822693 -167.87429810]
[89.92473602 -152.88342285]
[89.40124512 -137.89256287]
[96.68965912 -124.90302277]
[88.47544861 -111.38127899]
[87.95195770 -96.39041901]
[88.47544861 -81.39955902]
[90.04338074 -66.48172760]
[91.61130524 -51.56389999]
[103.31215668 -42.41919708]
[105.11476898 -27.31273270]
[95.44362640 -15.10180473]
[97.01155090 -0.18397607]
[98.57947540 14.73385239]
[100.14740753 29.65167999]
[101.71533203 44.56950760]
[103.28325653 59.48733902]
[104.85118866 74.40516663]
[116.89751434 80.17315674]
[124.50218201 91.15280914]
[125.66623688 104.45802307]
[120.08369446 116.59140778]
[109.22198486 124.36359406]
[110.26832581 139.32705688]
[111.31467438 154.29051208]
[114.50688934 158.97412109]
[115.33517456 163.91448975]
[114.13314056 168.10873413]
[111.60386658 170.85806274]
[111.08037567 185.84892273]
[110.55687714 200.83979797]
[110.03338623 215.83065796]
[109.50989532 230.82151794]
[108.98640442 245.81237793]
[108.46291351 260.80325317]
[111.37538147 267.13491821]
[110.59947205 273.04629517]
[107.34352875 276.81112671]
[105.77560425 291.72897339]
[115.91509247 303.85192871]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 88]
[6 87]
[7 84]
[8 83]
[9 82]
[10 81]
[11 80]
[12 79]
[13 78]
[14 74]
[15 73]
[16 72]
[20 67]
[21 66]
[22 65]
[23 64]
[24 63]
[25 62]
[26 61]
[29 58]
[30 57]
[31 56]
[36 55]
[37 54]
[39 52]
[40 51]
[41 50]
[42 49]
] def

init

% Start Annotations
5 88 0.0 1 colorpair
6 87 0.0 1 colorpair
7 84 0.0 1 colorpair
8 83 0.0 1 colorpair
9 82 0.0 1 colorpair
10 81 0.0 1 colorpair
11 80 0.0 1 colorpair
12 79 0.0 1 colorpair
13 78 0.0 1 colorpair
14 74 0.0 1 colorpair
15 73 0.0 1 colorpair
16 72 0.0 1 colorpair
20 67 0.0 1 colorpair
21 66 0.0 1 colorpair
22 65 0.0 1 colorpair
23 64 0.0 1 colorpair
24 63 0.0 1 colorpair
25 62 0.0 1 colorpair
26 61 0.0 1 colorpair
29 58 0.0 1 colorpair
30 57 0.0 1 colorpair
31 56 0.0 1 colorpair
36 55 0.0 1 colorpair
37 54 0.0 1 colorpair
39 52 0.0 1 colorpair
40 51 0.0 1 colorpair
41 50 0.0 1 colorpair
42 49 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
