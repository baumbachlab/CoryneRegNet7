%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu May 14 18:19:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUAGUGACACGGGGUGCAAAAGCACUUUCACAAAGCUUUCGCUGAGAUUACACCCGUCGAACCUGAUCCAGUUAGUACUGGCGAAGGGACUGUCGCAUUGGACCCAU\
) } def
/len { sequence length } bind def

/coor [
[66.38757324 233.43286133]
[65.99051666 218.27970886]
[70.80303192 203.90559387]
[80.24398804 192.04623413]
[93.17333984 184.13374329]
[90.16752625 169.43798828]
[87.16171265 154.74223328]
[84.15589905 140.04649353]
[81.15007782 125.35073853]
[71.58206177 113.79855347]
[57.70327759 108.10826874]
[43.82449341 102.41797638]
[29.94570923 96.72769165]
[16.06692505 91.03740692]
[1.06692481 91.03740692]
[-12.81185913 96.72769165]
[-26.69064331 102.41797638]
[-40.56942749 108.10826874]
[-50.16585922 121.40640259]
[-66.45096588 119.47576141]
[-72.67201996 104.30241394]
[-62.42934036 91.49539948]
[-46.25971222 94.22948456]
[-32.38092804 88.53919220]
[-18.50214577 82.84890747]
[-4.62336206 77.15862274]
[-3.43942952 69.75265503]
[-18.34727669 68.09251404]
[-32.54468155 72.93334961]
[-44.01362991 63.26571274]
[-41.64502335 48.45390320]
[-27.73315430 42.84499359]
[-15.75399590 51.87051392]
[-1.07156479 54.94073105]
[0.11236766 47.53476715]
[-11.30073833 37.80126572]
[-22.71384430 28.06776619]
[-38.92997742 25.62459564]
[-44.66950989 10.26263523]
[-34.02810287 -2.21504498]
[-17.95272446 1.02752161]
[-12.98034477 16.65466118]
[-1.56723869 26.38816071]
[9.84586716 36.12165833]
[19.51595879 24.65478134]
[33.38656235 18.94458008]
[48.32701111 20.27987862]
[60.96516800 28.35929298]
[68.44853973 41.35926056]
[69.08809662 56.34561920]
[62.73948288 69.93587494]
[50.83560944 79.06263733]
[36.06324768 81.66595459]
[21.75721169 77.15862274]
[35.63599396 82.84890747]
[49.51477814 88.53919220]
[63.39356232 94.22948456]
[77.27234650 99.91976929]
[92.16776276 81.49949646]
[112.10302734 87.42606354]
[118.68074036 73.30616760]
[132.99159241 68.14337921]
[146.41221619 74.50123596]
[160.44921875 69.21327209]
[174.48622131 63.92530823]
[178.69271851 49.10601044]
[190.67860413 39.71495819]
[205.71812439 39.18858337]
[218.03628540 47.51929474]
[232.07328796 42.23132706]
[246.11029053 36.94336319]
[260.14727783 31.65539742]
[274.18429565 26.36743355]
[284.15997314 13.35136604]
[300.38265991 15.75051403]
[306.16387939 31.09683800]
[295.55636597 43.60335541]
[279.47225952 40.40443420]
[265.43524170 45.69240189]
[251.39825439 50.98036575]
[237.36125183 56.26832962]
[223.32424927 61.55629730]
[219.56442261 75.94384766]
[207.91577148 85.47133636]
[192.71286011 86.32273865]
[179.77418518 77.96231079]
[165.73718262 83.25027466]
[151.70018005 88.53823853]
[145.81022644 102.17070770]
[131.65003967 107.73341370]
[117.39099121 101.46306610]
[112.18267059 115.97483063]
[95.84583282 122.34492493]
[98.85164642 137.04067993]
[101.85746002 151.73641968]
[104.86328125 166.43217468]
[107.86909485 181.12792969]
[122.86689758 183.32830811]
[136.20617676 190.52825928]
[146.27615356 201.85838318]
[151.86080933 215.95048523]
[152.28579712 231.10287476]
[147.49977112 245.48585510]
[138.08068848 257.36257935]
[125.16593933 265.29888916]
[110.31504059 268.33642578]
[95.32131958 266.10842896]
[81.99533081 258.88388062]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 97]
[6 96]
[7 95]
[8 94]
[9 93]
[10 58]
[11 57]
[12 56]
[13 55]
[14 54]
[15 26]
[16 25]
[17 24]
[18 23]
[35 44]
[36 43]
[37 42]
[60 91]
[63 88]
[64 87]
[65 86]
[69 82]
[70 81]
[71 80]
[72 79]
[73 78]
] def

init

% Start Annotations
5 97 0.0 1 colorpair
6 96 0.0 1 colorpair
7 95 0.0 1 colorpair
8 94 0.0 1 colorpair
9 93 0.0 1 colorpair
10 58 0.0 1 colorpair
11 57 0.0 1 colorpair
12 56 0.0 1 colorpair
13 55 0.0 1 colorpair
14 54 0.0 1 colorpair
15 26 0.0 1 colorpair
16 25 0.0 1 colorpair
17 24 0.0 1 colorpair
18 23 0.0 1 colorpair
35 44 0.0 1 colorpair
36 43 0.0 1 colorpair
37 42 0.0 1 colorpair
60 91 0.0 1 colorpair
63 88 0.0 1 colorpair
64 87 0.0 1 colorpair
65 86 0.0 1 colorpair
69 82 0.0 1 colorpair
70 81 0.0 1 colorpair
71 80 0.0 1 colorpair
72 79 0.0 1 colorpair
73 78 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
