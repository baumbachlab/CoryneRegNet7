%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu May 14 18:36:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGACGGUCUGGUUCGAAAAAAAUUUAAAACUCAUCAUGCAUCCACGUGCUUUGAUGGGAGUCAGGCAGUCCUUUAUCCGAUUGGUACGAG\
) } def
/len { sequence length } bind def

/coor [
[121.16898346 148.77479553]
[118.69825745 144.43357849]
[118.21065521 138.80409241]
[109.56044769 126.54954529]
[100.91024017 114.29499054]
[88.29776764 108.26033783]
[86.83520508 94.35520935]
[78.18500519 82.10066223]
[69.53479767 69.84611511]
[60.88459396 57.59156418]
[52.23439026 45.33701706]
[43.58418274 33.08246994]
[34.93397903 20.82792091]
[26.28377342 8.57337189]
[17.63356972 -3.68117642]
[16.27973747 11.25760365]
[10.03907204 24.89776802]
[-0.37927985 35.68933487]
[-13.79144287 42.40602493]
[-28.67334366 44.28458786]
[-43.33390045 41.11156464]
[-56.10718155 33.24750900]
[-65.54170990 21.58605003]
[-70.56540680 7.45231485]
[-70.60741425 -7.54762602]
[-65.66295624 -21.70927620]
[-56.29389572 -33.42339706]
[-43.56486130 -41.35887146]
[-28.92230797 -44.61396027]
[-14.03011799 -42.81877899]
[-0.58054549 -36.17731857]
[9.89989185 -25.44165802]
[8.87625599 -40.40668869]
[7.85261965 -55.37172318]
[6.82898331 -70.33675385]
[5.80534697 -85.30178833]
[4.78171110 -100.26681519]
[-5.86034822 -115.17382812]
[2.21263051 -130.65359497]
[0.67866826 -145.57495117]
[-0.85529399 -160.49630737]
[-2.38925624 -175.41766357]
[-12.43144321 -188.38249207]
[-5.97506905 -203.45721436]
[10.33810234 -205.13424683]
[19.72647858 -191.68841553]
[12.53210258 -176.95162964]
[14.06606483 -162.03027344]
[15.60002708 -147.10891724]
[17.13398933 -132.18754578]
[26.39177895 -124.19897461]
[27.68063927 -111.63323975]
[19.74674225 -101.29045105]
[20.77037811 -86.32542419]
[21.79401398 -71.36038971]
[22.81765175 -56.39535904]
[23.84128761 -41.43032837]
[24.86492348 -26.46529579]
[29.88811684 -12.33138084]
[38.53832245 -0.07683276]
[47.18852615 12.17771530]
[55.83873367 24.43226433]
[64.48893738 36.68681335]
[73.13914490 48.94136047]
[81.78934479 61.19590759]
[90.43955231 73.45045471]
[99.08975983 85.70500946]
[111.70223236 91.73966217]
[113.16479492 105.64479065]
[121.81499481 117.89933777]
[130.46519470 130.15388489]
[139.73149109 141.94947815]
[149.58953857 153.25517273]
[159.44760132 164.56086731]
[174.80276489 163.32595825]
[187.78898621 171.27651978]
[193.53556824 185.18481445]
[190.03239441 199.63700867]
[199.89045715 210.94270325]
[215.57118225 215.74343872]
[218.98980713 231.78228760]
[206.62956238 242.55987549]
[191.20559692 236.98912048]
[188.58476257 220.80075073]
[178.72669983 209.49505615]
[163.93211365 210.99769592]
[150.93585205 203.41079712]
[144.82763672 189.46292114]
[148.14190674 174.41893005]
[138.28384399 163.11323547]
[128.42579651 151.80754089]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 71]
[4 70]
[5 69]
[7 67]
[8 66]
[9 65]
[10 64]
[11 63]
[12 62]
[13 61]
[14 60]
[15 59]
[32 58]
[33 57]
[34 56]
[35 55]
[36 54]
[37 53]
[39 50]
[40 49]
[41 48]
[42 47]
[72 91]
[73 90]
[74 89]
[78 85]
[79 84]
] def

init

% Start Annotations
3 71 0.0 1 colorpair
4 70 0.0 1 colorpair
5 69 0.0 1 colorpair
7 67 0.0 1 colorpair
8 66 0.0 1 colorpair
9 65 0.0 1 colorpair
10 64 0.0 1 colorpair
11 63 0.0 1 colorpair
12 62 0.0 1 colorpair
13 61 0.0 1 colorpair
14 60 0.0 1 colorpair
15 59 0.0 1 colorpair
32 58 0.0 1 colorpair
33 57 0.0 1 colorpair
34 56 0.0 1 colorpair
35 55 0.0 1 colorpair
36 54 0.0 1 colorpair
37 53 0.0 1 colorpair
39 50 0.0 1 colorpair
40 49 0.0 1 colorpair
41 48 0.0 1 colorpair
42 47 0.0 1 colorpair
72 91 0.0 1 colorpair
73 90 0.0 1 colorpair
74 89 0.0 1 colorpair
78 85 0.0 1 colorpair
79 84 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
