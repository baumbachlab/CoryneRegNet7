%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu May 14 18:36:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGUUAAACCUAUCCAAAAGUUAAAACUGACGGCCAGACUGCCUGAUACCGAGGAACAAAUCACUAAGAAUAUUAGACUGGCUCGUCCGAGAUAAUUGAUUUUUCGAAAGAGAUAAAUCAAGGUUGCAAACAGGAUGAAUAUAGGGAGAGCAC\
) } def
/len { sequence length } bind def

/coor [
[91.69442749 297.13220215]
[88.33554840 281.44470215]
[98.61731720 269.12945557]
[98.61731720 254.12947083]
[98.61731720 239.12947083]
[86.47889709 230.53895569]
[81.66959381 216.27941895]
[86.23233795 201.75238037]
[98.61731720 192.59167480]
[98.61731720 177.59167480]
[98.61731720 162.59167480]
[98.61731720 147.59167480]
[98.61731720 132.59167480]
[92.10941315 128.86378479]
[84.91802979 142.02752686]
[77.20086670 154.89007568]
[64.18507385 147.43426514]
[71.37645721 134.27055359]
[79.09361267 121.40799713]
[72.58570862 117.68009949]
[59.64662552 125.26826477]
[46.70754242 132.85643005]
[33.76846313 140.44458008]
[26.14048576 154.96166992]
[9.74578953 155.34375000]
[1.44983220 141.19775391]
[9.78678322 127.07588196]
[26.18030167 127.50550079]
[39.11938477 119.91734314]
[52.05846405 112.32918549]
[64.99754333 104.74102020]
[74.09052277 83.63040924]
[92.09607697 75.25908661]
[81.38184357 64.76122284]
[70.66761017 54.26335526]
[59.95337296 43.76549149]
[49.23913956 33.26762390]
[39.75783157 38.57298279]
[27.98148918 39.59466553]
[15.90948677 35.40081787]
[5.88414717 26.00288010]
[0.14849661 12.46221638]
[-13.73879147 6.79271603]
[-27.62607956 1.12321568]
[-41.37449265 8.57406616]
[-56.68527222 5.39380693]
[-66.32913208 -6.91594076]
[-65.75254822 -22.54289055]
[-55.22775269 -34.10847473]
[-39.72423935 -36.15177917]
[-26.56229210 -27.70801544]
[-21.95657921 -12.76407242]
[-8.06929111 -7.09457159]
[5.81799698 -1.42507112]
[11.38475323 -6.45112610]
[1.33264315 -17.58463860]
[-8.71946716 -28.71814919]
[-21.72002411 -36.20049667]
[-18.62125778 -50.87693024]
[-3.70556760 -52.46506882]
[2.41404510 -38.77025986]
[12.46615505 -27.63674736]
[22.51826477 -16.50323677]
[28.08502007 -21.52929115]
[23.85903168 -35.92168427]
[19.63304329 -50.31407928]
[15.40705585 -64.70647430]
[2.07217050 -73.62613678]
[0.87531686 -89.62448120]
[12.73461819 -100.42895508]
[28.55263329 -97.75128174]
[36.19513702 -83.64554596]
[29.79944992 -68.93246460]
[34.02544022 -54.54006958]
[38.25142670 -40.14767456]
[42.47741699 -25.75527954]
[65.01622009 -3.27708578]
[59.73700333 22.55339050]
[70.45124054 33.05125427]
[81.16547394 43.54911804]
[91.87970734 54.04698563]
[102.59394073 64.54484558]
[116.98633575 68.77083588]
[131.67529297 65.73202515]
[146.36425781 62.69321060]
[161.05322266 59.65439987]
[175.74218750 56.61558533]
[190.43115234 53.57677078]
[200.87614441 34.48947144]
[221.70890808 29.26346207]
[239.45751953 40.85442734]
[253.76071167 36.33573532]
[268.06390381 31.81704330]
[274.72186279 20.72423172]
[286.77420044 17.27608681]
[297.57617188 22.80395508]
[311.96856689 18.57796669]
[326.36096191 14.35197830]
[340.75335693 10.12598991]
[355.14575195 5.90000153]
[369.53814697 1.67401314]
[383.93054199 -2.55197525]
[394.99185181 -13.86381817]
[409.38342285 -10.02561951]
[423.77581787 -14.25160789]
[431.12908936 -28.24107170]
[446.24526978 -32.85372925]
[460.15621948 -25.35297394]
[464.60879517 -10.18886948]
[456.96139526 3.64198875]
[441.75103760 7.93399858]
[428.00183105 0.14078638]
[413.60943604 4.36677456]
[403.57754517 15.37634659]
[388.15652466 11.84041977]
[373.76412964 16.06640816]
[359.37173462 20.29239655]
[344.97933960 24.51838493]
[330.58694458 28.74437332]
[316.19454956 32.97035980]
[301.80215454 37.19635010]
[290.43218994 50.53015137]
[272.58261108 46.12023926]
[258.27938843 50.63893127]
[243.97621155 55.15762329]
[242.78749084 63.85274887]
[238.78938293 71.71414948]
[232.39982605 77.85678864]
[224.30772400 81.57862854]
[215.39871216 82.44077301]
[206.65824890 80.31905365]
[199.06265259 75.42096710]
[193.46995544 68.26573181]
[178.78100586 71.30455017]
[164.09204102 74.34336090]
[149.40307617 77.38217163]
[134.71411133 80.42098999]
[120.02515411 83.45980072]
[129.02082825 98.00672913]
[127.40166473 116.92193604]
[113.61731720 132.59167480]
[113.61731720 147.59167480]
[113.61731720 162.59167480]
[113.61731720 177.59167480]
[113.61731720 192.59167480]
[126.00229645 201.75238037]
[130.56504822 216.27941895]
[125.75573730 230.53895569]
[113.61731720 239.12947083]
[113.61731720 254.12947083]
[113.61731720 269.12945557]
[123.89908600 281.44470215]
[120.54020691 297.13220215]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 151]
[4 150]
[5 149]
[9 145]
[10 144]
[11 143]
[12 142]
[13 141]
[20 31]
[21 30]
[22 29]
[23 28]
[33 82]
[34 81]
[35 80]
[36 79]
[37 78]
[42 54]
[43 53]
[44 52]
[64 76]
[65 75]
[66 74]
[67 73]
[83 138]
[84 137]
[85 136]
[86 135]
[87 134]
[88 133]
[91 125]
[92 124]
[93 123]
[96 121]
[97 120]
[98 119]
[99 118]
[100 117]
[101 116]
[102 115]
[104 113]
[105 112]
] def

init

% Start Annotations
3 151 0.0 1 colorpair
4 150 0.0 1 colorpair
5 149 0.0 1 colorpair
9 145 0.0 1 colorpair
10 144 0.0 1 colorpair
11 143 0.0 1 colorpair
12 142 0.0 1 colorpair
13 141 0.0 1 colorpair
20 31 0.0 1 colorpair
21 30 0.0 1 colorpair
22 29 0.0 1 colorpair
23 28 0.0 1 colorpair
33 82 0.0 1 colorpair
34 81 0.0 1 colorpair
35 80 0.0 1 colorpair
36 79 0.0 1 colorpair
37 78 0.0 1 colorpair
42 54 0.0 1 colorpair
43 53 0.0 1 colorpair
44 52 0.0 1 colorpair
64 76 0.0 1 colorpair
65 75 0.0 1 colorpair
66 74 0.0 1 colorpair
67 73 0.0 1 colorpair
83 138 0.0 1 colorpair
84 137 0.0 1 colorpair
85 136 0.0 1 colorpair
86 135 0.0 1 colorpair
87 134 0.0 1 colorpair
88 133 0.0 1 colorpair
91 125 0.0 1 colorpair
92 124 0.0 1 colorpair
93 123 0.0 1 colorpair
96 121 0.0 1 colorpair
97 120 0.0 1 colorpair
98 119 0.0 1 colorpair
99 118 0.0 1 colorpair
100 117 0.0 1 colorpair
101 116 0.0 1 colorpair
102 115 0.0 1 colorpair
104 113 0.0 1 colorpair
105 112 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
