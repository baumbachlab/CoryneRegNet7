%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu May 14 18:36:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGUUAUUUCAGUCCGCAUGAAAAAUUUUCACUCAUUCAUCCAAGAUAAACCCGGAUGAUGUGUGUACUUUUCACAACUGCUGCGGACCGCAGUCGCAAAACC\
) } def
/len { sequence length } bind def

/coor [
[102.64569855 345.91235352]
[107.39237213 331.23336792]
[119.33606720 321.46853638]
[117.52801514 306.57791138]
[108.31302643 294.87606812]
[114.33048248 280.24389648]
[112.52243805 265.35324097]
[110.71438599 250.46261597]
[101.49939728 238.76077271]
[107.51685333 224.12858582]
[98.30186462 212.42674255]
[104.31932068 197.79455566]
[102.51127625 182.90393066]
[100.70322418 168.01329041]
[98.89517212 153.12266541]
[97.08712006 138.23202515]
[95.27907562 123.34139252]
[93.47102356 108.45075989]
[90.10166168 93.83407593]
[85.20861816 79.65457916]
[80.31558228 65.47508240]
[75.42253876 51.29558563]
[70.52949524 37.11608887]
[65.63645172 22.93659019]
[53.11863708 20.84641647]
[42.77603149 13.61785793]
[36.58323669 2.70738530]
[35.68959427 -9.73322392]
[40.20636368 -21.28116608]
[49.19721222 -29.71445084]
[45.16923141 -44.16351318]
[41.14125443 -58.61257553]
[29.98235321 -69.82816315]
[34.01779175 -84.16568756]
[29.98981285 -98.61475372]
[25.96183395 -113.06381226]
[20.55745697 -120.63992310]
[22.03747940 -128.01029968]
[18.44774437 -142.57443237]
[14.85800838 -157.13856506]
[11.26827335 -171.70268250]
[7.67853880 -186.26681519]
[-7.19735432 -189.86770630]
[-18.68823051 -199.97801208]
[-24.15357018 -214.27445984]
[-22.33747864 -229.47184753]
[-13.65727997 -242.07791138]
[-0.10762081 -249.19586182]
[15.19788647 -249.19006348]
[28.74214745 -242.06184387]
[37.41279221 -229.44921875]
[39.21736908 -214.25045776]
[33.74119949 -199.95814514]
[22.24266624 -189.85655212]
[25.83240128 -175.29241943]
[29.42213631 -160.72828674]
[33.01187134 -146.16416931]
[36.60160446 -131.60003662]
[40.41089630 -117.09178925]
[44.43887329 -102.64273071]
[48.46685410 -88.19366455]
[59.33764648 -78.01156616]
[55.59031677 -62.64055252]
[59.61829376 -48.19149017]
[63.64627457 -33.74242783]
[80.36157227 -28.47401428]
[90.76177216 -14.17532921]
[90.62325287 3.66016459]
[79.81594849 18.04354858]
[84.70899200 32.22304535]
[89.60203552 46.40254211]
[94.49507904 60.58204269]
[99.38811493 74.76153564]
[104.28115845 88.94103241]
[111.87197876 76.00350952]
[125.91605377 70.73437500]
[140.14358521 75.48596954]
[148.20281982 88.13700104]
[146.49583435 103.03955841]
[135.78466797 113.54055786]
[120.85121155 114.95195007]
[108.36165619 106.64270782]
[110.16970825 121.53334045]
[111.97775269 136.42398071]
[113.78580475 151.31460571]
[115.59385681 166.20524597]
[117.40190887 181.09587097]
[119.20996094 195.98651123]
[128.55427551 208.75343323]
[122.40748596 222.32054138]
[131.75180054 235.08746338]
[125.60501862 248.65457153]
[127.41307068 263.54519653]
[129.22111511 278.43582153]
[138.56542969 291.20275879]
[132.41865540 304.76986694]
[134.22669983 319.66049194]
[148.16020203 326.28326416]
[156.28186035 339.39974976]
[156.00007629 354.82452393]
[147.40476990 367.63562012]
[133.23866272 373.74505615]
[118.02212524 371.20333862]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 97]
[4 96]
[6 94]
[7 93]
[8 92]
[10 90]
[12 88]
[13 87]
[14 86]
[15 85]
[16 84]
[17 83]
[18 82]
[19 74]
[20 73]
[21 72]
[22 71]
[23 70]
[24 69]
[30 65]
[31 64]
[32 63]
[34 61]
[35 60]
[36 59]
[38 58]
[39 57]
[40 56]
[41 55]
[42 54]
] def

init

% Start Annotations
3 97 0.0 1 colorpair
4 96 0.0 1 colorpair
6 94 0.0 1 colorpair
7 93 0.0 1 colorpair
8 92 0.0 1 colorpair
10 90 0.0 1 colorpair
12 88 0.0 1 colorpair
13 87 0.0 1 colorpair
14 86 0.0 1 colorpair
15 85 0.0 1 colorpair
16 84 0.0 1 colorpair
17 83 0.0 1 colorpair
18 82 0.0 1 colorpair
19 74 0.0 1 colorpair
20 73 0.0 1 colorpair
21 72 0.0 1 colorpair
22 71 0.0 1 colorpair
23 70 0.0 1 colorpair
24 69 0.0 1 colorpair
30 65 0.0 1 colorpair
31 64 0.0 1 colorpair
32 63 0.0 1 colorpair
34 61 0.0 1 colorpair
35 60 0.0 1 colorpair
36 59 0.0 1 colorpair
38 58 0.0 1 colorpair
39 57 0.0 1 colorpair
40 56 0.0 1 colorpair
41 55 0.0 1 colorpair
42 54 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
