%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu May 14 18:35:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGCUGUUUGGGACCUCGUUGCUCCGGAGUUGAAUGUGCAUUCAACGCCACCGCGCGUAGUCAGUAGUUAAAAUUACCCCUCACCAUGCUUUCAGGCAUGAUGAAACACAAUUCGGACACACUGCU\
) } def
/len { sequence length } bind def

/coor [
[104.28758240 286.77276611]
[87.93218231 285.57571411]
[81.03572083 270.69717407]
[90.69268036 257.44293213]
[91.78761292 242.48294067]
[92.88253784 227.52296448]
[93.24780273 212.52740479]
[92.88253784 197.53186035]
[92.51727295 182.53630066]
[92.15200806 167.54075623]
[91.78674316 152.54519653]
[91.42147827 137.54965210]
[91.05621338 122.55409241]
[82.18043518 110.46192169]
[67.98383331 105.61872101]
[53.78723907 100.77551270]
[39.73276901 107.49188232]
[25.40439415 102.37794495]
[19.08797455 88.93776703]
[4.89137793 84.09455872]
[-9.30521870 79.25135803]
[-18.54384613 79.43354797]
[-23.78605461 74.11350250]
[-37.86050415 68.92602539]
[-50.73907852 77.37875366]
[-65.94768524 76.63606262]
[-77.66416168 67.19210052]
[-81.52675629 52.83179855]
[-95.60120392 47.64432526]
[-111.22566223 50.13167572]
[-120.49182129 38.47030258]
[-134.56626892 33.28282928]
[-148.64071655 28.09535789]
[-162.71516418 22.90788651]
[-176.78961182 17.72041512]
[-190.86407471 12.53294373]
[-204.93852234 7.34547186]
[-220.99935913 10.65930653]
[-231.69599915 -1.77105319]
[-226.02465820 -17.15831757]
[-209.81951904 -19.67338943]
[-199.75105286 -6.72897768]
[-185.67658997 -1.54150629]
[-171.60214233 3.64596534]
[-157.52769470 8.83343697]
[-143.45324707 14.02090836]
[-129.37879944 19.20837975]
[-115.30434418 24.39585114]
[-100.68658447 21.53745842]
[-90.41373444 33.56987762]
[-76.33928680 38.75734711]
[-64.08099365 30.33877754]
[-49.03810120 30.75761604]
[-36.98537827 40.06273651]
[-32.67303467 54.85157776]
[-18.59858322 60.03904724]
[-4.46201277 65.05475616]
[9.73458385 69.89796448]
[23.93118095 74.74117279]
[37.14488983 67.96374512]
[51.61125183 72.67321014]
[58.63044357 86.57891846]
[72.82704163 91.42211914]
[87.02363586 96.26532745]
[80.30658722 80.92955017]
[87.30038452 60.67542648]
[92.99842072 46.79982376]
[98.69646454 32.92422104]
[104.39450073 19.04861641]
[110.09253693 5.17301416]
[107.36748505 -10.99813747]
[120.18021393 -21.23366356]
[135.35008240 -15.00413227]
[137.27163696 1.28204834]
[123.96813965 10.87105179]
[118.27010345 24.74665451]
[112.57206726 38.62225723]
[106.87402344 52.49785995]
[101.17598724 66.37346649]
[105.68717194 72.36505890]
[120.57606506 70.54275513]
[114.70953369 84.34825897]
[119.22071075 90.33985901]
[134.13072205 88.69928741]
[149.04074097 87.05872345]
[161.91189575 77.85849762]
[175.40904236 84.15737915]
[190.31906128 82.51681519]
[205.22908020 80.87624359]
[220.13908386 79.23567963]
[235.04910278 77.59510803]
[249.95912170 75.95454407]
[262.85183716 65.81994629]
[277.97232056 72.16841888]
[279.76589966 88.46918488]
[266.38751221 97.95342255]
[251.59968567 90.86455536]
[236.68966675 92.50512695]
[221.77966309 94.14569092]
[206.86964417 95.78626251]
[191.95962524 97.42682648]
[177.04962158 99.06739807]
[165.24493408 108.15027618]
[150.68130493 101.96873474]
[135.77130127 103.60930634]
[120.86128235 105.24987030]
[135.79011536 103.79048157]
[148.95947266 110.97158051]
[155.81837463 124.31157684]
[153.99656677 139.20053101]
[144.12364197 150.49324036]
[129.61138916 154.28724670]
[115.47484589 149.27145386]
[106.59922028 137.17916870]
[106.05176544 122.18882751]
[106.41703033 137.18437195]
[106.78229523 152.17993164]
[107.14756012 167.17547607]
[107.51282501 182.17103577]
[107.87808990 197.16658020]
[108.24335480 212.16213989]
[110.78411865 215.97372437]
[111.80763245 219.99298096]
[111.44425201 223.69647217]
[109.98719025 226.66267395]
[107.84252167 228.61788940]
[106.74759674 243.57786560]
[105.65266418 258.53784180]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 128]
[5 127]
[6 126]
[7 121]
[8 120]
[9 119]
[10 118]
[11 117]
[12 116]
[13 115]
[14 64]
[15 63]
[16 62]
[19 59]
[20 58]
[21 57]
[23 56]
[24 55]
[28 51]
[29 50]
[31 48]
[32 47]
[33 46]
[34 45]
[35 44]
[36 43]
[37 42]
[66 79]
[67 78]
[68 77]
[69 76]
[70 75]
[83 106]
[84 105]
[85 104]
[87 102]
[88 101]
[89 100]
[90 99]
[91 98]
[92 97]
] def

init

% Start Annotations
4 128 0.0 1 colorpair
5 127 0.0 1 colorpair
6 126 0.0 1 colorpair
7 121 0.0 1 colorpair
8 120 0.0 1 colorpair
9 119 0.0 1 colorpair
10 118 0.0 1 colorpair
11 117 0.0 1 colorpair
12 116 0.0 1 colorpair
13 115 0.0 1 colorpair
14 64 0.0 1 colorpair
15 63 0.0 1 colorpair
16 62 0.0 1 colorpair
19 59 0.0 1 colorpair
20 58 0.0 1 colorpair
21 57 0.0 1 colorpair
23 56 0.0 1 colorpair
24 55 0.0 1 colorpair
28 51 0.0 1 colorpair
29 50 0.0 1 colorpair
31 48 0.0 1 colorpair
32 47 0.0 1 colorpair
33 46 0.0 1 colorpair
34 45 0.0 1 colorpair
35 44 0.0 1 colorpair
36 43 0.0 1 colorpair
37 42 0.0 1 colorpair
66 79 0.0 1 colorpair
67 78 0.0 1 colorpair
68 77 0.0 1 colorpair
69 76 0.0 1 colorpair
70 75 0.0 1 colorpair
83 106 0.0 1 colorpair
84 105 0.0 1 colorpair
85 104 0.0 1 colorpair
87 102 0.0 1 colorpair
88 101 0.0 1 colorpair
89 100 0.0 1 colorpair
90 99 0.0 1 colorpair
91 98 0.0 1 colorpair
92 97 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
