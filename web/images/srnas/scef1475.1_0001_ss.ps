%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu May 14 18:19:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCAGUCCCCACGGGCGCCCGAGCACGGGCUGAGAUCGCGCUGAUUGCUGCGCGAGCACCGUUUGAACCUGUCCGGUUAGCACCGGCGAAGGAAGAGAGGAAUGGUGCAAU\
) } def
/len { sequence length } bind def

/coor [
[157.69299316 126.82398224]
[147.52037048 137.84750366]
[133.39849854 142.90444946]
[118.54067230 140.84414673]
[106.32839203 132.13629150]
[97.99483490 144.60833740]
[89.66128540 157.08038330]
[81.32772827 169.55242920]
[80.79568481 185.94293213]
[66.20941162 193.43778992]
[52.57402039 184.32690430]
[53.91642761 167.98278809]
[68.85568237 161.21887207]
[77.18923950 148.74682617]
[85.52278900 136.27478027]
[93.85634613 123.80273438]
[85.17627716 111.56932068]
[70.65172577 115.31597137]
[56.12717056 119.06262207]
[41.60261917 122.80926514]
[27.07806396 126.55591583]
[15.75958633 138.42285156]
[-0.11071761 134.29180908]
[-4.20683908 118.41245270]
[7.68496084 107.12010193]
[23.33141708 112.03135681]
[37.85597229 108.28471375]
[52.38052368 104.53806305]
[66.90507507 100.79141998]
[81.42962646 97.04476929]
[84.10429382 90.03790283]
[69.12341309 89.28069305]
[65.21440125 74.79898834]
[77.77947235 66.60636902]
[89.45361328 76.02416992]
[92.12827301 69.01730347]
[83.79472351 56.54525757]
[75.46116638 44.07321548]
[67.12761688 31.60117149]
[58.79405975 19.12912750]
[50.46050644 6.65708256]
[34.95069122 6.18246937]
[22.70260048 -3.34453773]
[18.42587280 -18.26061058]
[23.76499939 -32.83021545]
[36.66697693 -41.45103836]
[52.17073059 -40.80820465]
[64.31475067 -31.14888763]
[68.42941284 -16.18729782]
[62.93255234 -1.67647111]
[71.26610565 10.79557323]
[79.59965515 23.26761818]
[87.93321228 35.73966217]
[96.26676941 48.21170425]
[104.60031891 60.68375015]
[118.20479584 67.00183105]
[133.11047363 65.32236481]
[148.01615906 63.64289856]
[162.92184448 61.96342850]
[177.82752991 60.28396225]
[192.73321533 58.60449600]
[207.63890076 56.92502975]
[222.54458618 55.24555969]
[237.45025635 53.56609344]
[246.15922546 35.76744461]
[263.61761475 26.69570923]
[282.91064453 29.75581741]
[296.50808716 43.58435822]
[311.13198853 40.24654388]
[325.75592041 36.90872955]
[334.72006226 21.96715927]
[351.37359619 18.13633156]
[365.40267944 27.29247856]
[379.92724609 23.54583168]
[394.45181274 19.79918480]
[408.97634888 16.05253601]
[423.50091553 12.30589008]
[434.81939697 0.43895739]
[450.68969727 4.56999731]
[454.78579712 20.44934845]
[442.89401245 31.74169731]
[427.24755859 26.83044243]
[412.72299194 30.57708931]
[398.19845581 34.32373810]
[383.67388916 38.07038498]
[369.14935303 41.81703186]
[364.16955566 53.79132462]
[353.01211548 60.77715302]
[339.67504883 60.00446701]
[329.09371948 51.53264618]
[314.46981812 54.87046051]
[299.84588623 58.20827484]
[297.89877319 68.68782043]
[292.49063110 77.91766357]
[284.24099731 84.78861237]
[274.11257935 88.46468353]
[263.29907227 88.48471069]
[253.08430481 84.82009125]
[244.69006348 77.88121796]
[239.12973022 68.47177887]
[224.22404480 70.15124512]
[209.31835938 71.83071136]
[194.41267395 73.51017761]
[179.50700378 75.18964386]
[164.60131836 76.86911011]
[149.69563293 78.54857635]
[134.78994751 80.22805023]
[119.88426208 81.90751648]
[134.82055664 80.52644348]
[148.69731140 86.22167969]
[158.35699463 97.69731903]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 16]
[6 15]
[7 14]
[8 13]
[17 30]
[18 29]
[19 28]
[20 27]
[21 26]
[36 55]
[37 54]
[38 53]
[39 52]
[40 51]
[41 50]
[56 108]
[57 107]
[58 106]
[59 105]
[60 104]
[61 103]
[62 102]
[63 101]
[64 100]
[68 92]
[69 91]
[70 90]
[73 86]
[74 85]
[75 84]
[76 83]
[77 82]
] def

init

% Start Annotations
5 16 0.0 1 colorpair
6 15 0.0 1 colorpair
7 14 0.0 1 colorpair
8 13 0.0 1 colorpair
17 30 0.0 1 colorpair
18 29 0.0 1 colorpair
19 28 0.0 1 colorpair
20 27 0.0 1 colorpair
21 26 0.0 1 colorpair
36 55 0.0 1 colorpair
37 54 0.0 1 colorpair
38 53 0.0 1 colorpair
39 52 0.0 1 colorpair
40 51 0.0 1 colorpair
41 50 0.0 1 colorpair
56 108 0.0 1 colorpair
57 107 0.0 1 colorpair
58 106 0.0 1 colorpair
59 105 0.0 1 colorpair
60 104 0.0 1 colorpair
61 103 0.0 1 colorpair
62 102 0.0 1 colorpair
63 101 0.0 1 colorpair
64 100 0.16 1 colorpair
68 92 0.0 1 colorpair
69 91 0.0 1 colorpair
70 90 0.0 1 colorpair
73 86 0.0 1 colorpair
74 85 0.0 1 colorpair
75 84 0.0 1 colorpair
76 83 0.0 1 colorpair
77 82 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
64 cmark

% End Annotations
showpage
end
%%EOF
