%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu May 14 18:35:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAAAACGAGGCUGAGGAGAAUAGACAUCCAGACGUUUAUCGCUAUUCAACCUUCGAACGUUUCAUCCCCAGGUCAGAAGCAAUUUUUUCCAGACGG\
) } def
/len { sequence length } bind def

/coor [
[137.40681458 171.89668274]
[133.56971741 165.93963623]
[130.60247803 159.50148010]
[128.56428528 152.70851135]
[127.49606323 145.69410706]
[127.41967773 138.59609985]
[128.33752441 131.55412292]
[130.23240662 124.70680237]
[117.01060486 117.62273407]
[103.78880310 110.53866577]
[90.45627594 103.66526794]
[77.01636505 97.00427246]
[61.21562195 97.80864716]
[53.24794006 85.22431946]
[39.80803680 78.56331635]
[26.36812782 71.90232086]
[12.92822170 65.24131775]
[-2.87252355 66.04570007]
[-10.84020329 53.46136856]
[-24.28010941 46.80036926]
[-42.53270340 48.46507263]
[-51.81169891 33.66312790]
[-65.45617676 27.43190384]
[-79.10065460 21.20067787]
[-92.74514008 14.96945286]
[-106.38961792 8.73822784]
[-120.03409576 2.50700259]
[-133.47880554 10.25423145]
[-148.90591431 8.58579636]
[-160.38340759 -1.85675395]
[-163.49794006 -17.05804634]
[-157.05191040 -31.17287445]
[-143.52395630 -38.77379990]
[-128.11584473 -36.93810654]
[-116.75231934 -26.37166214]
[-113.80287170 -11.13747692]
[-100.15839386 -4.90625238]
[-86.51391602 1.32497299]
[-72.86943054 7.55619812]
[-59.22495270 13.78742313]
[-45.58047104 20.01864815]
[-34.02149582 16.08006096]
[-22.54122353 21.30866051]
[-17.61911011 33.36046219]
[-4.17920399 40.02146149]
[10.66022873 38.74064255]
[19.58922005 51.80141449]
[33.02912903 58.46241379]
[46.46903229 65.12341309]
[59.90893936 71.78440857]
[74.74837494 70.50359344]
[83.67736816 83.56436157]
[97.11727142 90.22536469]
[105.32369995 90.72421265]
[110.87287140 97.31686401]
[124.09467316 104.40093231]
[137.31646729 111.48500061]
[158.90800476 94.95593262]
[185.86331177 91.99904633]
[210.38859558 103.39118195]
[225.43307495 125.77161407]
[240.20520020 123.16689301]
[254.97731018 120.56217194]
[269.74942017 117.95745087]
[284.52154541 115.35272217]
[294.19915771 100.88652802]
[310.99884033 97.86352539]
[324.56835938 107.65648651]
[339.25039673 104.58438873]
[353.51544189 95.42225647]
[366.26849365 106.59349060]
[359.06420898 121.94063568]
[342.32250977 119.26642609]
[327.64047241 122.33852386]
[322.09820557 134.08876038]
[310.60064697 140.54747009]
[297.29321289 139.12591553]
[287.12628174 130.12484741]
[272.35415649 132.72956848]
[257.58203125 135.33428955]
[242.80992126 137.93901062]
[228.03781128 140.54373169]
[227.73759460 147.56684875]
[226.45716858 154.48196411]
[224.22087097 161.15287781]
[221.07185364 167.44812012]
[217.07125854 173.24343872]
[212.29708862 178.42436218]
[206.84259033 182.88835144]
[200.81451416 186.54693604]
[194.33099365 189.32737732]
[187.51921082 191.17420959]
[180.51292419 192.05023193]
[173.44985962 191.93736267]
[166.46894836 190.83692932]
[159.70768738 188.76971436]
[153.29928589 185.77555847]
[147.37022400 181.91253662]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 57]
[9 56]
[10 55]
[11 53]
[12 52]
[14 50]
[15 49]
[16 48]
[17 47]
[19 45]
[20 44]
[22 41]
[23 40]
[24 39]
[25 38]
[26 37]
[27 36]
[61 82]
[62 81]
[63 80]
[64 79]
[65 78]
[68 74]
[69 73]
] def

init

% Start Annotations
8 57 0.0 1 colorpair
9 56 0.0 1 colorpair
10 55 0.0 1 colorpair
11 53 0.0 1 colorpair
12 52 0.0 1 colorpair
14 50 0.0 1 colorpair
15 49 0.0 1 colorpair
16 48 0.0 1 colorpair
17 47 0.0 1 colorpair
19 45 0.0 1 colorpair
20 44 0.0 1 colorpair
22 41 0.0 1 colorpair
23 40 0.0 1 colorpair
24 39 0.0 1 colorpair
25 38 0.0 1 colorpair
26 37 0.0 1 colorpair
27 36 0.0 1 colorpair
61 82 0.0 1 colorpair
62 81 0.0 1 colorpair
63 80 0.0 1 colorpair
64 79 0.0 1 colorpair
65 78 0.0 1 colorpair
68 74 0.0 1 colorpair
69 73 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
