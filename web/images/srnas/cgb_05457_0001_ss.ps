%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu May 14 18:35:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCGACGACUCUCACGCUCGUCUGUCCAAUGCAGCUUAAUCUGACCUGGAAGGCGUAACGGUAUGAGUUCAGUGCGUAUCGCGUCCGAGUUGAC\
) } def
/len { sequence length } bind def

/coor [
[97.71836090 332.03677368]
[82.27758026 330.49987793]
[70.71151733 320.15551758]
[67.46754456 304.98132324]
[73.79304504 290.81207275]
[87.25572968 283.09613037]
[88.74140930 268.16989136]
[90.22709656 253.24365234]
[91.71277618 238.31741333]
[93.19845581 223.39117432]
[94.68414307 208.46492004]
[85.07770538 197.14009094]
[86.37177277 181.98158264]
[98.31544495 171.98225403]
[99.80112457 157.05601501]
[101.28681183 142.12977600]
[102.77249146 127.20352936]
[79.60720825 113.29050446]
[81.45243073 89.44952393]
[71.85290527 77.92350769]
[62.25337219 66.39749146]
[52.65384674 54.87147522]
[43.05431747 43.34545517]
[34.99211121 38.63315964]
[33.33558273 31.27596092]
[24.12239075 19.43885231]
[14.90919971 7.60174465]
[5.69600964 -4.23536301]
[-9.70409966 -3.85743642]
[-22.22743988 -12.51880741]
[-27.19060898 -26.72552872]
[-22.88809204 -40.96021652]
[-32.10128021 -52.79732513]
[-41.31447220 -64.63442993]
[-57.02642441 -66.34035492]
[-66.86493683 -78.70883179]
[-64.99299622 -94.40186310]
[-52.52119064 -104.10906219]
[-36.84882355 -102.07130432]
[-27.27402878 -89.49756622]
[-29.47736549 -73.84762573]
[-20.26417542 -62.01051331]
[-11.05098343 -50.17340851]
[3.80433202 -50.84986115]
[16.35794449 -42.55101776]
[21.67998314 -28.28464699]
[17.53311729 -13.44855309]
[26.74630737 -1.61144590]
[35.95949936 10.22566128]
[45.17268753 22.06276894]
[54.58033371 33.74592972]
[64.17986298 45.27194595]
[73.77938843 56.79796219]
[83.37892151 68.32398224]
[92.97844696 79.84999847]
[101.56601715 77.51490784]
[110.84438324 78.88071442]
[119.21130371 84.09310150]
[125.07582092 92.60599518]
[127.15396881 103.22189331]
[142.10273743 101.98320007]
[157.05151367 100.74451447]
[172.00027466 99.50582123]
[186.94903564 98.26713562]
[201.89781189 97.02844238]
[209.04728699 83.35771942]
[222.46405029 75.74234009]
[237.86685181 76.61234283]
[250.34074402 85.69010925]
[255.90531921 100.07895660]
[252.78495789 115.18746185]
[241.97535706 126.19454956]
[226.92581177 129.58790588]
[212.43858337 124.28471375]
[203.13650513 111.97721100]
[188.18772888 113.21590424]
[173.23896790 114.45458984]
[158.29019165 115.69328308]
[143.34143066 116.93196869]
[128.39265442 118.17066193]
[117.69873810 128.68920898]
[116.21305084 143.61546326]
[114.72737122 158.54170227]
[113.24168396 173.46794128]
[122.97998047 185.62538147]
[121.26065826 200.74154663]
[109.61038208 209.95060730]
[108.12470245 224.87684631]
[106.63902283 239.80310059]
[105.15333557 254.72933960]
[103.66765594 269.65557861]
[102.18196869 284.58181763]
[113.85957336 294.80010986]
[117.26796722 309.93820190]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 92]
[7 91]
[8 90]
[9 89]
[10 88]
[11 87]
[14 84]
[15 83]
[16 82]
[17 81]
[19 55]
[20 54]
[21 53]
[22 52]
[23 51]
[25 50]
[26 49]
[27 48]
[28 47]
[32 43]
[33 42]
[34 41]
[60 80]
[61 79]
[62 78]
[63 77]
[64 76]
[65 75]
] def

init

% Start Annotations
6 92 0.0 1 colorpair
7 91 0.0 1 colorpair
8 90 0.0 1 colorpair
9 89 0.0 1 colorpair
10 88 0.0 1 colorpair
11 87 0.0 1 colorpair
14 84 0.0 1 colorpair
15 83 0.0 1 colorpair
16 82 0.0 1 colorpair
17 81 0.0 1 colorpair
19 55 0.0 1 colorpair
20 54 0.0 1 colorpair
21 53 0.0 1 colorpair
22 52 0.0 1 colorpair
23 51 0.0 1 colorpair
25 50 0.0 1 colorpair
26 49 0.0 1 colorpair
27 48 0.0 1 colorpair
28 47 0.0 1 colorpair
32 43 0.0 1 colorpair
33 42 0.0 1 colorpair
34 41 0.0 1 colorpair
60 80 0.0 1 colorpair
61 79 0.0 1 colorpair
62 78 0.0 1 colorpair
63 77 0.0 1 colorpair
64 76 0.0 1 colorpair
65 75 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
