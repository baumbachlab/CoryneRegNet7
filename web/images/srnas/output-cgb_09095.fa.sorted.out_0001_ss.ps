%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu May 14 18:35:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGUCGGUUUUGGUCAGAUAUGACAGUCAGCCUGCAAUUACUAUCUGGAACUCUAGAAUCAGGGUCCUCUCAGGAUCGUAUAUAAGAGGCUGAAAU\
) } def
/len { sequence length } bind def

/coor [
[31.39974785 282.19949341]
[33.15772629 297.09613037]
[30.10995483 311.78323364]
[22.56986618 324.75036621]
[11.31289005 334.66403198]
[-2.50330091 340.50463867]
[-17.45783997 341.67160034]
[-32.01279449 338.04483032]
[-44.67132187 329.99737549]
[-54.13161087 318.35681152]
[-59.42076111 304.32025146]
[-59.99483490 289.33123779]
[-55.79478836 274.93124390]
[-47.25301361 262.60165405]
[-61.48884964 267.32827759]
[-75.72468567 272.05490112]
[-89.96051788 276.78152466]
[-100.44498444 289.39135742]
[-116.55966949 286.35018921]
[-121.72718048 270.78646851]
[-110.63161469 258.71084595]
[-94.68714142 262.54568481]
[-80.45130920 257.81906128]
[-66.21546936 253.09243774]
[-51.97963715 248.36581421]
[-49.35501480 244.15072632]
[-44.82018661 241.14328003]
[-38.97695923 240.19569397]
[-28.54171944 229.42045593]
[-18.10648155 218.64521790]
[-7.67124367 207.86997986]
[2.76399469 197.09474182]
[13.19923306 186.31948853]
[23.63447189 175.54425049]
[17.83732224 160.74635315]
[19.03359413 144.84057617]
[27.03668594 130.97613525]
[40.30733490 121.91987610]
[56.24943161 119.50412750]
[71.71783447 124.25615692]
[81.80235291 113.15198517]
[91.88686371 102.04782104]
[81.28892517 96.92049408]
[75.17079163 83.96296692]
[77.76218414 66.56706238]
[80.15618134 51.75933838]
[82.55017853 36.95161438]
[84.94418335 22.14388657]
[87.33818054 7.33615923]
[81.00776672 -7.79189157]
[91.15774536 -20.67249680]
[107.34667969 -18.05519485]
[112.92079163 -2.63244128]
[102.14590454 9.73015785]
[99.75190735 24.53788376]
[97.35791016 39.34561157]
[94.96391296 54.15333939]
[92.56990814 68.96106720]
[97.87321472 74.26436615]
[104.68323517 60.89935303]
[119.49850464 63.24623871]
[121.84446716 78.06165314]
[108.47981262 84.87096405]
[113.78311157 90.17427063]
[128.59083557 87.78026581]
[143.39857483 85.38626862]
[158.20629883 82.99227142]
[173.01402283 80.59827423]
[187.82174683 78.20427704]
[202.49285889 69.70751190]
[214.71893311 81.45313263]
[206.81684875 96.45291138]
[190.21574402 93.01200104]
[175.40802002 95.40599823]
[160.60029602 97.80000305]
[145.79257202 100.19400024]
[130.98483276 102.58799744]
[116.17711639 104.98199463]
[102.99103546 112.13233185]
[92.90652466 123.23650360]
[82.82200623 134.34066772]
[88.64897156 147.32489014]
[89.05033875 161.50744629]
[83.99811554 174.71905518]
[74.29592896 184.95179749]
[61.45134354 190.66418457]
[47.44169998 191.01342773]
[34.40970993 185.97949219]
[23.97447395 196.75473022]
[13.53923512 207.52996826]
[3.10399675 218.30522156]
[-7.33124161 229.08045959]
[-17.76647949 239.85569763]
[-28.20171738 250.63093567]
[-13.38635254 248.28466797]
[1.40988421 250.74868774]
[14.66533852 257.76959229]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 25]
[15 24]
[16 23]
[17 22]
[28 94]
[29 93]
[30 92]
[31 91]
[32 90]
[33 89]
[34 88]
[40 81]
[41 80]
[42 79]
[45 58]
[46 57]
[47 56]
[48 55]
[49 54]
[64 78]
[65 77]
[66 76]
[67 75]
[68 74]
[69 73]
] def

init

% Start Annotations
14 25 0.0 1 colorpair
15 24 0.0 1 colorpair
16 23 0.0 1 colorpair
17 22 0.0 1 colorpair
28 94 0.0 1 colorpair
29 93 0.0 1 colorpair
30 92 0.0 1 colorpair
31 91 0.0 1 colorpair
32 90 0.0 1 colorpair
33 89 0.0 1 colorpair
34 88 0.0 1 colorpair
40 81 0.0 1 colorpair
41 80 0.0 1 colorpair
42 79 0.0 1 colorpair
45 58 0.0 1 colorpair
46 57 0.0 1 colorpair
47 56 0.0 1 colorpair
48 55 0.0 1 colorpair
49 54 0.0 1 colorpair
64 78 0.0 1 colorpair
65 77 0.0 1 colorpair
66 76 0.0 1 colorpair
67 75 0.0 1 colorpair
68 74 0.0 1 colorpair
69 73 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
