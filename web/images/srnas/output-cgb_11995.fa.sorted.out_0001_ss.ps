%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu May 14 18:36:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGAGAUAAACAUUCGGAUUUUUAGACACUUUCAACACAGUUGCUGUUGUCAUCAACCUCACCACGGAAUCUAUUUUGUUCCCGUGUUGCUCGUUUUUUGAUUCGCAGAUACCUGUGAGCAAAGCGUGAAAAUCCAGAGUCGU\
) } def
/len { sequence length } bind def

/coor [
[50.02983856 531.30645752]
[47.08069992 546.37951660]
[36.97803116 557.94805908]
[22.43939781 562.90020752]
[7.37562275 559.90386963]
[-4.16121674 549.76495361]
[-9.06776810 535.21087646]
[-6.02419424 520.15661621]
[4.15079927 508.65158081]
[18.72019005 503.79067993]
[21.64654541 489.07888794]
[24.41224861 474.33609009]
[27.01697159 459.56396484]
[29.62169456 444.79183960]
[32.22641754 430.01971436]
[34.66984940 415.22009277]
[36.95169830 400.39465332]
[39.23355103 385.56924438]
[41.51539993 370.74380493]
[43.79725266 355.91839600]
[46.07910156 341.09295654]
[48.36095428 326.26754761]
[50.64280319 311.44210815]
[48.54425812 307.07522583]
[49.22047043 301.33627319]
[53.36117172 296.02551270]
[56.28752518 281.31372070]
[51.18186188 267.32153320]
[61.46277237 255.29598999]
[64.38912964 240.58421326]
[67.31548309 225.87243652]
[70.24183655 211.16065979]
[60.01258087 200.36712646]
[58.07757950 185.44332886]
[65.38674164 172.08557129]
[79.32090759 165.51707458]
[82.24726105 150.80529785]
[85.17362213 136.09352112]
[88.09997559 121.38174438]
[91.02632904 106.66996002]
[93.79203033 91.92713928]
[84.99623871 79.07132721]
[87.84822845 64.12741089]
[100.15848541 55.82118988]
[102.76320648 41.04907227]
[105.36792755 26.27695656]
[107.97264862 11.50484085]
[101.25739288 -5.60352612]
[112.96820068 -18.63008118]
[115.25004578 -33.45550156]
[117.53189850 -48.28092575]
[119.81375122 -63.10634995]
[109.21823883 -76.98032379]
[111.84567261 -93.89788818]
[125.59834290 -103.51837921]
[127.55623627 -118.39005280]
[129.51412964 -133.26171875]
[118.61848450 -146.90126038]
[120.87623596 -163.87211609]
[134.41577148 -173.79032898]
[136.04876709 -188.70117188]
[129.85983276 -203.26165771]
[138.93672180 -215.07093811]
[140.56973267 -229.98179626]
[142.20272827 -244.89263916]
[143.83573914 -259.80346680]
[145.46873474 -274.71432495]
[134.15467834 -285.16888428]
[131.20056152 -300.10632324]
[137.53367615 -313.75753784]
[150.53517151 -320.97549438]
[140.44866943 -333.14260864]
[142.00303650 -348.87026978]
[154.27609253 -358.82757568]
[169.98645020 -357.10699463]
[179.81343079 -344.72937012]
[177.92684937 -329.03805542]
[165.44601440 -319.34249878]
[176.57705688 -309.48159790]
[179.80538940 -294.78323364]
[173.68824768 -280.83926392]
[160.37959290 -273.08132935]
[158.74658203 -258.17047119]
[157.11358643 -243.25962830]
[155.48057556 -228.34878540]
[153.84757996 -213.43794250]
[160.15330505 -199.94398499]
[150.95960999 -187.06816101]
[149.32661438 -172.15731812]
[158.74325562 -163.29791260]
[161.35366821 -150.43597412]
[155.97866821 -138.24945068]
[144.38580322 -131.30383301]
[142.42791748 -116.43215942]
[140.47001648 -101.56048584]
[149.69114685 -92.49776459]
[152.02035522 -79.58193207]
[146.38079834 -67.51556396]
[134.63917542 -60.82449722]
[132.35731506 -45.99907303]
[130.07546997 -31.17365265]
[127.79361725 -16.34823036]
[134.70719910 -6.36436796]
[132.87567139 6.04698133]
[122.74476624 14.10956383]
[120.14004517 28.88167953]
[117.53532410 43.65379715]
[114.93060303 58.42591095]
[123.65756226 70.44155884]
[121.22643280 85.45969391]
[108.56414795 94.53186035]
[110.38553619 102.45166779]
[105.73810577 109.59631348]
[102.81175232 124.30809784]
[99.88539886 139.01988220]
[96.95904541 153.73165894]
[94.03269196 168.44343567]
[104.39252472 179.84431458]
[106.03352356 194.98236084]
[98.53472137 208.02964783]
[84.95361328 214.08700562]
[82.02725983 228.79878235]
[79.10090637 243.51057434]
[76.17455292 258.22235107]
[81.07089996 273.26681519]
[70.99930573 284.24008179]
[68.07295227 298.95184326]
[65.46822357 313.72396851]
[63.18637466 328.54940796]
[60.90452576 343.37481689]
[58.62267303 358.20022583]
[56.34082413 373.02566528]
[54.05897141 387.85107422]
[51.77712250 402.67651367]
[49.49526978 417.50192261]
[51.29010391 426.53735352]
[46.99853134 432.62445068]
[44.39381027 447.39657593]
[41.78908920 462.16867065]
[39.18436432 476.94079590]
[40.78166580 486.01324463]
[36.35832596 492.00524902]
[33.43196869 506.71704102]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 143]
[11 142]
[12 140]
[13 139]
[14 138]
[15 137]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 128]
[26 127]
[27 126]
[29 124]
[30 123]
[31 122]
[32 121]
[36 117]
[37 116]
[38 115]
[39 114]
[40 113]
[41 111]
[44 108]
[45 107]
[46 106]
[47 105]
[49 102]
[50 101]
[51 100]
[52 99]
[55 95]
[56 94]
[57 93]
[60 89]
[61 88]
[63 86]
[64 85]
[65 84]
[66 83]
[67 82]
[71 78]
] def

init

% Start Annotations
10 143 0.0 1 colorpair
11 142 0.0 1 colorpair
12 140 0.0 1 colorpair
13 139 0.0 1 colorpair
14 138 0.0 1 colorpair
15 137 0.0 1 colorpair
16 135 0.0 1 colorpair
17 134 0.0 1 colorpair
18 133 0.0 1 colorpair
19 132 0.0 1 colorpair
20 131 0.0 1 colorpair
21 130 0.0 1 colorpair
22 129 0.0 1 colorpair
23 128 0.0 1 colorpair
26 127 0.0 1 colorpair
27 126 0.0 1 colorpair
29 124 0.0 1 colorpair
30 123 0.0 1 colorpair
31 122 0.0 1 colorpair
32 121 0.0 1 colorpair
36 117 0.0 1 colorpair
37 116 0.0 1 colorpair
38 115 0.0 1 colorpair
39 114 0.0 1 colorpair
40 113 0.0 1 colorpair
41 111 0.0 1 colorpair
44 108 0.0 1 colorpair
45 107 0.0 1 colorpair
46 106 0.0 1 colorpair
47 105 0.0 1 colorpair
49 102 0.0 1 colorpair
50 101 0.0 1 colorpair
51 100 0.0 1 colorpair
52 99 0.0 1 colorpair
55 95 0.0 1 colorpair
56 94 0.0 1 colorpair
57 93 0.0 1 colorpair
60 89 0.0 1 colorpair
61 88 0.0 1 colorpair
63 86 0.0 1 colorpair
64 85 0.0 1 colorpair
65 84 0.0 1 colorpair
66 83 0.0 1 colorpair
67 82 0.0 1 colorpair
71 78 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
