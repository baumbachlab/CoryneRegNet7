%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu May 14 18:35:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUUCAUUACUAGAAUCUGAAGAGACUGUGCUUUUUCUGUUAUGCGAAUAGUAACGUUUGCCUUGGGCGGAGAAUGUUUAAUUGCAUUACAGACUGC\
) } def
/len { sequence length } bind def

/coor [
[96.43161774 119.22996521]
[88.24859619 131.80128479]
[80.06557465 144.37260437]
[71.88254547 156.94392395]
[63.69952393 169.51525879]
[68.42830658 184.42071533]
[62.42195892 198.85877991]
[48.51649094 206.01223755]
[33.27764511 202.50344849]
[23.90073586 189.98915100]
[24.81325340 174.37821960]
[35.58433533 163.04165649]
[51.12820435 161.33222961]
[59.31122589 148.76091003]
[67.49424744 136.18959045]
[75.67727661 123.61826324]
[83.86029816 111.04694366]
[78.53697205 97.98682404]
[83.37437439 83.31214905]
[68.65099335 80.44477081]
[53.92760468 77.57739258]
[39.20421600 74.71001434]
[24.48082924 71.84262848]
[9.75744057 68.97525024]
[-3.20632911 78.01495361]
[-18.75024796 75.15800476]
[-27.65238380 62.09938812]
[-24.63125801 46.58654404]
[-11.47924995 37.82297134]
[4.00078630 41.00793839]
[12.62482071 54.25186539]
[27.34820747 57.11924362]
[42.07159424 59.98662186]
[56.79498291 62.85400391]
[71.51837158 65.72138214]
[86.24176025 68.58876038]
[100.96514130 65.72138214]
[113.53646851 57.53836060]
[126.10778809 49.35533524]
[138.67910767 41.17231369]
[146.02389526 27.15929604]
[160.91143799 26.70066452]
[173.48277283 18.51764107]
[186.05409241 10.33461857]
[198.62541199 2.15159464]
[211.19673157 -6.03142881]
[223.76805115 -14.21445274]
[222.76350403 -26.88870430]
[227.28874207 -38.69208145]
[236.40296936 -47.34602356]
[248.28616333 -51.20897675]
[260.60229492 -49.58757019]
[270.95855713 -42.86012650]
[284.02835083 -50.22088623]
[297.09811401 -57.58164978]
[310.16790771 -64.94241333]
[323.23770142 -72.30317688]
[336.30746460 -79.66394043]
[349.37725830 -87.02470398]
[357.60476685 -100.53834534]
[372.49111938 -100.04219055]
[385.56088257 -107.40294647]
[389.57229614 -122.68968201]
[403.26010132 -130.59027100]
[418.50357056 -126.41746521]
[426.25903320 -112.64688873]
[421.92526245 -97.44839478]
[408.07348633 -89.83898163]
[392.92166138 -94.33316803]
[379.85186768 -86.97240448]
[372.55917358 -73.98525238]
[356.73800659 -73.95492554]
[343.66824341 -66.59416199]
[330.59844971 -59.23339844]
[317.52865601 -51.87263489]
[304.45889282 -44.51187134]
[291.38909912 -37.15110779]
[278.31933594 -29.79034424]
[277.20419312 -12.31650448]
[265.83172607 1.19978535]
[248.50489807 5.35885191]
[231.95108032 -1.64313078]
[219.37976074 6.53989267]
[206.80842590 14.72291660]
[194.23710632 22.90593910]
[181.66578674 31.08896255]
[169.09446716 39.27198792]
[162.64886475 52.69969559]
[146.86213684 53.74363327]
[134.29081726 61.92665863]
[121.71949005 70.10968018]
[109.14817047 78.29270172]
[116.75640106 84.26668549]
[121.16141510 92.61221313]
[121.76914978 101.79225922]
[118.66583252 110.20148468]
[112.57027435 116.44688416]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 17]
[2 16]
[3 15]
[4 14]
[5 13]
[19 36]
[20 35]
[21 34]
[22 33]
[23 32]
[24 31]
[37 92]
[38 91]
[39 90]
[40 89]
[42 87]
[43 86]
[44 85]
[45 84]
[46 83]
[47 82]
[53 78]
[54 77]
[55 76]
[56 75]
[57 74]
[58 73]
[59 72]
[61 70]
[62 69]
] def

init

% Start Annotations
1 17 0.0 1 colorpair
2 16 0.0 1 colorpair
3 15 0.0 1 colorpair
4 14 0.0 1 colorpair
5 13 0.0 1 colorpair
19 36 0.0 1 colorpair
20 35 0.0 1 colorpair
21 34 0.0 1 colorpair
22 33 0.0 1 colorpair
23 32 0.0 1 colorpair
24 31 0.0 1 colorpair
37 92 0.0 1 colorpair
38 91 0.0 1 colorpair
39 90 0.0 1 colorpair
40 89 0.0 1 colorpair
42 87 0.0 1 colorpair
43 86 0.0 1 colorpair
44 85 0.0 1 colorpair
45 84 0.0 1 colorpair
46 83 0.0 1 colorpair
47 82 0.0 1 colorpair
53 78 0.0 1 colorpair
54 77 0.0 1 colorpair
55 76 0.0 1 colorpair
56 75 0.0 1 colorpair
57 74 0.0 1 colorpair
58 73 0.0 1 colorpair
59 72 0.0 1 colorpair
61 70 0.0 1 colorpair
62 69 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
