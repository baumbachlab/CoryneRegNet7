%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu May 14 18:36:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGAGCAAAUCCGACAAAACCGCUGCCUAGGGACAUUAGACACGCUAGCAGGCCAAAAUUCCAUGACGUUAUUGACGCGCCAAGAACCCCAACUUUCCCGCCAGAACGCUUGU\
) } def
/len { sequence length } bind def

/coor [
[86.45365906 190.38569641]
[92.50000000 174.54656982]
[92.50000000 159.54656982]
[92.50000000 144.54656982]
[92.50000000 129.54656982]
[92.50000000 114.54656219]
[85.30861664 127.71030426]
[83.14324951 142.55319214]
[75.64810944 155.54637146]
[63.88343430 164.85188293]
[49.51342773 169.15336609]
[34.57082748 167.84237671]
[21.16937637 161.10433960]
[11.20480728 149.89241028]
[6.08668137 135.79258728]
[6.53899574 120.79941559]
[12.49776649 107.03376770]
[23.12008095 96.44290161]
[36.90333557 90.52497864]
[51.89779282 90.11711884]
[65.98270416 95.27723694]
[80.98258972 95.21784973]
[67.79048157 88.07863617]
[54.59837341 80.93943024]
[39.62184906 85.22212219]
[26.34487724 77.79401398]
[22.35428047 63.48979568]
[9.16217422 56.35058594]
[-4.02993155 49.21137619]
[-17.22203827 42.07216263]
[-33.04147339 42.30876160]
[-40.55222702 29.44649696]
[-53.59457016 37.55777740]
[-68.94572449 38.04514313]
[-82.47631836 30.77749634]
[-90.54667664 17.70979309]
[-90.98592377 2.35718346]
[-83.67589569 -11.15055943]
[-70.58296204 -19.17992020]
[-55.22905350 -19.57103920]
[-41.74428940 -12.21871090]
[-33.75600815 0.89932811]
[-33.41301727 16.25439072]
[-18.53716850 15.50714970]
[-10.08282661 28.88005829]
[3.10927939 36.01926804]
[16.30138588 43.15848160]
[29.49349213 50.29769135]
[43.65115356 45.81481934]
[57.13152695 52.86706543]
[61.73758316 67.74732208]
[74.92968750 74.88653564]
[88.12179565 82.02574158]
[77.94149780 71.00932312]
[72.35169220 57.08976746]
[72.08527374 42.09213257]
[77.17719269 27.98283005]
[86.95980072 16.61179352]
[100.15047455 9.46993446]
[115.01971436 7.49365282]
[129.61795044 10.94206905]
[142.03112793 19.36304474]
[150.63171387 31.65246773]
[154.29203796 46.19901657]
[152.53218079 61.09542084]
[145.58288574 74.38854980]
[134.35530090 84.33547211]
[120.32491302 89.63140106]
[135.23387146 91.28152466]
[150.14283752 92.93164825]
[159.15805054 90.74593353]
[165.43782043 94.83816528]
[180.29565430 96.89846802]
[195.15348816 98.95877075]
[201.62551880 96.75531006]
[207.33769226 98.05725861]
[210.76426697 101.56375122]
[225.48603821 104.43940735]
[240.20780945 107.31507111]
[254.46145630 97.28858948]
[271.24020386 100.54067230]
[280.35015869 114.60272217]
[295.14559937 117.07164001]
[309.94100952 119.54055786]
[320.90872192 108.56381226]
[336.23901367 106.16336060]
[350.03704834 113.26222229]
[356.99722290 127.13073730]
[354.44317627 142.43617249]
[343.35702515 153.29328918]
[328.00161743 155.52729797]
[314.28140259 148.27917480]
[307.47207642 134.33596802]
[292.67666626 131.86705017]
[277.88125610 129.39813232]
[268.47402954 138.32032776]
[255.44526672 140.18017578]
[243.56977844 134.06767273]
[237.33213806 122.03684235]
[222.61036682 119.16118622]
[207.88859558 116.28552246]
[193.09318542 113.81660461]
[178.23535156 111.75630188]
[163.37751770 109.69599915]
[148.49270630 107.84060669]
[133.58375549 106.19048309]
[118.67478943 104.54035950]
[107.50000000 114.54656219]
[107.50000000 129.54656982]
[107.50000000 144.54656982]
[107.50000000 159.54656982]
[107.50000000 174.54656982]
[113.54634094 190.38569641]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 112]
[3 111]
[4 110]
[5 109]
[6 108]
[22 53]
[23 52]
[24 51]
[27 48]
[28 47]
[29 46]
[30 45]
[32 43]
[68 107]
[69 106]
[70 105]
[72 104]
[73 103]
[74 102]
[77 101]
[78 100]
[79 99]
[82 95]
[83 94]
[84 93]
] def

init

% Start Annotations
2 112 0.0 1 colorpair
3 111 0.0 1 colorpair
4 110 0.0 1 colorpair
5 109 0.0 1 colorpair
6 108 0.0 1 colorpair
22 53 0.0 1 colorpair
23 52 0.0 1 colorpair
24 51 0.0 1 colorpair
27 48 0.0 1 colorpair
28 47 0.0 1 colorpair
29 46 0.0 1 colorpair
30 45 0.0 1 colorpair
32 43 0.0 1 colorpair
68 107 0.0 1 colorpair
69 106 0.0 1 colorpair
70 105 0.0 1 colorpair
72 104 0.0 1 colorpair
73 103 0.0 1 colorpair
74 102 0.0 1 colorpair
77 101 0.0 1 colorpair
78 100 0.0 1 colorpair
79 99 0.0 1 colorpair
82 95 0.0 1 colorpair
83 94 0.0 1 colorpair
84 93 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
