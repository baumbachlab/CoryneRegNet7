%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu May 14 18:19:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
__CGGAUUCCGCGCGGCGUGUAUCUUGUGAACUCCCCCAGGGCAGGAAUGCAGCAAGGGUCAACGAGCUCUGACGGGUGCGCGGGGUCCCCUUUU\
) } def
/len { sequence length } bind def

/coor [
[102.60623932 393.04699707]
[101.14871979 377.75741577]
[107.54585266 363.79415894]
[120.07684326 354.91329956]
[118.60659027 339.98553467]
[117.13632965 325.05773926]
[115.66607666 310.12997437]
[114.19581604 295.20220947]
[112.72556305 280.27444458]
[111.25530243 265.34667969]
[109.78504944 250.41889954]
[108.31478882 235.49111938]
[106.84453583 220.56335449]
[105.37427521 205.63558960]
[103.90401459 190.70780945]
[92.90961456 177.13742065]
[100.38839722 160.40992737]
[98.43050385 145.53825378]
[96.47261047 130.66658020]
[81.61174011 124.79421997]
[71.67810822 112.27810669]
[69.33349609 96.47200012]
[75.20615387 81.61124420]
[87.72246552 71.67786407]
[85.27902985 56.87821198]
[82.83560181 42.07855988]
[80.39216614 27.27891159]
[77.94873810 12.47926140]
[65.93112183 8.30401516]
[56.93685913 -0.59030092]
[52.67700195 -12.42329025]
[53.92374802 -24.86445999]
[60.37127304 -35.49216843]
[70.70761871 -42.26498795]
[69.23736572 -57.19275665]
[67.76710510 -72.12052917]
[53.49785233 -77.42617035]
[42.99004364 -88.35653687]
[38.28922272 -102.70653534]
[40.27686691 -117.61325073]
[48.50565338 -130.12710571]
[61.29869080 -137.79547119]
[59.82843018 -152.72323608]
[58.35817337 -167.65100098]
[48.37141800 -180.65856934]
[54.89207840 -195.70559692]
[71.21225739 -197.31298828]
[80.54315948 -183.82720947]
[73.28594208 -169.12126160]
[74.75620270 -154.19349670]
[76.22646332 -139.26571655]
[90.26970673 -134.24050903]
[100.78170776 -123.57245636]
[105.63932037 -109.33993530]
[103.82836914 -94.34858704]
[95.65486908 -81.57826996]
[82.69487762 -73.59078217]
[84.16513062 -58.66301346]
[85.63539124 -43.73524475]
[101.17478943 -35.67942810]
[108.96813965 -19.83415794]
[105.80842590 -2.30382657]
[92.74839020 10.03582954]
[95.19181824 24.83547974]
[97.63525391 39.63512802]
[100.07868195 54.43478012]
[102.52211761 69.23442841]
[115.57966614 73.35125732]
[125.57243347 82.71035004]
[130.53466797 95.47061157]
[129.49021912 109.12187958]
[122.64453125 120.97871399]
[111.34428406 128.70867920]
[113.30217743 143.58035278]
[115.26007080 158.45202637]
[125.07751465 167.01208496]
[126.30824280 179.57369995]
[118.83178711 189.23754883]
[120.30204773 204.16532898]
[121.77230072 219.09309387]
[123.24256134 234.02087402]
[124.71281433 248.94863892]
[126.18307495 263.87640381]
[127.65332794 278.80416870]
[129.12359619 293.73196411]
[130.59384155 308.65972900]
[132.06410217 323.58749390]
[133.53436279 338.51525879]
[135.00462341 353.44302368]
[149.02740479 359.70858765]
[158.02571106 372.15551758]
[159.57905579 387.43563843]
[153.26957703 401.43872070]
[140.79450989 410.39797974]
[125.50956726 411.90341187]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 89]
[5 88]
[6 87]
[7 86]
[8 85]
[9 84]
[10 83]
[11 82]
[12 81]
[13 80]
[14 79]
[15 78]
[17 75]
[18 74]
[19 73]
[24 67]
[25 66]
[26 65]
[27 64]
[28 63]
[34 59]
[35 58]
[36 57]
[42 51]
[43 50]
[44 49]
] def

init

% Start Annotations
4 89 0.0 1 colorpair
5 88 0.0 1 colorpair
6 87 0.0 1 colorpair
7 86 0.0 1 colorpair
8 85 0.16 1 colorpair
9 84 0.0 1 colorpair
10 83 0.0 1 colorpair
11 82 0.0 1 colorpair
12 81 0.0 1 colorpair
13 80 0.0 1 colorpair
14 79 0.0 1 colorpair
15 78 0.0 1 colorpair
17 75 0.0 1 colorpair
18 74 0.0 1 colorpair
19 73 0.16 1 colorpair
24 67 0.0 1 colorpair
25 66 0.0 1 colorpair
26 65 0.0 1 colorpair
27 64 0.0 1 colorpair
28 63 0.0 1 colorpair
34 59 0.0 1 colorpair
35 58 0.0 1 colorpair
36 57 0.0 1 colorpair
42 51 0.0 1 colorpair
43 50 0.0 1 colorpair
44 49 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
8 cmark
19 cmark
73 cmark

% End Annotations
showpage
end
%%EOF
