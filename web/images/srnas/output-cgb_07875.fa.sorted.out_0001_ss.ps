%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu May 14 18:36:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCGUCCAUGAACACCCCGAUCCUUUGUUUUCGUGGGAUCACUAUUAGACUCGACUCUACCGCGCUGCAGGUUUUCCUGAUACGCCUGCGGA\
) } def
/len { sequence length } bind def

/coor [
[87.82611847 128.36849976]
[76.75093079 120.30902100]
[70.25286102 108.25124359]
[69.61119080 94.56902313]
[55.92869186 88.42172241]
[42.24620056 82.27441406]
[33.15211487 94.27873230]
[21.62018204 103.95359039]
[8.23081970 110.81623077]
[-6.34299183 114.52534485]
[-21.36954689 114.89802551]
[-36.09514618 111.91880035]
[-49.78190231 105.74022675]
[-61.74471283 96.67510986]
[-71.38555145 85.18065643]
[-78.22337341 71.83541107]
[-81.91810608 57.31012726]
[-82.28756714 42.33408737]
[-79.31643677 27.65845108]
[-92.99893188 21.51114464]
[-106.68142700 15.36384010]
[-120.36392212 9.21653557]
[-134.04641724 3.06923079]
[-147.72891235 -3.07807422]
[-163.48786926 -1.67596090]
[-171.92634583 -13.94956017]
[-185.60884094 -20.09686470]
[-201.86022949 -17.90038490]
[-211.67266846 -31.03994751]
[-204.95196533 -45.99869537]
[-188.61180115 -47.38835526]
[-179.46153259 -33.77935791]
[-165.77903748 -27.63205338]
[-150.99874878 -29.47386360]
[-141.58160400 -16.76056862]
[-127.89910889 -10.61326313]
[-114.21661377 -4.46595860]
[-100.53412628 1.68134642]
[-86.85163116 7.82865143]
[-73.16913605 13.97595596]
[-64.17002869 2.00858593]
[-52.72785568 -7.66069651]
[-39.41439819 -14.54449558]
[-24.89587975 -18.29471588]
[-9.89963818 -18.72015953]
[4.82231760 -15.79627514]
[18.53101921 -9.66654873]
[30.53762817 -0.63546598]
[40.23804855 10.84661198]
[47.14332199 24.20590401]
[50.90427780 38.77388763]
[51.32918167 53.82073975]
[48.39350510 68.59191895]
[62.07599640 74.73922729]
[75.75849152 80.88652802]
[88.55725098 71.32878113]
[104.41980743 69.44773865]
[119.09896088 75.74705505]
[128.66436768 88.54010010]
[130.55490112 104.40151978]
[144.43721008 110.08320618]
[158.31951904 115.76488495]
[172.20182800 121.44657135]
[186.26811218 126.65615082]
[200.50231934 131.38768005]
[214.81440735 135.87812805]
[229.20028687 140.12620544]
[243.65588379 144.13072205]
[258.17703247 147.89050293]
[272.69818115 151.65029907]
[287.21936035 155.41007996]
[302.87023926 150.51298523]
[314.75183105 161.81608582]
[310.64132690 177.69172668]
[294.76730347 181.80841064]
[283.45956421 169.93124390]
[268.93841553 166.17144775]
[254.41725159 162.41166687]
[239.89608765 158.65187073]
[232.47976685 160.05198669]
[224.95220947 154.51210022]
[210.56631470 150.26402283]
[203.10694885 151.41284180]
[195.77078247 145.62188721]
[181.53657532 140.89035034]
[176.77337646 142.29489136]
[171.08287048 140.57009888]
[166.52014160 135.32887268]
[152.63783264 129.64720154]
[138.75552368 123.96551514]
[124.87322235 118.28382874]
[114.51435089 127.24534607]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 55]
[5 54]
[6 53]
[19 40]
[20 39]
[21 38]
[22 37]
[23 36]
[24 35]
[26 33]
[27 32]
[60 91]
[61 90]
[62 89]
[63 88]
[64 85]
[65 84]
[66 82]
[67 81]
[68 79]
[69 78]
[70 77]
[71 76]
] def

init

% Start Annotations
4 55 0.0 1 colorpair
5 54 0.0 1 colorpair
6 53 0.0 1 colorpair
19 40 0.0 1 colorpair
20 39 0.0 1 colorpair
21 38 0.0 1 colorpair
22 37 0.0 1 colorpair
23 36 0.0 1 colorpair
24 35 0.0 1 colorpair
26 33 0.0 1 colorpair
27 32 0.0 1 colorpair
60 91 0.0 1 colorpair
61 90 0.0 1 colorpair
62 89 0.0 1 colorpair
63 88 0.0 1 colorpair
64 85 0.0 1 colorpair
65 84 0.0 1 colorpair
66 82 0.0 1 colorpair
67 81 0.0 1 colorpair
68 79 0.0 1 colorpair
69 78 0.0 1 colorpair
70 77 0.0 1 colorpair
71 76 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
