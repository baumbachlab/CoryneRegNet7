%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu May 14 18:36:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGUCGCGCUGUGGAUCGUGUGGUUCUGCAUCAACUUGUCCUACUACGGAGCCUUCAUUUGGAUUCCAUCGCUGCUGGUUGCCGACGGUUUCACCCUCGUGAAGUCUUUCCAAUUCACUCUGAUCAUCACCUUGGCUC\
) } def
/len { sequence length } bind def

/coor [
[154.61735535 118.78224945]
[139.96179199 115.58623505]
[125.27104950 112.55605316]
[110.54700470 109.69206238]
[97.26509857 114.06043243]
[86.58901215 105.03198242]
[71.86496735 102.16799927]
[57.14091873 99.30401611]
[42.11732483 104.26407623]
[31.10149193 94.23906708]
[16.37744522 91.37508392]
[7.26949835 92.81314087]
[1.35467660 88.27641296]
[-13.30088615 85.08040619]
[-27.95644951 81.88439941]
[-42.61201477 78.68838501]
[-57.26757812 75.49237823]
[-72.02304840 72.79496765]
[-86.86147308 70.59925079]
[-101.69989777 68.40353394]
[-118.61115265 75.59057617]
[-131.95968628 64.25382996]
[-146.84393311 62.39401245]
[-161.72819519 60.53419495]
[-176.61244202 58.67438126]
[-191.49670410 56.81456375]
[-206.38096619 54.95475006]
[-221.26521301 53.09493256]
[-227.67129517 66.79957581]
[-238.00028992 77.85250092]
[-251.24026489 85.17084503]
[-266.09411621 88.03763580]
[-281.10659790 86.17201233]
[-294.80694580 79.75675201]
[-305.85293579 69.42035675]
[-313.16241455 56.17547607]
[-316.01925659 41.31971359]
[-314.14358521 26.30848503]
[-307.71914673 12.61243629]
[-297.37533569 1.57336688]
[-284.12554932 -5.72722769]
[-269.26788330 -8.57410908]
[-254.25791931 -6.68836975]
[-240.56617737 -0.25475451]
[-229.53404236 10.09643650]
[-222.24232483 23.35109901]
[-219.40539551 38.21067810]
[-204.52114868 40.07049179]
[-189.63688660 41.93030930]
[-174.75263977 43.79012299]
[-159.86837769 45.64994049]
[-144.98411560 47.50975800]
[-130.09986877 49.36957169]
[-120.31119537 42.17323303]
[-107.84799957 43.65723038]
[-99.50418091 53.56510925]
[-84.66575623 55.76082611]
[-69.82733154 57.95654297]
[-66.74373627 56.08746719]
[-62.57966614 55.66873550]
[-58.05038071 57.20135117]
[-54.07156754 60.83681870]
[-39.41600418 64.03282928]
[-24.76044273 67.22883606]
[-10.10487843 70.42484283]
[4.55068445 73.62084961]
[19.24142838 76.65103912]
[33.96547699 79.51502228]
[47.93590927 74.35011292]
[60.00490189 84.57996368]
[74.72895050 87.44394684]
[89.45299530 90.30793762]
[102.73490143 85.93956757]
[113.41098785 94.96801758]
[128.13504028 97.83200073]
[137.24298096 96.39394379]
[143.15780640 100.93067932]
[157.81336975 104.12668610]
[172.31239319 94.41142273]
[189.03216553 98.07467651]
[197.78912354 112.38812256]
[212.51316833 115.25210571]
[227.23722839 118.11608887]
[241.96127319 120.98007965]
[256.68533325 123.84406281]
[265.79327393 122.40600586]
[271.70809937 126.94273376]
[286.36364746 130.13874817]
[301.01922607 133.33474731]
[308.48776245 119.53848267]
[319.51913452 108.40427399]
[333.22018433 100.82207489]
[348.48477173 97.39471436]
[364.08322144 98.38996887]
[378.76123047 103.71965027]
[391.34082031 112.94738770]
[400.81488037 125.32431030]
[406.42770386 139.84982300]
[407.73538208 155.35252380]
[422.45944214 158.21650696]
[437.18347168 161.08049011]
[451.90753174 163.94448853]
[466.63159180 166.80847168]
[476.64868164 155.16574097]
[491.15042114 150.10653687]
[506.23587036 152.99177551]
[517.84716797 163.04533386]
[522.86083984 177.56285095]
[519.92834473 192.63919067]
[509.83843994 204.21888733]
[495.30529785 209.18707275]
[480.23822021 206.20732117]
[468.69018555 196.08117676]
[463.76760864 181.53251648]
[449.04354858 178.66853333]
[434.31948853 175.80455017]
[419.59545898 172.94056702]
[404.87139893 170.07658386]
[398.52148438 182.97261047]
[389.03112793 193.78520203]
[377.04733276 201.76754761]
[363.38967896 206.36619568]
[348.99407959 207.25930786]
[334.84890747 204.37924194]
[321.92681885 197.91760254]
[311.11819458 188.31253052]
[303.16949463 176.21894836]
[298.63195801 162.46397400]
[297.82321167 147.99031067]
[283.16763306 144.79431152]
[268.51208496 141.59829712]
[253.82133484 138.56811523]
[239.09729004 135.70411682]
[224.37324524 132.84013367]
[209.64918518 129.97615051]
[194.92514038 127.11217499]
[185.31082153 135.76406860]
[172.27125549 137.29550171]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 78]
[2 77]
[3 75]
[4 74]
[6 72]
[7 71]
[8 70]
[10 68]
[11 67]
[13 66]
[14 65]
[15 64]
[16 63]
[17 62]
[18 58]
[19 57]
[20 56]
[22 53]
[23 52]
[24 51]
[25 50]
[26 49]
[27 48]
[28 47]
[81 136]
[82 135]
[83 134]
[84 133]
[85 132]
[87 131]
[88 130]
[89 129]
[99 118]
[100 117]
[101 116]
[102 115]
[103 114]
] def

init

% Start Annotations
1 78 0.0 1 colorpair
2 77 0.0 1 colorpair
3 75 0.0 1 colorpair
4 74 0.0 1 colorpair
6 72 0.0 1 colorpair
7 71 0.0 1 colorpair
8 70 0.0 1 colorpair
10 68 0.0 1 colorpair
11 67 0.0 1 colorpair
13 66 0.0 1 colorpair
14 65 0.0 1 colorpair
15 64 0.0 1 colorpair
16 63 0.0 1 colorpair
17 62 0.0 1 colorpair
18 58 0.0 1 colorpair
19 57 0.0 1 colorpair
20 56 0.0 1 colorpair
22 53 0.0 1 colorpair
23 52 0.0 1 colorpair
24 51 0.0 1 colorpair
25 50 0.0 1 colorpair
26 49 0.0 1 colorpair
27 48 0.0 1 colorpair
28 47 0.0 1 colorpair
81 136 0.0 1 colorpair
82 135 0.0 1 colorpair
83 134 0.0 1 colorpair
84 133 0.0 1 colorpair
85 132 0.0 1 colorpair
87 131 0.0 1 colorpair
88 130 0.0 1 colorpair
89 129 0.0 1 colorpair
99 118 0.0 1 colorpair
100 117 0.0 1 colorpair
101 116 0.0 1 colorpair
102 115 0.0 1 colorpair
103 114 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
