%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu May 14 16:15:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCACGCGACAUCAUCAUCGCACCGGUCGUUUCUGAGAAGUCCUACGGCCUCAUGGAGCAGAACGUUUACACGUUCUUCGUCUCCACUGACGCUAACAAGACUC\
) } def
/len { sequence length } bind def

/coor [
[69.54769135 210.71145630]
[63.58774185 219.78843689]
[54.92503738 226.27154541]
[44.60992432 229.40765381]
[33.88195801 228.84742737]
[24.02095604 224.68411255]
[13.17903328 235.05004883]
[2.33711076 245.41598511]
[-8.50481224 255.78192139]
[-6.28853607 271.13992310]
[-13.55249596 284.85174561]
[-27.50355148 291.64495850]
[-42.77723694 288.90740967]
[-53.50050735 277.69174194]
[-55.55004883 262.31063843]
[-48.13776779 248.67839050]
[-34.11384201 242.03692627]
[-18.87075233 244.94000244]
[-8.02882862 234.57406616]
[2.81309390 224.20812988]
[13.65501690 213.84217834]
[9.58757019 194.90534973]
[17.60001373 177.11805725]
[34.72171021 167.47897339]
[54.36291122 169.88832092]
[63.88964462 158.30206299]
[73.41638184 146.71580505]
[82.94312286 135.12956238]
[82.78812408 87.39463806]
[75.48329163 74.29351807]
[68.17845917 61.19239044]
[60.87362671 48.09126663]
[53.56879425 34.99014664]
[46.06879425 21.99976349]
[38.37530518 9.12303257]
[30.68181610 -3.75369954]
[22.98832703 -16.63043213]
[17.18282318 -20.32109451]
[14.62399483 -25.62822342]
[15.24643898 -30.51540756]
[8.33680248 -43.82919312]
[1.42716563 -57.14298248]
[-12.67650890 -65.51068115]
[-12.21117020 -81.90322876]
[2.34447956 -89.45736694]
[16.01683617 -80.40205383]
[14.74095249 -64.05261993]
[21.65058899 -50.73883057]
[28.56022644 -37.42504501]
[35.86505890 -24.32392120]
[43.55854797 -11.44718838]
[51.25203705 1.42954314]
[58.94552612 14.30627537]
[65.18002319 18.50245857]
[66.66991425 27.68531227]
[73.97474670 40.78643417]
[81.27957916 53.88755798]
[88.58441162 66.98868561]
[95.88924408 80.08980560]
[110.51316833 83.42761993]
[122.77895355 74.79336548]
[135.04475403 66.15910339]
[147.31053162 57.52485275]
[159.57632446 48.89059448]
[171.84211731 40.25634003]
[184.10791016 31.62208366]
[190.50669861 16.52282715]
[206.81335449 14.78352833]
[216.25297546 28.19342995]
[209.11489868 42.95757294]
[192.74217224 43.88787460]
[180.47637939 52.52212906]
[168.21058655 61.15638733]
[155.94479370 69.79064178]
[143.67900085 78.42489624]
[131.41320801 87.05915070]
[119.14742279 95.69341278]
[119.93138123 103.15232086]
[122.28327179 125.52906799]
[136.07618713 131.42443848]
[149.86911011 137.31982422]
[163.66201782 143.21519470]
[178.23506165 137.09948730]
[192.83241272 143.15696716]
[198.79370117 157.79385376]
[192.58222961 172.32633972]
[177.88313293 178.13255310]
[163.41712952 171.76777649]
[157.76664734 157.00810242]
[143.97373962 151.11273193]
[130.18081665 145.21736145]
[116.38790131 139.32197571]
[128.79681396 147.74925232]
[133.45069885 162.00903320]
[128.40196228 176.13385010]
[115.76342773 184.21267700]
[100.82412720 182.86468506]
[89.83589935 172.65396118]
[87.39714813 157.85353088]
[94.52937317 144.65629578]
[85.00263977 156.24253845]
[75.47589874 167.82879639]
[65.94916534 179.41505432]
[70.83094788 189.24447632]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 21]
[7 20]
[8 19]
[9 18]
[25 103]
[26 102]
[27 101]
[28 100]
[29 59]
[30 58]
[31 57]
[32 56]
[33 55]
[34 53]
[35 52]
[36 51]
[37 50]
[40 49]
[41 48]
[42 47]
[60 77]
[61 76]
[62 75]
[63 74]
[64 73]
[65 72]
[66 71]
[79 92]
[80 91]
[81 90]
[82 89]
] def

init

% Start Annotations
6 21 0.0 1 colorpair
7 20 0.0 1 colorpair
8 19 0.0 1 colorpair
9 18 0.0 1 colorpair
25 103 0.16 1 colorpair
26 102 0.0 1 colorpair
27 101 0.0 1 colorpair
28 100 0.0 1 colorpair
29 59 0.0 1 colorpair
30 58 0.0 1 colorpair
31 57 0.0 1 colorpair
32 56 0.0 1 colorpair
33 55 0.0 1 colorpair
34 53 0.0 1 colorpair
35 52 0.0 1 colorpair
36 51 0.0 1 colorpair
37 50 0.0 0.6 colorpair
40 49 0.0 1 colorpair
41 48 0.0 1 colorpair
42 47 0.0 1 colorpair
60 77 0.0 1 colorpair
61 76 0.0 1 colorpair
62 75 0.0 1 colorpair
63 74 0.0 1 colorpair
64 73 0.0 1 colorpair
65 72 0.0 1 colorpair
66 71 0.0 1 colorpair
79 92 0.0 1 colorpair
80 91 0.0 1 colorpair
81 90 0.0 1 colorpair
82 89 0.16 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
103 cmark
37 50 1 gmark
82 cmark

% End Annotations
showpage
end
%%EOF
