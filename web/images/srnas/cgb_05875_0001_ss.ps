%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu May 14 18:36:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
CACACCGAGUUCGAGGGCUCUGUCUACGUUCUGUCCAAGGAUGAAGGUGGCCGCCACACCCCAUUCUUCGACAACUACCGUCCUCAGUUCUACUUCCGC\
) } def
/len { sequence length } bind def

/coor [
[91.04319763 398.68698120]
[82.26983643 386.32559204]
[78.25640869 371.70819092]
[79.48756409 356.59991455]
[85.81462860 342.82516479]
[96.47357178 332.04727173]
[110.17728424 325.56774902]
[108.76566315 310.63433838]
[107.35403442 295.70089722]
[105.94241333 280.76748657]
[104.53078461 265.83404541]
[100.69862366 259.35491943]
[103.31692505 250.41052246]
[102.37506866 235.44010925]
[101.43321228 220.46971130]
[100.49135590 205.49931335]
[99.54949951 190.52891541]
[98.60763550 175.55851746]
[84.52476501 167.28657532]
[78.02242279 152.12445068]
[81.81214905 135.89849854]
[94.60892487 124.97086334]
[93.19729614 110.03743744]
[83.26159668 121.27495575]
[68.67234802 124.76119232]
[54.72953415 119.22966003]
[46.49829102 106.68984985]
[46.96887207 91.69723511]
[55.97032166 79.69832611]
[70.23258972 75.05207825]
[84.57449341 79.44638824]
[93.78656006 91.28669739]
[96.13307953 76.47136688]
[98.47959900 61.65604401]
[100.82611084 46.84072113]
[95.34289551 32.00006866]
[104.97592163 20.63987160]
[107.32244110 5.82454729]
[109.66895294 -8.99077797]
[112.01547241 -23.80610275]
[114.36199188 -38.62142944]
[116.70850372 -53.43675232]
[119.05502319 -68.25207520]
[112.07638550 -79.23902893]
[114.45455170 -91.62545013]
[124.35271454 -98.77360535]
[127.16342926 -113.50791168]
[129.97415161 -128.24221802]
[132.78486633 -142.97653198]
[122.76190948 -154.97962952]
[122.85101318 -170.61695862]
[133.01010132 -182.50505066]
[148.44238281 -185.03071594]
[161.86117554 -177.00141907]
[166.93057251 -162.20832825]
[161.25692749 -147.63630676]
[147.51918030 -140.16581726]
[144.70846558 -125.43150330]
[141.89773560 -110.69719696]
[139.08702087 -95.96288300]
[145.79179382 -79.82919312]
[133.87034607 -65.90556335]
[131.52383423 -51.09023666]
[129.17730713 -36.27490997]
[126.83079529 -21.45958519]
[124.48428345 -6.64426088]
[122.13776398 8.17106438]
[119.79124451 22.98638916]
[125.44230652 36.76734924]
[115.64144135 49.18723679]
[113.29492188 64.00256348]
[110.94840240 78.81788635]
[108.60189056 93.63320923]
[108.13072968 108.62580872]
[109.54235077 123.55924225]
[121.97888184 129.73504639]
[129.63980103 141.18525696]
[130.58804321 154.82015991]
[124.68065643 167.02464294]
[113.57804108 174.61665344]
[114.51989746 189.58705139]
[115.46175385 204.55744934]
[116.40361023 219.52786255]
[117.34547424 234.49826050]
[118.28733063 249.46865845]
[119.46421814 264.42242432]
[120.87583923 279.35583496]
[122.28746796 294.28927612]
[123.69908905 309.22271729]
[125.11071014 324.15612793]
[139.78582764 327.95306396]
[152.27555847 336.54275513]
[161.07168579 348.88793945]
[165.11203003 363.49792480]
[163.90872192 378.60842896]
[157.60705566 392.39483643]
[146.96800232 403.19235229]
[133.27624512 409.69711304]
[118.18516541 411.12362671]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 90]
[8 89]
[9 88]
[10 87]
[11 86]
[13 85]
[14 84]
[15 83]
[16 82]
[17 81]
[18 80]
[22 75]
[23 74]
[32 73]
[33 72]
[34 71]
[35 70]
[37 68]
[38 67]
[39 66]
[40 65]
[41 64]
[42 63]
[43 62]
[46 60]
[47 59]
[48 58]
[49 57]
] def

init

% Start Annotations
7 90 0.0 1 colorpair
8 89 0.0 1 colorpair
9 88 0.0 1 colorpair
10 87 0.0 1 colorpair
11 86 0.0 1 colorpair
13 85 0.0 1 colorpair
14 84 0.0 1 colorpair
15 83 0.0 1 colorpair
16 82 0.0 1 colorpair
17 81 0.0 1 colorpair
18 80 0.0 1 colorpair
22 75 0.0 1 colorpair
23 74 0.0 1 colorpair
32 73 0.0 1 colorpair
33 72 0.0 1 colorpair
34 71 0.0 1 colorpair
35 70 0.0 1 colorpair
37 68 0.0 1 colorpair
38 67 0.0 1 colorpair
39 66 0.0 1 colorpair
40 65 0.0 1 colorpair
41 64 0.0 1 colorpair
42 63 0.0 1 colorpair
43 62 0.0 1 colorpair
46 60 0.0 1 colorpair
47 59 0.0 1 colorpair
48 58 0.0 1 colorpair
49 57 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
