%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu May 14 18:36:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUCUUUCACGGUCCCACCCGUUCGGUUCUACUAGGCAUUUCCCACUAAGGGAAGGUGCCGUUCUUCCGAAAAGCUCCCCGGUGAUUGCCGGAUCAUAACCUCCGCCACAACGAGUGAAAAGAUUGCUACAACCGUUGCGCGACU\
) } def
/len { sequence length } bind def

/coor [
[154.07716370 148.17658997]
[141.90408325 139.41212463]
[129.73098755 130.64764404]
[120.42873383 138.28140259]
[109.19757843 143.11322021]
[96.87577820 144.66641235]
[84.41570282 142.71348572]
[72.81020355 137.30210876]
[63.01356888 128.75961304]
[53.73349762 140.54437256]
[44.45342636 152.32911682]
[35.17335510 164.11386108]
[37.28803635 179.77603149]
[27.64219856 192.29534912]
[11.95854378 194.24432373]
[-0.45809385 184.46665955]
[-2.24114227 168.76327515]
[7.66724873 156.45071411]
[23.38860703 154.83378601]
[32.66867828 143.04904175]
[41.94874954 131.26429749]
[51.22882080 119.47954559]
[47.71144867 104.89777374]
[34.07918549 98.63986969]
[20.44692039 92.38196564]
[6.81465578 86.12406158]
[-5.72100163 94.88787842]
[-20.86023903 96.19182587]
[-34.52863693 89.78547668]
[-43.09785843 77.48001862]
[-44.34869385 62.63747787]
[-57.98095703 56.37957382]
[-64.70560455 56.61853409]
[-69.74800110 53.80437469]
[-72.05611420 49.54795456]
[-85.40653229 42.70935440]
[-98.75694275 35.87075424]
[-112.10736084 29.03215218]
[-125.45777130 22.19355202]
[-138.88098145 15.49898052]
[-152.37545776 8.94921207]
[-165.86991882 2.39944315]
[-179.36437988 -4.15032530]
[-192.85884094 -10.70009422]
[-208.42755127 -6.82775545]
[-221.07383728 -16.69947243]
[-221.09657288 -32.74251175]
[-208.47830200 -42.65002060]
[-192.89868164 -38.82181168]
[-186.30906677 -24.19455719]
[-172.81460571 -17.64478874]
[-159.32014465 -11.09502029]
[-145.82568359 -4.54525137]
[-132.33122253 2.00451708]
[-124.88642883 2.09625983]
[-118.61917114 8.84313869]
[-105.26876068 15.68173885]
[-91.91834259 22.52033997]
[-78.56793213 29.35894012]
[-65.21751404 36.19754028]
[-51.72305298 42.74730682]
[-38.09078979 49.00521088]
[-26.02018738 40.27788925]
[-11.10261631 38.75406265]
[2.66576934 44.94259644]
[11.54623318 57.27280807]
[13.07256031 72.49179840]
[26.70482445 78.74970245]
[40.33708954 85.00760651]
[53.96935272 91.26551056]
[56.94240189 82.73358154]
[61.46223450 75.01347351]
[67.32898712 68.37854004]
[74.29596710 63.05590057]
[82.07990265 59.21873856]
[90.37236023 56.98078156]
[98.85198975 56.39316559]
[107.19689941 57.44375610]
[115.09691620 60.05887604]
[122.78248596 47.17741776]
[130.46806335 34.29595947]
[138.15362549 21.41449928]
[145.83920288 8.53304005]
[145.53327942 -7.86325407]
[159.71766663 -16.09341621]
[173.80065918 -7.69096231]
[173.29489136 8.70038414]
[158.72065735 16.21861076]
[151.03509521 29.10007095]
[143.34951782 41.98152924]
[135.66395569 54.86298752]
[127.97837830 67.74444580]
[133.46739197 73.48313904]
[137.79882812 80.13900757]
[140.82286072 87.48182678]
[142.43489075 95.25763702]
[142.57917786 103.19747162]
[141.25071716 111.02671814]
[138.49546814 118.47456360]
[150.66854858 127.23903656]
[162.84162903 136.00350952]
[181.34565735 132.21298218]
[196.52870178 142.90653992]
[199.10305786 160.97755432]
[211.64193726 169.21020508]
[224.18081665 177.44284058]
[236.99394226 175.59642029]
[247.28353882 182.77053833]
[249.81317139 194.64599609]
[262.17202759 203.14653015]
[274.53085327 211.64704895]
[286.88970947 220.14758301]
[299.24856567 228.64810181]
[308.16253662 230.95892334]
[311.77917480 237.46685791]
[323.95227051 246.23133850]
[336.72607422 240.94454956]
[350.33389282 242.66505432]
[361.21636963 250.83451843]
[366.58074951 263.22207642]
[365.11715698 276.53253174]
[377.09884644 285.55691528]
[393.43316650 287.01342773]
[400.09262085 301.99954224]
[390.22650146 315.09884644]
[373.98422241 312.83587646]
[368.07446289 297.53860474]
[356.09277344 288.51425171]
[340.59384155 293.82180786]
[324.81948853 288.82028198]
[315.01596069 275.28329468]
[315.18777466 258.40441895]
[303.01470947 249.63995361]
[290.74801636 241.00694275]
[278.38919067 232.50642395]
[266.03033447 224.00588989]
[253.67149353 215.50537109]
[241.31265259 207.00483704]
[223.79922485 206.60122681]
[215.94818115 189.98171997]
[203.40930176 181.74908447]
[190.87040710 173.51643372]
[180.38476562 178.22280884]
[168.81269836 177.23989868]
[159.07121277 170.69831848]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 101]
[2 100]
[3 99]
[9 22]
[10 21]
[11 20]
[12 19]
[23 70]
[24 69]
[25 68]
[26 67]
[31 62]
[32 61]
[35 60]
[36 59]
[37 58]
[38 57]
[39 56]
[40 54]
[41 53]
[42 52]
[43 51]
[44 50]
[79 92]
[80 91]
[81 90]
[82 89]
[83 88]
[104 142]
[105 141]
[106 140]
[109 138]
[110 137]
[111 136]
[112 135]
[113 134]
[115 133]
[116 132]
[121 128]
[122 127]
] def

init

% Start Annotations
1 101 0.0 1 colorpair
2 100 0.0 1 colorpair
3 99 0.0 1 colorpair
9 22 0.0 1 colorpair
10 21 0.0 1 colorpair
11 20 0.0 1 colorpair
12 19 0.0 1 colorpair
23 70 0.0 1 colorpair
24 69 0.0 1 colorpair
25 68 0.0 1 colorpair
26 67 0.0 1 colorpair
31 62 0.0 1 colorpair
32 61 0.0 1 colorpair
35 60 0.0 1 colorpair
36 59 0.0 1 colorpair
37 58 0.0 1 colorpair
38 57 0.0 1 colorpair
39 56 0.0 1 colorpair
40 54 0.0 1 colorpair
41 53 0.0 1 colorpair
42 52 0.0 1 colorpair
43 51 0.0 1 colorpair
44 50 0.0 1 colorpair
79 92 0.0 1 colorpair
80 91 0.0 1 colorpair
81 90 0.0 1 colorpair
82 89 0.0 1 colorpair
83 88 0.0 1 colorpair
104 142 0.0 1 colorpair
105 141 0.0 1 colorpair
106 140 0.0 1 colorpair
109 138 0.0 1 colorpair
110 137 0.0 1 colorpair
111 136 0.0 1 colorpair
112 135 0.0 1 colorpair
113 134 0.0 1 colorpair
115 133 0.0 1 colorpair
116 132 0.0 1 colorpair
121 128 0.0 1 colorpair
122 127 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
