%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu May 14 18:36:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCAGACUAUUUGAUCGACAUCACCGAUGUCAGUCAUAAGCACGAUCUUAUUCUUGGCUACCAGGAUAUUGUUGGUUUUUGGCCCU\
) } def
/len { sequence length } bind def

/coor [
[47.36544037 212.11967468]
[47.99778366 227.10633850]
[44.64916992 241.72779846]
[37.55744171 254.94548035]
[27.22632027 265.82058716]
[14.38960266 273.58065796]
[-0.04093286 277.67453003]
[-15.04030895 277.81137085]
[-29.54314041 273.98150635]
[-42.51931381 266.45693970]
[-53.04714966 255.77217102]
[-60.37887573 242.68606567]
[-63.99372101 228.12815857]
[-63.63493729 213.13244629]
[-59.32800674 198.76406860]
[-51.37884140 186.04357910]
[-40.35205841 175.87451172]
[-27.03325462 168.97999573]
[-41.69046021 165.79151917]
[-56.34766006 162.60302734]
[-71.00486755 159.41455078]
[-85.66207123 156.22607422]
[-100.31926727 153.03759766]
[-117.08167267 155.57890320]
[-124.16396332 140.17509460]
[-111.32270813 129.10537720]
[-97.13079071 138.38038635]
[-82.47358704 141.56887817]
[-67.81638336 144.75735474]
[-53.15918350 147.94583130]
[-38.50197983 151.13430786]
[-23.84477615 154.32278442]
[-18.37996292 152.00494385]
[-11.95100784 152.61271667]
[1.21417701 145.42399597]
[14.37936211 138.23526001]
[27.54454613 131.04652405]
[35.00691223 118.15612030]
[50.82712555 118.33326721]
[63.99231339 111.14453125]
[77.15749359 103.95579529]
[90.32268524 96.76706696]
[95.46513367 90.30339813]
[104.08855438 89.56626892]
[117.50193787 82.85200500]
[130.91531372 76.13774872]
[144.32868958 69.42349243]
[149.40762329 54.69792938]
[163.10635376 48.07979584]
[177.11361694 53.01252747]
[190.52700806 46.29827118]
[203.94038391 39.58401108]
[210.39163208 32.79135132]
[217.95449829 32.87913895]
[231.59898376 26.64791298]
[245.24345398 20.41668892]
[258.88793945 14.18546295]
[272.53240967 7.95423794]
[284.42846680 -4.12551975]
[299.32928467 3.96161032]
[295.68316650 20.51884842]
[278.76364136 21.59871674]
[265.11917114 27.82994270]
[251.47468567 34.06116867]
[237.83020020 40.29239273]
[224.18572998 46.52361679]
[210.65463257 52.99739075]
[197.24125671 59.71165085]
[183.82788086 66.42591095]
[179.38249207 80.59538269]
[165.87506104 87.59568024]
[151.04295349 82.83686829]
[137.62957764 89.55113220]
[124.21619415 96.26538849]
[110.80281830 102.97964478]
[97.51141357 109.93225098]
[84.34622955 117.12098694]
[71.18104553 124.30971527]
[58.01586151 131.49845886]
[49.61183548 144.90303040]
[34.73328018 144.21170044]
[21.56809616 151.40043640]
[8.40291214 158.58917236]
[-4.76227331 165.77790833]
[9.96182823 168.64161682]
[23.40660858 175.29277039]
[34.61710358 185.25895691]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[18 32]
[19 31]
[20 30]
[21 29]
[22 28]
[23 27]
[34 84]
[35 83]
[36 82]
[37 81]
[39 79]
[40 78]
[41 77]
[42 76]
[44 75]
[45 74]
[46 73]
[47 72]
[50 69]
[51 68]
[52 67]
[54 66]
[55 65]
[56 64]
[57 63]
[58 62]
] def

init

% Start Annotations
18 32 0.0 1 colorpair
19 31 0.0 1 colorpair
20 30 0.0 1 colorpair
21 29 0.0 1 colorpair
22 28 0.0 1 colorpair
23 27 0.0 1 colorpair
34 84 0.0 1 colorpair
35 83 0.0 1 colorpair
36 82 0.0 1 colorpair
37 81 0.0 1 colorpair
39 79 0.0 1 colorpair
40 78 0.0 1 colorpair
41 77 0.0 1 colorpair
42 76 0.0 1 colorpair
44 75 0.0 1 colorpair
45 74 0.0 1 colorpair
46 73 0.0 1 colorpair
47 72 0.0 1 colorpair
50 69 0.0 1 colorpair
51 68 0.0 1 colorpair
52 67 0.0 1 colorpair
54 66 0.0 1 colorpair
55 65 0.0 1 colorpair
56 64 0.0 1 colorpair
57 63 0.0 1 colorpair
58 62 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
