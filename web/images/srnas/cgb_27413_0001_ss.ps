%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu May 14 18:36:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGACAUCGUUUCGUCAAGACCUUUGUCUCAUCUGUAGACGUGGAGGAUUGGGGUCGUUGACUCGCCUUCGGCACUAAUUUGAGCCAAGUCAGGCAAAAAGC\
) } def
/len { sequence length } bind def

/coor [
[78.65340424 209.71376038]
[63.67740250 208.86558533]
[49.45729828 204.09182739]
[37.00312042 195.73159790]
[27.19947624 184.37869263]
[20.74270058 170.83949280]
[18.09140968 156.07565308]
[19.43391991 141.13584900]
[24.67487526 127.08123779]
[33.44201660 114.91007233]
[45.11263275 105.48686981]
[58.85776901 99.48094177]
[73.70113373 97.31887817]
[88.58598328 99.15361023]
[77.58279419 88.95900726]
[66.57961273 78.76440430]
[55.57642746 68.56980133]
[44.57324219 58.37519836]
[33.41587067 48.34957504]
[22.10690880 38.49526978]
[10.79794502 28.64096260]
[-0.51101768 18.78665733]
[-11.81998062 8.93235016]
[-23.12894440 -0.92195600]
[-38.61636734 -4.15464163]
[-43.12880325 -18.34926033]
[-54.43776703 -28.20356750]
[-65.74672699 -38.05787277]
[-77.05569458 -47.91217804]
[-83.72991943 -49.62205124]
[-87.81158447 -53.88226700]
[-88.72998810 -58.72857666]
[-99.41716003 -69.25399017]
[-110.10432434 -79.77941132]
[-125.38874817 -77.10246277]
[-139.31274414 -83.95095062]
[-146.52226257 -97.69149780]
[-144.24508667 -113.04057312]
[-133.35684204 -124.09614563]
[-118.04428101 -126.60712433]
[-104.19539642 -119.60799408]
[-97.13536072 -105.79004669]
[-99.57891083 -90.46657562]
[-88.89173889 -79.94116211]
[-78.20456696 -69.41574860]
[-67.20138550 -59.22114182]
[-55.89242172 -49.36683655]
[-44.58345795 -39.51253128]
[-33.27449799 -29.65822411]
[-18.59596443 -27.13038445]
[-13.27463722 -12.23091888]
[-1.96567428 -2.37661266]
[9.34328842 7.47769403]
[20.65225220 17.33200073]
[31.96121407 27.18630600]
[43.27017593 37.04061508]
[50.50362015 39.09659576]
[54.76784515 47.37201309]
[65.77102661 57.56661606]
[76.77421570 67.76121521]
[87.77739716 77.95581818]
[98.78058624 88.15042114]
[103.58319092 88.38750458]
[107.99477386 90.53012848]
[111.27647400 94.30284882]
[126.06590271 96.80738831]
[140.85533142 99.31192780]
[155.64477539 101.81646729]
[171.14056396 89.28684235]
[190.59822083 91.87911224]
[201.92382812 107.54557800]
[216.88023376 108.68824768]
[231.83665466 109.83092499]
[246.18614197 103.16738129]
[258.28701782 111.85174561]
[270.11645508 101.37129974]
[285.88665771 102.40856934]
[296.24145508 114.34815979]
[295.03750610 130.10652161]
[282.98910522 140.33450317]
[267.24435425 138.96401978]
[257.14434814 126.80815887]
[243.86463928 133.55343628]
[230.69396973 124.78733826]
[215.73756409 123.64466095]
[200.78114319 122.50199127]
[194.89735413 131.26776123]
[185.78826904 136.76454163]
[175.12794495 137.90141296]
[164.90992737 134.39630127]
[157.07449341 126.84173584]
[153.14022827 116.60589600]
[138.35079956 114.10135651]
[123.56137085 111.59681702]
[108.77193451 109.09227753]
[119.30394745 119.77294922]
[126.64077759 132.85618591]
[130.26130676 147.41268921]
[129.90838623 162.40852356]
[125.60707092 176.77859497]
[117.66287231 189.50218201]
[106.64006042 199.67556763]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 62]
[15 61]
[16 60]
[17 59]
[18 58]
[19 56]
[20 55]
[21 54]
[22 53]
[23 52]
[24 51]
[26 49]
[27 48]
[28 47]
[29 46]
[32 45]
[33 44]
[34 43]
[65 95]
[66 94]
[67 93]
[68 92]
[71 86]
[72 85]
[73 84]
[75 82]
] def

init

% Start Annotations
14 62 0.0 1 colorpair
15 61 0.0 1 colorpair
16 60 0.0 1 colorpair
17 59 0.0 1 colorpair
18 58 0.0 1 colorpair
19 56 0.0 1 colorpair
20 55 0.0 1 colorpair
21 54 0.0 1 colorpair
22 53 0.0 1 colorpair
23 52 0.0 1 colorpair
24 51 0.0 1 colorpair
26 49 0.0 1 colorpair
27 48 0.0 1 colorpair
28 47 0.0 1 colorpair
29 46 0.0 1 colorpair
32 45 0.0 1 colorpair
33 44 0.0 1 colorpair
34 43 0.0 1 colorpair
65 95 0.0 1 colorpair
66 94 0.0 1 colorpair
67 93 0.0 1 colorpair
68 92 0.0 1 colorpair
71 86 0.0 1 colorpair
72 85 0.0 1 colorpair
73 84 0.0 1 colorpair
75 82 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
