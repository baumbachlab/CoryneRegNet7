%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu May 14 18:36:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUAUAGUUUUAGGAUCGGGCCGGGCCACAGGCUAUGAGCAGCAAAAAUCCGUAGCGACGAUAACCUAUUCAAUGAGUAGUG_\
) } def
/len { sequence length } bind def

/coor [
[139.02673340 352.89022827]
[136.27047729 338.14562988]
[133.51423645 323.40103149]
[130.75799561 308.65643311]
[128.00175476 293.91183472]
[125.24551392 279.16723633]
[111.97667694 275.42971802]
[101.59721375 266.25695801]
[96.20481873 253.42553711]
[96.92273712 239.45887756]
[103.66632843 227.13102722]
[115.14839935 218.91571045]
[112.93887329 204.07934570]
[110.72934723 189.24296570]
[108.51982117 174.40658569]
[105.76358032 159.66200256]
[102.46437836 145.02931213]
[99.16518402 130.39663696]
[95.86598969 115.76396179]
[84.17102814 103.87763214]
[89.04790497 87.93169403]
[85.21026611 73.43091583]
[80.83941650 59.08184814]
[75.94133759 44.90409088]
[71.04325867 30.72633362]
[66.14517975 16.54857635]
[51.93021393 15.41878891]
[39.27856827 8.93534279]
[30.11612129 -1.87716413]
[25.82312202 -15.33807850]
[27.02632713 -29.37187576]
[33.50773621 -41.82817841]
[44.24315643 -50.81124878]
[39.87231064 -65.16031647]
[35.50146484 -79.50937653]
[21.43859100 -86.72126007]
[16.67379951 -101.79017639]
[24.03395462 -115.77601624]
[39.15240860 -120.38121796]
[53.05964661 -112.87361145]
[57.50475693 -97.70731354]
[49.85052872 -83.88022614]
[54.22137451 -69.53115845]
[58.59222031 -55.18209457]
[74.32226562 -53.09495544]
[87.64728546 -44.37324905]
[95.91410828 -30.69390297]
[97.45093536 -14.72674370]
[91.90522766 0.38652885]
[80.32293701 11.65049648]
[85.22101593 25.82825279]
[90.11909485 40.00601196]
[95.01717377 54.18376923]
[99.06014252 57.12307358]
[101.15342712 62.73665237]
[99.71104431 69.59327698]
[103.54868317 84.09404755]
[113.35231018 90.65611267]
[116.15925598 102.11442566]
[110.49867249 112.46475983]
[113.79786682 127.09744263]
[117.09706116 141.73011780]
[120.39625549 156.36280823]
[124.84449005 161.77639771]
[125.58283234 167.72189331]
[123.35619354 172.19706726]
[125.56571960 187.03344727]
[127.77524567 201.86981201]
[129.98477173 216.70619202]
[145.33348083 222.53823853]
[155.64276123 235.19792175]
[158.21571350 251.22598267]
[152.45321655 266.30245972]
[139.99011230 276.41098022]
[142.74635315 291.15557861]
[145.50259399 305.90017700]
[148.25883484 320.64477539]
[151.01507568 335.38937378]
[153.77131653 350.13397217]
[166.94982910 358.85766602]
[170.01794434 374.36126709]
[161.15541077 387.44680786]
[145.62022400 390.35083008]
[132.62911987 381.35046387]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 79]
[2 78]
[3 77]
[4 76]
[5 75]
[6 74]
[12 69]
[13 68]
[14 67]
[15 66]
[16 63]
[17 62]
[18 61]
[19 60]
[21 57]
[22 56]
[23 53]
[24 52]
[25 51]
[26 50]
[33 44]
[34 43]
[35 42]
] def

init

% Start Annotations
1 79 0.0 1 colorpair
2 78 0.0 1 colorpair
3 77 0.0 0.6 colorpair
4 76 0.0 1 colorpair
5 75 0.0 1 colorpair
6 74 0.0 1 colorpair
12 69 0.0 1 colorpair
13 68 0.0 1 colorpair
14 67 0.0 1 colorpair
15 66 0.0 1 colorpair
16 63 0.0 1 colorpair
17 62 0.0 1 colorpair
18 61 0.0 1 colorpair
19 60 0.0 1 colorpair
21 57 0.0 1 colorpair
22 56 0.0 1 colorpair
23 53 0.0 1 colorpair
24 52 0.0 1 colorpair
25 51 0.0 1 colorpair
26 50 0.0 1 colorpair
33 44 0.0 1 colorpair
34 43 0.0 1 colorpair
35 42 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
3 77 1 gmark

% End Annotations
showpage
end
%%EOF
