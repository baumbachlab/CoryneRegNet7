%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu May 14 18:35:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGCUAGUUAUAUUUAUUCUCAAUAUCAUGCCCGAGCAACAGAAGUAAUUCCUCUUACAACCAAGCUUGACAUAGUUCGCUUUCUCAGAGCUGAUCCAUAUCUCAUGGGCCUU\
) } def
/len { sequence length } bind def

/coor [
[69.33694458 169.41596985]
[77.61370087 155.25872803]
[77.20038605 140.26443481]
[76.78706360 125.27012634]
[75.60778809 140.22369385]
[71.39496613 154.61994934]
[64.32672119 167.85021973]
[54.70189667 179.35511780]
[42.92743301 188.64822388]
[29.50114632 195.33663940]
[14.99070358 199.13757324]
[0.00960278 199.89030457]
[-14.80875683 197.56303406]
[-28.83785629 192.25413513]
[-41.48454666 184.18807983]
[-52.21413040 173.70590210]
[-60.57295990 161.25079346]
[-66.20761871 147.34933472]
[-68.87989044 132.58927917]
[-68.47677612 117.59469604]
[-65.01531982 102.99954987]
[-58.64188004 89.42091370]
[-49.62592316 77.43289948]
[-38.34864044 67.54235840]
[-25.28683090 60.16745377]
[-10.99275303 55.62000275]
[3.92924500 54.09226608]
[18.84826279 55.64884186]
[33.13352585 60.22391129]
[46.18105316 67.62404633]
[57.43919754 77.53636932]
[66.43196869 89.54179382]
[72.77825165 103.13012695]
[67.90776062 88.94287109]
[63.03726959 74.75560760]
[58.16677856 60.56835175]
[53.29628372 46.38109207]
[38.99052429 45.90227890]
[25.74379539 40.55899811]
[15.15415478 31.01802826]
[8.49149704 18.45118713]
[6.54529095 4.39143705]
[9.53108311 -9.45409870]
[17.06683922 -21.41142082]
[28.22168732 -30.04204369]
[23.74396515 -44.35811996]
[19.26624298 -58.67419434]
[14.78852081 -72.99027252]
[0.67226219 -80.09708405]
[-4.20476246 -95.13005066]
[3.05089927 -109.17038727]
[18.13459206 -113.88819885]
[32.09742737 -106.48449707]
[36.65550613 -91.35176849]
[29.10459518 -77.46799469]
[33.58231735 -63.15191650]
[38.06003952 -48.83584213]
[42.53776169 -34.51976776]
[58.27864075 -33.36568451]
[72.41842651 -26.26739311]
[82.79815674 -14.27591896]
[87.82047272 0.80812818]
[86.69539642 16.70489502]
[79.56443787 30.99986649]
[67.48354340 41.51060104]
[72.35403442 55.69786072]
[77.22452545 69.88511658]
[82.09501648 84.07238007]
[86.96551514 98.25963593]
[84.02059937 87.41749573]
[90.05898285 74.33056641]
[105.69539642 65.75474548]
[126.96626282 67.92545319]
[141.82409668 65.86515045]
[156.68193054 63.80484772]
[171.53974915 61.74454498]
[186.39758301 59.68424225]
[201.25541687 57.62393951]
[207.64094543 43.58012772]
[220.61781311 35.23721313]
[236.04516602 35.25738525]
[249.00018311 43.63420868]
[255.34896851 57.69466782]
[253.06564331 72.95212555]
[242.87879944 84.53797913]
[228.03904724 88.75522614]
[213.28167725 84.25815582]
[203.31571960 72.48177338]
[188.45788574 74.54207611]
[173.60005188 76.60237885]
[158.74223328 78.66268158]
[143.88439941 80.72298431]
[129.02656555 82.78328705]
[126.20424652 89.73199463]
[120.55960083 103.62940216]
[117.73728180 110.57810974]
[126.95047760 122.41521454]
[136.16366577 134.25231934]
[145.37686157 146.08943176]
[161.05477905 149.49267578]
[168.03961182 163.93539429]
[160.97317505 178.33833313]
[145.27624512 181.65283203]
[132.99015808 171.33625793]
[133.53974915 155.30262756]
[124.32656097 143.46551514]
[115.11336517 131.62840271]
[105.90017700 119.79129791]
[91.78137207 124.85681152]
[92.19468689 139.85112000]
[92.60800171 154.84541321]
[101.65207672 168.52520752]
[94.08597565 183.07464600]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 111]
[3 110]
[4 109]
[33 69]
[34 68]
[35 67]
[36 66]
[37 65]
[45 58]
[46 57]
[47 56]
[48 55]
[73 93]
[74 92]
[75 91]
[76 90]
[77 89]
[78 88]
[96 108]
[97 107]
[98 106]
[99 105]
] def

init

% Start Annotations
2 111 0.0 1 colorpair
3 110 0.0 1 colorpair
4 109 0.0 1 colorpair
33 69 0.0 1 colorpair
34 68 0.0 1 colorpair
35 67 0.0 1 colorpair
36 66 0.0 1 colorpair
37 65 0.0 1 colorpair
45 58 0.0 1 colorpair
46 57 0.0 1 colorpair
47 56 0.0 1 colorpair
48 55 0.0 1 colorpair
73 93 0.0 1 colorpair
74 92 0.0 1 colorpair
75 91 0.0 1 colorpair
76 90 0.0 1 colorpair
77 89 0.0 1 colorpair
78 88 0.0 1 colorpair
96 108 0.0 1 colorpair
97 107 0.0 1 colorpair
98 106 0.0 1 colorpair
99 105 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
