%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu May 14 18:36:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGUUCUGAGACUGCUUGAUGCUCUGCCUCACACAGUUCCGGAAAUUCCGUGGCGACUGUAGAUAUUGGACAGUGAUGCUGGCAGAGUUGCAACCCGU\
) } def
/len { sequence length } bind def

/coor [
[38.74199677 325.32739258]
[29.63660240 325.02243042]
[22.76320457 338.35498047]
[15.88980770 351.68750000]
[9.01640987 365.02001953]
[10.33675957 381.36593628]
[-3.31091666 390.45840454]
[-17.88706017 382.94387817]
[-18.39698410 366.55267334]
[-4.31612206 358.14663696]
[2.55727577 344.81411743]
[9.43067360 331.48156738]
[16.30407143 318.14904785]
[7.69054842 298.89810181]
[15.75816727 279.11892700]
[35.88319778 271.18524170]
[40.56370163 256.93417358]
[45.24420166 242.68310547]
[38.31607437 229.54779053]
[42.85976028 215.02850342]
[56.68426514 207.85070801]
[61.36476898 193.59963989]
[66.04527283 179.34857178]
[70.72576904 165.09750366]
[75.40627289 150.84643555]
[80.08677673 136.59536743]
[84.76727295 122.34430695]
[89.44777679 108.09323883]
[93.21499634 93.57400513]
[96.05376434 78.84507751]
[98.89253235 64.11614990]
[101.73130035 49.38721848]
[101.73130035 34.38721848]
[98.89253235 19.65828705]
[96.05376434 4.92935658]
[93.21499634 -9.79957390]
[90.37622833 -24.52850342]
[87.53746033 -39.25743484]
[84.23280334 -53.88888168]
[80.23569489 -68.34651184]
[76.00970459 -82.73890686]
[71.78372192 -97.13130188]
[67.55773163 -111.52369690]
[57.29391098 -125.01778412]
[67.41933441 -138.61602783]
[83.28914642 -132.65068054]
[81.95012665 -115.74968719]
[86.17611694 -101.35729218]
[90.40209961 -86.96489716]
[94.62808990 -72.57250214]
[99.62435913 -66.93852234]
[98.75202942 -57.65610123]
[102.50068665 -54.43096161]
[104.14725494 -48.74737930]
[102.26638794 -42.09620285]
[105.10515594 -27.36727333]
[107.94393158 -12.63834286]
[110.78269958 2.09058785]
[113.62146759 16.81951904]
[116.46023560 31.54844856]
[123.93357086 18.54270935]
[136.20606995 9.91799259]
[150.97457886 7.29288578]
[165.46751404 11.16003704]
[176.96501160 20.79370499]
[183.30935669 34.38595581]
[183.30990601 49.38595581]
[176.96658325 62.97867966]
[165.46980286 72.61320496]
[150.97715759 76.48143768]
[136.20845032 73.85743713]
[123.93531036 65.23363495]
[116.46023560 52.22598648]
[113.62146759 66.95491791]
[110.78269958 81.68384552]
[107.94393158 96.41278076]
[109.60074615 99.21543884]
[110.19168854 102.72301483]
[109.43896484 106.50894928]
[107.23944855 110.04518127]
[103.69884491 112.77374268]
[99.01834106 127.02481079]
[94.33784485 141.27587891]
[89.65734100 155.52694702]
[84.97683716 169.77801514]
[80.29633331 184.02906799]
[75.61583710 198.28013611]
[70.93533325 212.53120422]
[77.81202698 226.50793457]
[72.86231995 240.89385986]
[59.49526978 247.36360168]
[54.81476974 261.61468506]
[50.13426590 275.86575317]
[56.85406494 282.46621704]
[60.94623566 290.90109253]
[61.96164322 300.17669678]
[59.81167603 309.21130371]
[54.77514648 316.96133423]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 13]
[3 12]
[4 11]
[5 10]
[16 93]
[17 92]
[18 91]
[21 88]
[22 87]
[23 86]
[24 85]
[25 84]
[26 83]
[27 82]
[28 81]
[29 76]
[30 75]
[31 74]
[32 73]
[33 60]
[34 59]
[35 58]
[36 57]
[37 56]
[38 55]
[39 52]
[40 50]
[41 49]
[42 48]
[43 47]
] def

init

% Start Annotations
2 13 0.0 1 colorpair
3 12 0.0 1 colorpair
4 11 0.0 1 colorpair
5 10 0.0 1 colorpair
16 93 0.0 1 colorpair
17 92 0.0 1 colorpair
18 91 0.0 1 colorpair
21 88 0.0 1 colorpair
22 87 0.0 1 colorpair
23 86 0.0 1 colorpair
24 85 0.0 1 colorpair
25 84 0.0 1 colorpair
26 83 0.0 1 colorpair
27 82 0.0 1 colorpair
28 81 0.0 1 colorpair
29 76 0.0 1 colorpair
30 75 0.0 1 colorpair
31 74 0.0 1 colorpair
32 73 0.0 1 colorpair
33 60 0.0 1 colorpair
34 59 0.0 1 colorpair
35 58 0.0 1 colorpair
36 57 0.0 1 colorpair
37 56 0.0 1 colorpair
38 55 0.0 1 colorpair
39 52 0.0 1 colorpair
40 50 0.0 1 colorpair
41 49 0.0 1 colorpair
42 48 0.0 1 colorpair
43 47 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
