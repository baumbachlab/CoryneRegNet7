%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu May 14 18:36:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCAUCACCCCCCGGAUCAUUUUCAGACAGGGACAGGAAUAAACCAUACCGAAGCCAGCGACUAGUUCCACUGUCCUUUCGGACGGCGGGAAC\
) } def
/len { sequence length } bind def

/coor [
[203.30253601 143.80982971]
[189.13249207 138.88946533]
[174.96246338 133.96908569]
[160.40136719 137.10340881]
[149.90280151 125.26742554]
[135.73275757 120.34705353]
[122.93863678 134.12699890]
[105.34771729 140.77050781]
[86.63852692 138.88835144]
[70.72339630 128.87409973]
[60.93041229 112.82186890]
[46.06425095 114.82117462]
[31.19808769 116.82048035]
[18.55232811 126.32812500]
[4.90733480 120.35623932]
[-3.37475443 124.67895508]
[-10.48802853 122.16535950]
[-25.41269684 123.66679382]
[-34.06467056 136.69282532]
[-49.07995605 141.06034851]
[-63.36879349 134.70713806]
[-70.18443298 120.63301849]
[-66.30873871 105.48332977]
[-53.57168961 96.41130829]
[-37.98733521 97.70046997]
[-26.91413116 108.74212646]
[-11.98946381 107.24069214]
[2.90803075 105.49008179]
[14.49046230 96.12543488]
[29.19878387 101.95431519]
[44.06494522 99.95500946]
[58.93110657 97.95570374]
[60.43121719 88.81320190]
[63.94004822 80.23860168]
[69.27947235 72.66719818]
[76.17843628 66.48334503]
[69.86441040 52.87698364]
[54.93901062 47.68007278]
[48.13523865 33.41528320]
[53.48965836 18.54565811]
[67.82558441 11.89308357]
[82.63777161 17.40441322]
[89.13840485 31.80987358]
[83.47077942 46.56296158]
[89.78479767 60.16932297]
[103.19256592 59.00438309]
[116.25834656 62.23097610]
[127.58249664 69.50345612]
[135.95195007 80.04279327]
[140.47016907 92.71997833]
[140.65313721 106.17701721]
[154.82316589 111.09738922]
[170.39779663 108.31500244]
[179.88282776 119.79904938]
[194.05287170 124.71942902]
[208.22290039 129.63980103]
[213.37506104 124.93098450]
[219.65306091 121.97583008]
[226.48379517 121.01724243]
[233.25161743 122.11708069]
[239.35377502 125.15275574]
[244.25408936 129.83039856]
[247.53009033 135.71313477]
[248.90933228 142.26179504]
[248.29199219 148.88435364]
[260.93536377 156.95559692]
[273.57876587 165.02682495]
[286.22213745 173.09806824]
[298.86553955 181.16929626]
[317.18264771 181.47427368]
[324.82687378 197.17404175]
[337.73287964 204.81829834]
[350.63891602 212.46253967]
[363.54495239 220.10679626]
[376.45095825 227.75105286]
[389.35699463 235.39529419]
[405.75222778 235.03683472]
[414.02780151 249.19476318]
[405.67050171 263.30459595]
[389.27761841 262.85137939]
[381.71273804 248.30131531]
[368.80670166 240.65707397]
[355.90069580 233.01281738]
[342.99465942 225.36857605]
[330.08865356 217.72431946]
[317.18261719 210.08007812]
[305.25897217 212.76887512]
[294.39404297 206.33575439]
[290.79428101 193.81268311]
[278.15090942 185.74145508]
[265.50753784 177.67021179]
[252.86413574 169.59898376]
[240.22076416 161.52774048]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 56]
[2 55]
[3 54]
[5 52]
[6 51]
[11 32]
[12 31]
[13 30]
[15 28]
[17 27]
[18 26]
[36 45]
[37 44]
[65 93]
[66 92]
[67 91]
[68 90]
[69 89]
[71 86]
[72 85]
[73 84]
[74 83]
[75 82]
[76 81]
] def

init

% Start Annotations
1 56 0.0 1 colorpair
2 55 0.0 1 colorpair
3 54 0.0 1 colorpair
5 52 0.0 1 colorpair
6 51 0.0 1 colorpair
11 32 0.0 1 colorpair
12 31 0.0 1 colorpair
13 30 0.0 1 colorpair
15 28 0.0 1 colorpair
17 27 0.0 1 colorpair
18 26 0.0 1 colorpair
36 45 0.0 1 colorpair
37 44 0.0 1 colorpair
65 93 0.0 1 colorpair
66 92 0.0 1 colorpair
67 91 0.0 1 colorpair
68 90 0.0 1 colorpair
69 89 0.0 1 colorpair
71 86 0.0 1 colorpair
72 85 0.0 1 colorpair
73 84 0.0 1 colorpair
74 83 0.0 1 colorpair
75 82 0.0 1 colorpair
76 81 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
