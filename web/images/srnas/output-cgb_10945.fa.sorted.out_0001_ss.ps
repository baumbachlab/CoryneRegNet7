%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu May 14 18:37:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCUGAACUCCAAGAUGAUGGUUGGUAUAGACAAGCCUUUGCAGAUGGUUUCUUGCAUGGAAAACAACUGAGUACAUUUUUUCCCGCAUGGGACGAGUUUGC\
) } def
/len { sequence length } bind def

/coor [
[95.04796600 240.22549438]
[79.59456635 238.82121277]
[67.94011688 228.57653809]
[64.56598663 213.43075562]
[70.76960754 199.20771790]
[84.16555786 191.37648010]
[85.52304077 176.43803406]
[86.88052368 161.49958801]
[88.23800659 146.56114197]
[89.59548950 131.62269592]
[90.95297241 116.68424225]
[81.12670898 102.00287628]
[87.65277100 85.58616638]
[83.19022369 71.26535034]
[78.72767639 56.94454193]
[74.26512909 42.62372589]
[69.80258179 28.30291367]
[65.34004211 13.98210144]
[59.70930481 6.57267570]
[60.96604538 -0.83904475]
[56.93806458 -15.28810692]
[45.77916336 -26.50369835]
[49.81460190 -40.84122086]
[45.78662491 -55.29027939]
[41.75864792 -69.73934174]
[37.73066711 -84.18840790]
[33.70269012 -98.63746643]
[20.70590401 -99.21900177]
[8.43345261 -103.48168945]
[-2.09605956 -111.06078339]
[-10.01182079 -121.31671906]
[-14.66282749 -133.38909912]
[-15.67141819 -146.26889038]
[-12.96391392 -158.88267517]
[-6.77590132 -170.18222046]
[2.36823273 -179.23150635]
[13.69972324 -185.28430176]
[10.99589729 -200.03860474]
[0.77184212 -208.07971191]
[-1.10190904 -220.54391479]
[5.84772825 -230.57243347]
[3.59076071 -245.40167236]
[1.33379304 -260.23089600]
[-0.92317444 -275.06011963]
[-3.40385389 -289.85357666]
[-6.10767937 -304.60787964]
[-18.44091415 -314.86804199]
[-17.96479988 -330.90402222]
[-5.04457188 -340.41439819]
[10.40847683 -336.10363770]
[16.54009056 -321.27856445]
[8.64661884 -307.31170654]
[11.35044479 -292.55740356]
[15.72497559 -286.44378662]
[13.90605640 -277.31710815]
[16.16302490 -262.48785400]
[18.41999245 -247.65863037]
[20.67695999 -232.82940674]
[32.37147903 -219.84140015]
[25.75019646 -202.74241638]
[28.45402145 -187.98812866]
[45.34746170 -184.96774292]
[59.87344742 -175.76478577]
[69.86064148 -161.72398376]
[73.80448151 -144.91546631]
[71.09380341 -127.82958221]
[62.10536575 -113.00798035]
[48.15175247 -102.66544342]
[52.17972946 -88.21638489]
[56.20770645 -73.76731873]
[60.23568726 -59.31826019]
[64.26366425 -44.86919785]
[75.13446045 -34.68709946]
[71.38713074 -19.31608391]
[75.41510773 -4.86702299]
[79.66085052 9.51955605]
[84.12339783 23.84036827]
[88.58594513 38.16118240]
[93.04849243 52.48199463]
[97.51103210 66.80281067]
[101.97357941 81.12361908]
[115.45501709 88.98387146]
[118.48762512 104.29190063]
[130.56939697 113.18183136]
[142.65115356 122.07176971]
[154.73292542 130.96170044]
[171.08251953 132.23562622]
[177.90896606 147.14640808]
[168.18981934 160.35511780]
[151.92329407 158.27377319]
[145.84298706 143.04347229]
[133.76123047 134.15353394]
[121.67945862 125.26360321]
[109.59769440 116.37366486]
[107.78933716 117.30719757]
[105.89141846 118.04172516]
[104.53393555 132.98017883]
[103.17645264 147.91862488]
[101.81896973 162.85707092]
[100.46148682 177.79551697]
[99.10400391 192.73396301]
[110.86890411 202.85160828]
[114.40713501 217.95991516]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 101]
[7 100]
[8 99]
[9 98]
[10 97]
[11 96]
[13 81]
[14 80]
[15 79]
[16 78]
[17 77]
[18 76]
[20 75]
[21 74]
[23 72]
[24 71]
[25 70]
[26 69]
[27 68]
[37 61]
[38 60]
[41 58]
[42 57]
[43 56]
[44 55]
[45 53]
[46 52]
[83 94]
[84 93]
[85 92]
[86 91]
] def

init

% Start Annotations
6 101 0.0 1 colorpair
7 100 0.0 1 colorpair
8 99 0.0 1 colorpair
9 98 0.0 1 colorpair
10 97 0.0 1 colorpair
11 96 0.0 1 colorpair
13 81 0.0 1 colorpair
14 80 0.0 1 colorpair
15 79 0.0 1 colorpair
16 78 0.0 1 colorpair
17 77 0.0 1 colorpair
18 76 0.0 1 colorpair
20 75 0.0 1 colorpair
21 74 0.0 1 colorpair
23 72 0.0 1 colorpair
24 71 0.0 1 colorpair
25 70 0.0 1 colorpair
26 69 0.0 1 colorpair
27 68 0.0 1 colorpair
37 61 0.0 1 colorpair
38 60 0.0 1 colorpair
41 58 0.0 1 colorpair
42 57 0.0 1 colorpair
43 56 0.0 1 colorpair
44 55 0.0 1 colorpair
45 53 0.0 1 colorpair
46 52 0.0 1 colorpair
83 94 0.0 1 colorpair
84 93 0.0 1 colorpair
85 92 0.0 1 colorpair
86 91 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
