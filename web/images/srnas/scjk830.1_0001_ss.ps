%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu May 14 18:19:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUUUUUUCGCAGCGGAACUCGACCGUCCCACCAGAAGAUGAUCGAAUACAUCGAUGCGUAUCGCGAUCGCUUCGGGGUCGAGGCCAUCUGUCGCACAUUGAAAGAGACAGAAUGUGGGUUCAUCACCUCUCG\
) } def
/len { sequence length } bind def

/coor [
[80.32429504 121.57607269]
[72.83699036 122.01216125]
[67.05644989 135.85359192]
[61.27590942 149.69503784]
[69.45976257 162.87850952]
[68.29800415 178.35203552]
[58.23735809 190.16571045]
[43.14634705 193.77694702]
[28.82777214 187.79714966]
[20.78741837 174.52566528]
[22.11696434 159.06565857]
[32.30517578 147.36180115]
[47.43447113 143.91448975]
[53.21501160 130.07305908]
[58.99554825 116.23162079]
[56.39082718 101.45950317]
[46.22484589 90.42987061]
[33.33452225 89.10755157]
[25.09357834 79.63455200]
[25.54002190 67.48888397]
[15.63344288 56.22568512]
[5.72686338 44.96248245]
[-4.17971611 33.69928360]
[-14.08629513 22.43608284]
[-23.99287415 11.17288208]
[-33.89945602 -0.09031887]
[-36.53758240 14.67586803]
[-48.72012329 23.42719460]
[-63.55585480 21.21335030]
[-72.65274048 9.28662872]
[-70.86499786 -5.60645628]
[-59.20389175 -15.04142475]
[-44.26533890 -13.68107510]
[-52.50797272 -26.21339226]
[-59.90776443 -31.72740173]
[-60.79263687 -39.13461304]
[-68.74142456 -51.85533524]
[-76.69021606 -64.57605743]
[-84.63899994 -77.29677582]
[-91.90848541 -82.98147583]
[-92.62075806 -90.40727234]
[-100.27140045 -103.30950928]
[-107.92203522 -116.21174622]
[-115.57267761 -129.11398315]
[-123.22331238 -142.01622009]
[-130.87396240 -154.91845703]
[-147.11299133 -163.50988770]
[-146.73718262 -181.01570129]
[-154.68597412 -193.73641968]
[-162.63476562 -206.45715332]
[-170.58355713 -219.17787170]
[-186.07164001 -220.12590027]
[-198.02307129 -230.02250671]
[-201.84230042 -245.06222534]
[-196.06072998 -259.46197510]
[-182.90150452 -267.68478394]
[-167.42460632 -266.56878662]
[-155.58123779 -256.54312134]
[-151.92538452 -241.46284485]
[-157.86282349 -227.12666321]
[-149.91404724 -214.40592957]
[-141.96525574 -201.68521118]
[-134.01646423 -188.96449280]
[-122.25300598 -185.90876770]
[-115.54149628 -175.29713440]
[-117.97171783 -162.56909180]
[-110.32107544 -149.66685486]
[-102.67044067 -136.76461792]
[-95.01979828 -123.86238861]
[-87.36916351 -110.96015167]
[-79.71852112 -98.05791473]
[-71.91828156 -85.24556732]
[-63.96949387 -72.52484131]
[-56.02070236 -59.80412292]
[-48.07191467 -47.08340073]
[-39.97565460 -34.45602798]
[-31.73302078 -21.92370987]
[-22.63625336 -9.99689865]
[-12.72967434 1.26630223]
[-2.82309508 12.52950287]
[7.08348417 23.79270363]
[16.99006462 35.05590439]
[26.89664268 46.31910324]
[36.80322266 57.58230591]
[53.68140030 62.24301147]
[57.25448227 80.26388550]
[67.42046356 91.29352570]
[91.05789185 63.42422104]
[130.68846130 71.93972015]
[145.68745422 71.76519012]
[160.68643188 71.59066010]
[175.68542480 71.41613007]
[190.68440247 71.24160767]
[205.68339539 71.06707764]
[211.67648315 57.06697845]
[222.85021973 46.71962738]
[237.26866150 41.81776047]
[252.43374634 43.21066284]
[265.71801758 50.65699768]
[274.81991577 62.86664581]
[278.16244507 77.72421265]
[275.16653442 92.65553284]
[266.35122681 105.07366943]
[253.24380493 112.82710266]
[238.11523438 114.57249451]
[223.58663940 110.00746155]
[212.17515564 99.92291260]
[205.85792542 86.06606293]
[190.85893250 86.24058533]
[175.85995483 86.41511536]
[160.86096191 86.58964539]
[145.86198425 86.76417542]
[130.86299133 86.93870544]
[127.11299896 93.43389893]
[140.10325623 100.93411255]
[132.60282898 113.92424011]
[119.61299896 106.42427826]
[115.86299896 112.91946411]
[123.21134186 125.99623108]
[130.55969238 139.07299805]
[137.90803528 152.14976501]
[152.90461731 157.84906006]
[157.66154480 173.17065430]
[148.52969360 186.36112976]
[132.51425171 187.30189514]
[121.90088654 175.27127075]
[124.83126831 159.49810791]
[117.48292542 146.42134094]
[110.13457489 133.34457397]
[102.78623199 120.26781464]
[95.29891968 120.70389557]
[96.17108917 135.67852783]
[97.04301453 150.65315247]
[82.06836700 151.52484131]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 15]
[3 14]
[4 13]
[16 87]
[17 86]
[20 84]
[21 83]
[22 82]
[23 81]
[24 80]
[25 79]
[26 78]
[33 77]
[34 76]
[36 75]
[37 74]
[38 73]
[39 72]
[41 71]
[42 70]
[43 69]
[44 68]
[45 67]
[46 66]
[48 63]
[49 62]
[50 61]
[51 60]
[89 113]
[90 112]
[91 111]
[92 110]
[93 109]
[94 108]
[118 130]
[119 129]
[120 128]
[121 127]
] def

init

% Start Annotations
2 15 0.0 1 colorpair
3 14 0.0 1 colorpair
4 13 0.0 1 colorpair
16 87 0.16 1 colorpair
17 86 0.0 1 colorpair
20 84 0.0 1 colorpair
21 83 0.0 1 colorpair
22 82 0.0 1 colorpair
23 81 0.0 1 colorpair
24 80 0.0 1 colorpair
25 79 0.0 1 colorpair
26 78 0.0 1 colorpair
33 77 0.0 1 colorpair
34 76 0.0 1 colorpair
36 75 0.0 1 colorpair
37 74 0.0 1 colorpair
38 73 0.0 1 colorpair
39 72 0.0 1 colorpair
41 71 0.0 1 colorpair
42 70 0.0 1 colorpair
43 69 0.0 1 colorpair
44 68 0.0 1 colorpair
45 67 0.0 1 colorpair
46 66 0.0 1 colorpair
48 63 0.0 1 colorpair
49 62 0.0 1 colorpair
50 61 0.0 1 colorpair
51 60 0.0 1 colorpair
89 113 0.0 1 colorpair
90 112 0.0 1 colorpair
91 111 0.0 1 colorpair
92 110 0.0 1 colorpair
93 109 0.0 1 colorpair
94 108 0.0 0.6 colorpair
118 130 0.0 1 colorpair
119 129 0.0 1 colorpair
120 128 0.0 1 colorpair
121 127 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
87 cmark
94 108 1 gmark

% End Annotations
showpage
end
%%EOF
