%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu May 14 16:15:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCCCACUCUUGUAGUUGGGAAUUGACGGCACCUCGCACUCAAGCGCGGUAUCGCCCCUGGUUUUCCGGGACGCGGUGGCGCAUGUUUGCAUUUGAUGAGGUUGUCCGUGACAUGUUUGGUCGGGCCCCAAAAAGAGCCCCCUUUUUUGCG\
) } def
/len { sequence length } bind def

/coor [
[100.42324829 159.14906311]
[100.62322235 144.15039062]
[93.25093079 145.52851868]
[85.88468933 158.59521484]
[78.51844788 171.66191101]
[71.15220642 184.72860718]
[63.78596878 197.79530334]
[56.55426788 210.93693542]
[49.45786285 224.15211487]
[52.68997192 239.86621094]
[42.30910492 252.09802246]
[26.27857208 251.46434021]
[16.89562607 238.45127869]
[21.35806274 223.04133606]
[36.24267960 217.05570984]
[43.33908463 203.84053040]
[43.73515701 196.41386414]
[50.71927643 190.42906189]
[58.08551407 177.36236572]
[65.45175171 164.29566956]
[72.81799316 151.22897339]
[80.18423462 138.16227722]
[63.01658630 115.12657928]
[64.90621185 88.55038452]
[82.24365997 71.15591431]
[70.46749115 60.59029388]
[73.68446350 46.04724121]
[68.84465027 31.84949112]
[64.00483704 17.65173721]
[59.16501617 3.45398521]
[54.17969513 -10.69333172]
[49.04939270 -24.78872108]
[43.77465057 -38.83069611]
[38.35602570 -52.81777954]
[32.93740082 -66.80486298]
[27.51877594 -80.79194641]
[22.10015106 -94.77902985]
[16.53821373 -108.70974731]
[10.83355045 -122.58262634]
[-6.88515139 -129.15039062]
[-14.11270618 -146.26599121]
[-6.72128534 -162.96461487]
[-12.99069023 -176.59158325]
[-19.26009560 -190.21856689]
[-25.52950096 -203.84555054]
[-31.79890633 -217.47251892]
[-38.34677505 -230.96791077]
[-45.17035294 -244.32600403]
[-51.99392700 -257.68411255]
[-65.16207123 -266.45397949]
[-64.06139374 -281.30786133]
[-70.88497162 -294.66595459]
[-77.70854950 -308.02404785]
[-84.53211975 -321.38214111]
[-91.35569763 -334.74026489]
[-98.17927551 -348.09835815]
[-113.85068512 -357.71279907]
[-112.33916473 -375.17016602]
[-119.43556976 -388.38534546]
[-126.53197479 -401.60052490]
[-133.62837219 -414.81570435]
[-140.72477722 -428.03091431]
[-154.94487000 -436.19918823]
[-154.71037292 -452.59667969]
[-140.26252747 -460.35501099]
[-126.46403503 -451.49307251]
[-127.50959778 -435.12728882]
[-120.41319275 -421.91210938]
[-113.31679535 -408.69692993]
[-106.22039032 -395.48175049]
[-99.12398529 -382.26657104]
[-87.60264587 -378.45593262]
[-81.59576416 -367.45190430]
[-84.82117462 -354.92193604]
[-77.99759674 -341.56384277]
[-71.17401886 -328.20571899]
[-64.35044861 -314.84762573]
[-57.52687073 -301.48953247]
[-50.70329666 -288.13143921]
[-38.02322006 -280.31701660]
[-38.63582993 -264.50769043]
[-31.81225204 -251.14958191]
[-24.98867798 -237.79148865]
[-20.74482346 -235.48086548]
[-17.93931007 -230.44927979]
[-18.17192650 -223.74192810]
[-11.90252209 -210.11494446]
[-5.63311672 -196.48797607]
[0.63628840 -182.86099243]
[6.90569353 -169.23400879]
[18.27967834 -167.67083740]
[27.56565857 -160.71687317]
[32.36475754 -150.02293396]
[31.36699104 -138.22335815]
[24.70643234 -128.28729248]
[30.41109467 -114.41441345]
[35.89749527 -109.39329529]
[36.08723450 -100.19765472]
[41.50585938 -86.21057129]
[46.92448425 -72.22348785]
[52.34310913 -58.23640442]
[57.76173401 -44.24932098]
[63.14388657 -39.11661911]
[63.14478302 -29.91902351]
[68.27508545 -15.82363319]
[73.55072021 -10.58150768]
[73.36277008 -1.38583124]
[78.20258331 12.81192112]
[83.04240417 27.00967407]
[87.88221741 41.20742798]
[99.31221771 50.75753021]
[96.44141388 66.31610107]
[106.76824188 65.64794159]
[117.15259552 68.17437744]
[126.60018921 73.85951996]
[134.14736938 82.35718536]
[138.95788574 93.02743530]
[140.41198730 104.98310089]
[138.17872620 117.16318512]
[132.26345825 128.42698669]
[143.85250854 137.95031738]
[150.39918518 139.42803955]
[154.55375671 143.41894531]
[155.71133423 148.11035156]
[166.89964294 158.10144043]
[178.08793640 168.09254456]
[189.27622986 178.08363342]
[204.72320557 181.50440979]
[209.06268311 195.75285339]
[224.82566833 194.61079407]
[236.72450256 205.01239014]
[237.69984436 220.78654480]
[227.17303467 232.57475281]
[211.38943481 233.38327026]
[199.71318054 222.73240662]
[199.07159424 206.94114685]
[184.42488098 204.23500061]
[179.28512573 189.27194214]
[168.09683228 179.28083801]
[156.90853882 169.28973389]
[145.72024536 159.29864502]
[134.32916260 149.53936768]
[122.74011993 140.01603699]
[115.36782074 141.39414978]
[120.97243500 155.30775452]
[126.57705688 169.22135925]
[136.63560486 180.34904480]
[137.05554199 195.34317017]
[127.63555908 207.01637268]
[112.89106750 209.77320862]
[99.88975525 202.29217529]
[94.86371613 188.15927124]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 22]
[4 21]
[5 20]
[6 19]
[7 18]
[8 16]
[9 15]
[25 112]
[27 110]
[28 109]
[29 108]
[30 107]
[31 105]
[32 104]
[33 102]
[34 101]
[35 100]
[36 99]
[37 98]
[38 96]
[39 95]
[42 90]
[43 89]
[44 88]
[45 87]
[46 86]
[47 83]
[48 82]
[49 81]
[51 79]
[52 78]
[53 77]
[54 76]
[55 75]
[56 74]
[58 71]
[59 70]
[60 69]
[61 68]
[62 67]
[120 143]
[121 142]
[124 141]
[125 140]
[126 139]
[127 138]
[129 136]
] def

init

% Start Annotations
3 22 0.0 1 colorpair
4 21 0.0 1 colorpair
5 20 0.0 1 colorpair
6 19 0.0 1 colorpair
7 18 0.0 1 colorpair
8 16 0.0 1 colorpair
9 15 0.0 1 colorpair
25 112 0.0 1 colorpair
27 110 0.0 1 colorpair
28 109 0.0 1 colorpair
29 108 0.0 1 colorpair
30 107 0.16 1 colorpair
31 105 0.0 1 colorpair
32 104 0.0 1 colorpair
33 102 0.0 1 colorpair
34 101 0.0 1 colorpair
35 100 0.0 1 colorpair
36 99 0.0 0.6 colorpair
37 98 0.0 0.6 colorpair
38 96 0.0 1 colorpair
39 95 0.0 1 colorpair
42 90 0.0 1 colorpair
43 89 0.0 1 colorpair
44 88 0.0 1 colorpair
45 87 0.0 1 colorpair
46 86 0.0 1 colorpair
47 83 0.0 1 colorpair
48 82 0.0 1 colorpair
49 81 0.0 1 colorpair
51 79 0.0 1 colorpair
52 78 0.0 1 colorpair
53 77 0.0 1 colorpair
54 76 0.0 1 colorpair
55 75 0.0 1 colorpair
56 74 0.0 1 colorpair
58 71 0.0 1 colorpair
59 70 0.0 1 colorpair
60 69 0.0 1 colorpair
61 68 0.0 1 colorpair
62 67 0.0 1 colorpair
120 143 0.0 1 colorpair
121 142 0.0 1 colorpair
124 141 0.0 1 colorpair
125 140 0.0 1 colorpair
126 139 0.0 1 colorpair
127 138 0.0 1 colorpair
129 136 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
107 cmark
36 99 1 gmark
37 98 1 gmark

% End Annotations
showpage
end
%%EOF
