%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu May 14 16:15:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCAUCACCCCCCGGAUCAUUUUCAGACAGGGACGAAAACAAGCCAUACCGAAGCCAGCGACUAGUUCCACUGCCCCAAGGCAGAAGGAACG_\
) } def
/len { sequence length } bind def

/coor [
[137.40815735 120.92881775]
[123.23812103 116.00844574]
[109.06808472 111.08806610]
[95.30139160 113.53138733]
[86.01154327 103.08197021]
[71.84150696 98.16159058]
[64.31244659 99.91603088]
[57.76745224 97.45544434]
[43.17607117 100.93274689]
[28.58469200 104.41004944]
[24.08330154 120.21969604]
[12.33177471 131.57989502]
[-3.44032574 135.49851990]
[-18.96309471 131.01095581]
[-30.08221817 119.41540527]
[-44.54925537 123.37833405]
[-52.15630722 137.23143005]
[-67.35405731 141.56777954]
[-81.12595367 133.81468201]
[-85.30137634 118.57193756]
[-77.40311432 104.88278198]
[-62.11707306 100.86875153]
[-48.51218796 108.91130066]
[-34.04515076 104.94836426]
[-31.42240524 91.43581390]
[-23.15900040 80.34433746]
[-10.84383774 73.90325165]
[3.11285734 73.43832397]
[15.95119762 79.09925842]
[25.10738945 89.81867218]
[39.69876862 86.34136963]
[54.29014969 82.86406708]
[40.68243408 76.55296326]
[29.61193275 66.43149567]
[22.10974503 53.44237900]
[18.87461662 38.79540253]
[20.20786476 23.85477066]
[25.98531151 10.01204300]
[35.66884995 -1.44348228]
[48.35656738 -9.44484806]
[62.86673737 -13.24681377]
[77.84790039 -12.49526882]
[91.90471649 -7.26021051]
[103.72795868 1.97077179]
[112.21640778 14.33791351]
[116.57946777 28.68935013]
[116.41075897 43.68840027]
[111.72600555 57.93806839]
[102.96152496 70.11115265]
[90.93364716 79.07386017]
[76.76187897 83.99155426]
[90.93191528 88.91193390]
[104.69860840 86.46861267]
[113.98845673 96.91802979]
[128.15849304 101.83840942]
[142.32852173 106.75878143]
[149.28918457 98.96793365]
[158.30220032 93.74424744]
[168.46369934 91.59001160]
[178.76127625 92.70075226]
[188.17491150 96.94765472]
[195.77798462 103.89218903]
[200.82852173 112.83131409]
[202.84149170 122.86865234]
[201.63545227 133.00431824]
[214.78970337 140.21304321]
[227.94395447 147.42178345]
[241.09820557 154.63050842]
[254.25245667 161.83923340]
[272.54904175 160.92007446]
[281.22482300 176.07420349]
[294.61260986 182.83935547]
[308.00036621 189.60450745]
[321.38815308 196.36965942]
[334.77593994 203.13481140]
[351.11062622 201.68206787]
[360.31335449 215.25563049]
[352.91717529 229.89218140]
[336.53063965 230.53489685]
[328.01080322 216.52259827]
[314.62301636 209.75744629]
[301.23522949 202.99229431]
[287.84744263 196.22714233]
[274.45965576 189.46199036]
[262.74221802 192.94120789]
[251.47189331 187.24813843]
[247.04371643 174.99348450]
[233.88948059 167.78475952]
[220.73522949 160.57601929]
[207.58097839 153.36729431]
[194.42672729 146.15856934]
[177.13621521 156.32684326]
[157.03909302 154.37850952]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 56]
[2 55]
[3 54]
[5 52]
[6 51]
[8 32]
[9 31]
[10 30]
[15 24]
[16 23]
[65 91]
[66 90]
[67 89]
[68 88]
[69 87]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% Start Annotations
1 56 0.0 1 colorpair
2 55 0.0 1 colorpair
3 54 0.0 1 colorpair
5 52 0.0 1 colorpair
6 51 0.0 1 colorpair
8 32 0.0 1 colorpair
9 31 0.0 1 colorpair
10 30 0.0 1 colorpair
15 24 0.0 1 colorpair
16 23 0.0 1 colorpair
65 91 0.0 0.6 colorpair
66 90 0.16 1 colorpair
67 89 0.16 1 colorpair
68 88 0.0 1 colorpair
69 87 0.0 0.6 colorpair
71 84 0.0 0.6 colorpair
72 83 0.0 1 colorpair
73 82 0.0 0.6 colorpair
74 81 0.16 1 colorpair
75 80 0.0 0.6 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
65 91 1 gmark
90 cmark
89 cmark
69 87 1 gmark
71 84 1 gmark
73 82 1 gmark
74 cmark
75 80 1 gmark

% End Annotations
showpage
end
%%EOF
