%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu May 14 16:15:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAGGCCCCGAUAUACAGUGUGGCCUGCCCCGGCACAAUCCCCCCCCGUUGCCGGGUUACUGACGGCCCGCGCACACCCCCCCCGAGGCGCGGGCCGUCCCUUAUUUU\
) } def
/len { sequence length } bind def

/coor [
[82.09572601 148.49176025]
[74.22746277 144.80838013]
[67.08720398 139.85928345]
[55.95933914 149.91763306]
[44.83147049 159.97599792]
[33.70360565 170.03436279]
[22.57573891 180.09271240]
[17.52627754 195.08650208]
[2.89614964 197.88088989]
[-8.23171616 207.93925476]
[-6.44625330 223.35325623]
[-14.09122658 236.85636902]
[-28.22698784 243.25636292]
[-43.41804886 240.09230042]
[-53.82313919 228.58084106]
[-55.44128418 213.14836121]
[-47.65027618 199.72897339]
[-33.44591904 193.48271179]
[-18.29007530 196.81138611]
[-7.16220951 186.75302124]
[-2.90868759 172.47868347]
[12.51737976 168.96484375]
[23.64524651 158.90649414]
[34.77311325 148.84812927]
[45.90097809 138.78977966]
[57.02884674 128.73141479]
[48.87672806 107.64366150]
[50.50438309 85.09368896]
[61.60043716 65.39526367]
[52.03241730 53.84307480]
[42.46439743 42.29088974]
[32.89637756 30.73870659]
[23.32835579 19.18652153]
[13.76033497 7.63433552]
[4.19231462 -3.91784954]
[-10.32370758 0.59364128]
[-25.46077919 -0.79830372]
[-38.91060638 -7.88142300]
[-48.62218857 -19.57559204]
[-53.11458206 -34.09753799]
[-51.70272446 -49.23276520]
[-44.60191727 -62.67326355]
[-32.89498138 -72.36945343]
[-18.36714172 -76.84273529]
[-3.23378539 -75.41097260]
[10.19736004 -68.29249573]
[19.87814331 -56.57281494]
[24.33231354 -42.03910065]
[22.88064194 -26.90764046]
[15.74450016 -13.48587036]
[25.31252098 -1.93368506]
[34.88054276 9.61849976]
[44.44856262 21.17068481]
[54.01658249 32.72286987]
[63.58460236 44.27505493]
[73.15262604 55.82723999]
[88.23670959 49.66473007]
[104.48966217 48.50381470]
[120.29649353 52.45984268]
[134.08654785 61.13972473]
[144.48959351 73.68097687]
[150.47189331 88.83743286]
[165.43296814 87.75754547]
[180.39404297 86.67765808]
[195.35511780 85.59777069]
[210.31619263 84.51788330]
[225.27728271 83.43799591]
[240.23835754 82.35810852]
[255.19943237 81.27822113]
[270.16052246 80.19833374]
[285.12158203 79.11843872]
[300.08267212 78.03855133]
[315.04373169 76.95866394]
[319.80151367 62.52149200]
[329.72579956 51.00726700]
[343.30316162 44.17182922]
[358.46319580 43.05753326]
[372.89410400 47.83429718]
[384.39526367 57.77370453]
[391.21282959 71.36006165]
[392.30718994 86.52155304]
[387.51144409 100.94615936]
[377.55691528 112.43423462]
[363.96160889 119.23393250]
[348.79867554 120.30833435]
[334.38040161 115.49362183]
[322.90542603 105.52399445]
[316.12362671 91.91974640]
[301.16253662 92.99963379]
[286.20147705 94.07952118]
[271.24038696 95.15940857]
[256.27932739 96.23929596]
[241.31823730 97.31918335]
[226.35716248 98.39907074]
[211.39608765 99.47895813]
[196.43501282 100.55884552]
[181.47393799 101.63874054]
[166.51284790 102.71862793]
[151.55177307 103.79851532]
[150.18753052 112.37847137]
[147.40562439 120.60877991]
[143.28463745 128.25694275]
[137.94097900 135.10691833]
[131.52560425 140.96524048]
[124.21971130 145.66639709]
[116.22969055 149.07760620]
[107.78121948 151.10250854]
[99.11294556 151.68391418]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 26]
[4 25]
[5 24]
[6 23]
[7 22]
[9 20]
[10 19]
[29 56]
[30 55]
[31 54]
[32 53]
[33 52]
[34 51]
[35 50]
[62 99]
[63 98]
[64 97]
[65 96]
[66 95]
[67 94]
[68 93]
[69 92]
[70 91]
[71 90]
[72 89]
[73 88]
] def

init

% Start Annotations
3 26 0.0 1 colorpair
4 25 0.0 1 colorpair
5 24 0.0 1 colorpair
6 23 0.0 1 colorpair
7 22 0.0 1 colorpair
9 20 0.0 1 colorpair
10 19 0.0 1 colorpair
29 56 0.0 1 colorpair
30 55 0.0 1 colorpair
31 54 0.0 1 colorpair
32 53 0.0 1 colorpair
33 52 0.16 1 colorpair
34 51 0.0 1 colorpair
35 50 0.16 1 colorpair
62 99 0.0 1 colorpair
63 98 0.0 1 colorpair
64 97 0.0 1 colorpair
65 96 0.0 1 colorpair
66 95 0.0 1 colorpair
67 94 0.0 1 colorpair
68 93 0.0 1 colorpair
69 92 0.0 1 colorpair
70 91 0.0 1 colorpair
71 90 0.0 1 colorpair
72 89 0.0 1 colorpair
73 88 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
52 cmark
35 cmark
50 cmark

% End Annotations
showpage
end
%%EOF
